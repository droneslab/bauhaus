#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_variables)]

mod sim3solver_tests {
    use core::{config::{load_config, SETTINGS}, matrix::{DVMatrix, DVMatrix3, DVVector3, DVVectorOfKeyPoint}, sensor::{FrameSensor, ImuSensor, Sensor}, system::{Actor, System, Timestamp}};
    use std::{collections::{HashMap, HashSet}, env};
    use std::ops::AddAssign;

    use crossbeam_channel::unbounded;
    use g2o::ffi::VertexPoseRecoverType;
    use nalgebra::{DMatrix, Matrix3, Quaternion, SMatrix, UnitQuaternion, Vector3};
    use opencv::core::KeyPointTraitConst;

    use crate::{actors::tracking_backend::{TrackedMapPointData, TrackingBackend}, map::{frame::Frame, keyframe::KeyFrame, map::Id, pose::{group_exp, Pose}, read_only_lock::ReadWriteMap}, modules::{imu::{normalize_rotation, ImuBias, ImuCalib, ImuDataFrame, ImuPreIntegrated, IntegratedRotation, GRAVITY_VALUE}, optimizer::{add_vertex_pose_frame, add_vertex_pose_keyframe, pose_inertial_optimization_last_keyframe, INV_LEVEL_SIGMA2, TH_HUBER_MONO}}, registered_actors::{CAMERA, CAMERA_MODULE}};

    fn load_config_files() {
        let mut system_config = env::current_dir().unwrap();
        system_config.push("orbslam_config.yaml");
        let mut dataset_config = env::current_dir().unwrap();
        dataset_config.push("config_datasets/EUROC.yaml");
        let _ = load_config(
            &system_config.into_os_string().into_string().unwrap(),
            &dataset_config.into_os_string().into_string().unwrap()
        ).expect("Could not load config");
    }

    #[test]
    fn test_pose_inertial_optimization_last_keyframe() {
        load_config_files();

        // Current frame setup
        let mut frame = Frame::new_no_features(1, None, 1.0, None).expect("Could not create frame!");
        frame.imu_data.velocity = Some(DVVector3::new_with( 0.3847815990447998, 0.16306699812412262,  0.0883331298828125));
        frame.imu_data.imu_bias = ImuBias {
            bwx: -0.0026990403421223164, bwy: 0.020717339590191841, bwz: 0.076764784753322601,
            bax: -0.018955998122692108, bay: 0.01000912394374609, baz: 0.089850954711437225,
        };
        frame.pose = Some(Pose::new(
            Vector3::new(-1.1782878637313843, 2.2335002422332764,-1.0996993780136108), 
            Matrix3::from_row_slice(&[
            0.99493575096130371 ,-0.092889264225959778 , 0.038399115204811096,
            0.0044288886711001396 , -0.34114515781402588 , -0.94000035524368286,
            0.10041560232639313 ,  0.93540996313095093,  -0.33900618553161621,
            ])
        ));

        frame.imu_data.imu_preintegrated = Some(ImuPreIntegrated {
            jrg: Matrix3::from_row_slice(&[
                -0.19999875128269196 , 0.00053312920499593019 , -0.0001320002629654482,
                -0.00053289270726963878 ,   -0.19999860227108002, -0.00028873226256109774,
                0.00013304046296980232 , 0.00028810912044718862 ,   -0.19999969005584717,
            ]),
            jvg: Matrix3::from_row_slice(&[
                -0.00025912997080013156  ,  0.059583086520433426 , -0.0020427999552339315,
                -0.059810705482959747, -0.00036217484739609063 ,   -0.16599120199680328,
                0.0012908041244372725 ,    0.16608121991157532 ,-0.00010841513721970841,
            ]),
            jpg: Matrix3::from_row_slice(&[
                -1.4246365935832728e-05 ,  0.0039605256170034409, -3.1983217922970653e-05,
                -0.0039725759997963905 ,-1.9289806004962884e-05 ,   -0.01095870602875948,
                -9.1482679636101238e-06  ,  0.010963146574795246, -5.0999374252569396e-06,
            ]),
            jva: Matrix3::from_row_slice(&[
                -0.19999632239341736 , -0.0010809581726789474 , 0.00032267480855807662,
                0.0010813412955030799  ,   -0.1999964714050293 , 0.00020525291620288044,
                -0.00032128294697031379 ,-0.00020727988157887012 ,    -0.1999996155500412,
            ]),
            jpa: Matrix3::from_row_slice(&[
                -0.019999755546450615, -8.3901701145805418e-05 , 2.6570092813926749e-05,
                8.3924598584417254e-05  , -0.019999777898192406 , 1.2361690096440725e-05,
                -2.6497715225559659e-05, -1.2511456588981673e-05 ,  -0.019999977201223373,
            ]),
            d_r: Matrix3::from_row_slice(&[
                0.99996387958526611 , 0.0081693381071090698, -0.0023142753634601831,
                -0.0081751430407166481  ,  0.99996346235275269 ,-0.0024961126036942005,
                0.0022937930189073086 , 0.0025149111170321703 ,   0.99999427795410156,
            ]),
            d_v: Vector3::new(1.7004731893539429,-0.014589099213480949, -0.61408066749572754),
            d_b: SMatrix::<f64, 6, 1>::new(0.00037976936437189579, 0.0002241283655166626, 0.0014094710350036621, 0.0018658246845006943,  -0.028513258323073387,  0.013556249439716339),
            d_p: Vector3::new(0.16977086663246155,-0.00087607058230787516,  -0.061695210635662079),
            avg_a: Vector3::new(8.5023622512817383,-0.072945475578308105,  -3.0704023838043213),
            avg_w: Vector3::new(0.012518199160695076,-0.011496457271277905,-0.040866415947675705),
            d_t: 0.20000004768371582,
            c: SMatrix::<f64, 15, 15>::from_iterator(vec![
                5.7799960373472459e-09,-5.5480517424452538e-18,2.6117235224626785e-19,1.4210441851014721e-11,1.7329732093784855e-09,-1.8714500435446091e-11,9.3771594222163968e-13,1.1518364734230957e-10,1.7183936565356994e-12,0.0,0.0,0.0,0.0,0.0,0.0,
                -5.3313337306788108e-18,5.7800013664177641e-09,1.3009985182559562e-17,-1.7218199088731012e-09,2.6136783709551636e-11,-4.7997992247417187e-09,-1.1445483449890048e-10,1.731738016874651e-12,-3.1682853562919888e-10,0.0,0.0,0.0,0.0,0.0,0.0,
                5.8540399130990322e-20,1.2684547514162825e-17,5.7800018105069739e-09,6.2249913557188563e-11,4.7954884507817042e-09,1.2112900092675627e-11,1.1573885296337072e-12,3.1656632870635804e-10,7.9272623621645666e-13,0.0,0.0,0.0,0.0,0.0,0.0,
                1.4210440983652983e-11,-1.7218197978507988e-09,6.2249906618294659e-11,8.0069702335094917e-07,5.2463970667826487e-11,1.9369774673094753e-09,8.0052018347487319e-08,3.4743605561993185e-12,1.43690823128928e-10,0.0,0.0,0.0,0.0,0.0,0.0,
                1.7329736534676954e-09,2.6136780240104684e-11,4.7954884507817042e-09,5.2464019240083815e-11,8.0608583630237263e-07,-1.8840842080924958e-11,7.6948804316259722e-13,8.0451570738659939e-08,-2.7790172506952926e-13,0.0,0.0,0.0,0.0,0.0,0.0,
                -1.8714503904893043e-11,-4.7997992247417187e-09,1.2112902694760841e-11,1.9369776893540802e-09,-1.8840855958712766e-11,8.0539030022919178e-07,1.4437052942017914e-10,-1.2567938226584752e-12,8.0399651380957948e-08,0.0,0.0,0.0,0.0,0.0,0.0,
                9.3771594222163968e-13,-1.1445482062111267e-10,1.1573884212134899e-12,8.0052032558342034e-08,7.6948723001096786e-13,1.4437048778681572e-10,1.0669142902486328e-08,4.4540360169629395e-14,1.1402033830987257e-11,0.0,0.0,0.0,0.0,0.0,0.0,
                1.151836959145669e-10,1.7317379084544338e-12,3.165662731952068e-10,3.474361206720622e-12,8.0451549422377866e-08,-1.2567934973978234e-12,4.4540363557761184e-14,1.0700685670883558e-08,-1.6334752560992483e-14,0.0,0.0,0.0,0.0,0.0,0.0,
                1.7183928975941787e-12,-3.168285633847745e-10,7.9272650726699978e-13,1.4369083700671581e-10,-2.7790251111610431e-13,8.0399644275530591e-08,1.1402034698348995e-11,-1.6334815241430579e-14,1.0696561858480891e-08,0.0,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.5217637673929971e-11,0.0,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.5217637673929971e-11,0.0,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,7.5217637673929971e-11,0.0,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.7999994952333509e-06,0.0,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.7999994952333509e-06,0.0,
                0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.7999994952333509e-06,
            ]),
            info: SMatrix::<f64, 15, 15>::zeros(),
            nga_walk: SMatrix::<f64, 6, 6>::zeros(),
            nga: SMatrix::<f64, 6, 6>::zeros(),
            b: frame.imu_data.imu_bias,
            bu: ImuBias::new(),
            measurements: vec![],
        });


        // Tracking data setup
        let tracked_mappoint_data: HashMap<i32, bool> = HashMap::from([
            (1, true),
            (2, true),
            (3, true),
            (4, true),
            (5, true),
            (6, true),
            (7, true),
            (11, true),
            (12, true),
            (15, true),
            (17, true),
            (18, true),
            (19, true),
            (20, true),
            (22, true),
            (25, true),
            (29, true),
            (30, true),
            (31, true),
            (32, true),
            (34, true),
            (38, true),
            (39, true),
            (42, false),
            (45, true),
            (46, true),
            (47, true),
            (48, true),
            (50, true),
            (54, true),
            (55, true),
            (60, true),
            (63, true),
            (64, true),
            (67, true),
            (68, false),
            (69, true),
            (72, true),
            (73, true),
            (74, true),
            (75, true),
            (76, true),
            (77, true),
            (83, true),
            (86, true),
            (87, true),
            (89, true),
            (90, true),
            (91, true),
            (94, true),
            (95, true),
            (96, true),
            (97, true),
            (98, true),
            (99, true),
            (101, true),
            (102, true),
            (103, true),
            (107, true),
            (108, true),
            (109, true),
            (116, true),
            (118, true),
            (120, true),
            (121, true),
            (122, true),
            (123, true),
            (124, true),
            (126, true),
            (129, true),
            (130, true),
            (133, true),
            (135, true),
            (137, true),
            (140, false),
            (145, true),
            (150, true),
            (156, true),
            (157, true),
            (159, true),
            (165, true),
            (166, true),
            (167, true),
            (168, true),
            (169, true),
            (171, true),
            (173, false),
            (179, true),
            (181, true),
            (183, true),
            (184, true),
            (185, true),
            (191, true),
            (192, true),
            (193, true),
            (195, true),
            (196, true),
            (197, true),
            (198, true),
            (199, true),
            (200, true),
            (201, true),
            (202, true),
            (203, true),
            (205, true),
            (209, false),
            (210, true),
            (211, true),
            (213, true),
            (220, true),
            (222, true),
            (223, false),
            (226, true),
            (227, true),
            (229, true),
            (230, true),
            (232, true),
            (236, true),
            (237, true),
            (238, true),
            (239, true),
            (240, true),
            (241, true),
            (246, true),
            (247, true),
            (250, true),
            (251, true),
            (253, true),
            (254, true),
            (257, true),
            (258, true),
            (260, true),
            (261, true),
            (262, true),
            (264, true),
            (267, true),
            (268, true),
            (269, true),
            (270, true),
            (271, true),
            (272, true),
            (274, true),
            (277, true),
            (282, true),
            (283, false),
            (287, true),
            (290, true),
            (293, true),
            (295, false),
            (297, false),
            (298, false),
            (301, true),
            (302, true),
            (305, true),
            (308, true),
            (309, true),
            (311, true),
            (314, true),
            (318, true),
            (330, true),
            (331, true),
            (332, true),
            (334, true),
            (335, true),
            (336, true),
            (337, true),
            (338, true),
            (339, true),
            (340, true),
            (344, true),
            (346, true),
            (347, true),
            (348, true),
            (351, true),
            (352, true),
            (353, true),
            (354, true),
            (357, true),
            (358, true),
            (359, true),
            (361, true),
            (365, true),
            (368, true),
            (369, true),
            (370, true),
            (375, true),
            (378, true),
            (379, true),
            (380, false),
            (381, true),
            (382, true),
            (383, false),
            (384, false),
            (385, false),
            (388, true),
            (389, true),
            (391, false),
            (395, true),
            (396, true),
            (397, true),
            (400, false),
            (401, true),
            (403, true),
            (404, true),
            (410, true),
            (411, true),
            (413, true),
            (416, true),
            (418, false),
            (419, false),
            (421, false),
            (422, true),
            (424, true),
            (432, false),
            (433, true),
            (434, true),
            (435, true),
            (439, true),
            (440, true),
            (445, true),
            (447, true),
            (450, true),
            (451, true),
            (453, true),
            (456, true),
            (458, true),
            (460, true),
            (461, true),
            (462, true),
            (464, true),
            (465, true),
            (468, true),
            (475, true),
            (484, true),
            (485, true),
            (486, true),
            (488, true),
            (489, true),
            (492, true),
            (494, true),
            (504, true),
            (506, true),
            (508, true),
            (510, true),
            (511, true),
            (513, true),
            (516, true),
            (517, true),
            (518, true),
            (519, true),
            (525, true),
            (527, true),
            (529, false),
            (533, false),
            (534, false),
            (541, true),
            (543, true),
            (550, true),
            (552, true),
            (553, true),
            (554, true),
            (556, true),
            (560, true),
            (561, false),
            (564, true),
            (565, true),
            (566, false),
            (567, true),
            (569, true),
            (572, true),
            (579, true),
            (580, true),
            (581, true),
            (582, true),
            (589, true),
            (593, true),
            (597, true),
            (598, true),
            (600, true),
            (603, true),
            (604, true),
            (605, true),
            (606, true),
            (607, true),
            (608, true),
            (612, true),
            (614, true),
            (615, true),
            (617, true),
            (620, true),
            (621, true),
            (622, true),
            (623, true),
            (625, true),
            (626, true),
            (634, true),
            (636, true),
            (637, true),
            (639, true),
            (643, true),
            (650, true),
            (651, true),
            (654, true),
            (655, true),
            (656, true),
            (662, false),
            (663, true),
            (666, true),
            (667, true),
            (671, false),
            (673, false),
            (674, false),
            (676, false),
            (678, false),
            (682, false),
            (683, false),
            (685, true),
            (688, true),
            (691, true),
            (695, true),
            (697, true),
            (698, true),
            (704, true),
            (707, false),
            (710, true),
            (711, true),
            (713, true),
            (714, true),
            (716, true),
            (722, true),
            (730, true),
            (731, true),
            (732, true),
            (733, true),
            (734, true),
            (739, true),
            (740, true),
            (744, true),
            (746, true),
            (747, true),
            (749, true),
            (750, true),
            (751, true),
            (752, true),
            (753, true),
            (756, true),
            (757, true),
            (761, true),
            (763, true),
            (764, true),
            (766, true),
            (768, true),
            (772, true),
            (773, true),
            (776, true),
            (780, true),
            (781, true),
            (782, true),
            (783, true),
            (785, true),
            (786, true),
            (790, true),
            (792, true),
            (794, true),
            (810, true),
            (812, true),
            (814, true),
            (815, true),
            (819, true),
            (826, true),
            (829, true),
            (836, true),
            (837, false),
            (840, false),
            (854, false),
            (858, true),
            (859, true),
            (861, true),
            (867, true),
            (872, true),
            (880, true),
            (881, false),
            (883, true),
            (887, true),
            (893, true),
            (897, true),
            (903, true),
            (908, true),
            (910, true),
            (922, true),
            (926, true),
            (927, true),
            (929, true),
            (938, true),
            (940, true),
            (941, true),
            (943, true),
            (946, true),
            (956, true),
            (957, true),
            (958, true),
            (960, true),
            (961, true),
            (964, true),
            (969, false),
            (970, false),
            (975, true),
            (977, true),
            (993, true),
            (996, true),
            (998, true),
            (1002, true),
            (1004, true),
            (1005, true),
        ]);

        // Keyframe setup
        let prev_kf_pose = Pose::new(
            Vector3::new(-1.0784724950790405,  2.1997668743133545, -1.0796719789505005),
            Matrix3::new(
            0.99468803405761719 , -0.098143257200717926 ,  0.031042018905282021,
            -0.0040115383453667164  , -0.33829832077026367 ,  -0.94103026390075684,
            0.10285725444555283  ,  0.93590700626373291 ,  -0.33689498901367188,
            )
        );
        let prev_kf_velocity = DVVector3::new_with(0.41050848364830017, 0.16874006390571594, 0.23941467702388763);
        let prev_kf_imu_bias = ImuBias {
            bwx: -0.0026990403421223164, bwy: 0.020717339590191841, bwz: 0.076764784753322601,
            bax: -0.018955998122692108, bay: 0.01000912394374609, baz: 0.089850954711437225,
        };
        let prev_kf_imu_pos = DVVector3::new_with(1.2567512989044189, 1.6418710947036743, 1.7640126943588257);
        let prev_kf_imu_rot = Matrix3::from_row_slice(&[
            0.019223213195800781,   0.99683278799057007,  0.077169768512248993,
            0.34067413210868835, -0.079095959663391113 ,  0.93684858083724976,
            0.93998503684997559, 0.0082803508266806602,  -0.34111571311950684
        ]);

        // Mappoint setup
        struct MapPointDummy {
            id: Id,
            position: DVVector3<f64>,
            kp: (f32, f32, f32)
        }
        let mappoints: Vec<MapPointDummy> = vec![
            MapPointDummy { id: 1, position: DVVector3::new_with(6.2806563377380371, 7.4259324073791504, -1.4635366201400757), kp: (521.9991455078125, 230.92111206054688, 0.077886529266834259) }, 
            MapPointDummy { id: 2, position: DVVector3::new_with(4.400179386138916, 6.3694963455200195, -2.0248770713806152), kp: (440.142822265625, 286.7685546875, 0.077886529266834259) }, 
            MapPointDummy { id: 3, position: DVVector3::new_with(6.516143798828125, 6.9072537422180176, -1.9582895040512085), kp: (546.06927490234375, 269.74960327148438, 0.077886529266834259) }, 
            MapPointDummy { id: 4, position: DVVector3::new_with(2.4979581832885742, 5.5226120948791504, 0.62985605001449585), kp: (308.16226196289062, 175.57261657714844, 0.077886529266834259) }, 
            MapPointDummy { id: 5, position: DVVector3::new_with(2.9652431011199951, 5.4399509429931641, -0.33360067009925842), kp: (393.34869384765625, 234.37727355957031, 0.077886529266834259) }, 
            MapPointDummy { id: 6, position: DVVector3::new_with(3.7695944309234619, 5.8707222938537598, -0.61605852842330933), kp: (356.13565063476562, 256.06399536132812, 0.077886529266834259) }, 
            MapPointDummy { id: 7, position: DVVector3::new_with(3.4559011459350586, 6.3058958053588867, -1.7461148500442505), kp: (391.4493408203125, 284.1522216796875, 0.077886529266834259) }, 
            MapPointDummy { id: 11, position: DVVector3::new_with(1.3902592658996582, 5.0384969711303711, 0.48363640904426575), kp: (265.104248046875, 189.92437744140625, 0.077886529266834259) }, 
            MapPointDummy { id: 12, position: DVVector3::new_with(1.1239510774612427, 4.3684196472167969, 0.32613691687583923), kp: (230.83222961425781, 282.87557983398438, 0.077886529266834259) }, 
            MapPointDummy { id: 15, position: DVVector3::new_with(0.29016155004501343, 3.4426336288452148, 0.80160629749298096), kp: (70.356269836425781, 242.78102111816406, 0.077886529266834259) }, 
            MapPointDummy { id: 17, position: DVVector3::new_with(-0.2595621645450592, 3.779961109161377, 1.1896785497665405), kp: (31.396919250488281, 91.279342651367188, 0.077886529266834259) }, 
            MapPointDummy { id: 18, position: DVVector3::new_with(0.32696422934532166, 4.2537531852722168, 1.6022112369537354), kp: (109.49420166015625, 84.787124633789062, 0.077886529266834259) }, 
            MapPointDummy { id: 19, position: DVVector3::new_with(0.13267636299133301, 4.1670584678649902, 1.1736928224563599), kp: (81.553794860839844, 147.486328125, 0.077886529266834259) }, 
            MapPointDummy { id: 20, position: DVVector3::new_with(0.41544497013092041, 4.3331575393676758, 1.2497453689575195), kp: (134.31452941894531, 129.64126586914062, 0.077886529266834259) }, 
            MapPointDummy { id: 22, position: DVVector3::new_with(0.79952424764633179, 4.3750653266906738, 1.6179757118225098), kp: (221.05743408203125, 139.09848022460938, 0.077886529266834259) }, 
            MapPointDummy { id: 25, position: DVVector3::new_with(0.79541677236557007, 4.6902108192443848, 1.6148712635040283), kp: (192.37608337402344, 77.567741394042969, 0.077886529266834259) }, 
            MapPointDummy { id: 29, position: DVVector3::new_with(1.8712804317474365, 5.1566524505615234, 1.2345104217529297), kp: (322.8486328125, 117.46946716308594, 0.077886529266834259) }, 
            MapPointDummy { id: 30, position: DVVector3::new_with(2.2238037586212158, 5.2435564994812012, 0.9240613579750061), kp: (351.79632568359375, 142.90589904785156, 0.077886529266834259) }, 
            MapPointDummy { id: 31, position: DVVector3::new_with(2.0302486419677734, 5.538550853729248, 0.59772187471389771), kp: (326.1695556640625, 164.77639770507812, 0.077886529266834259) }, 
            MapPointDummy { id: 32, position: DVVector3::new_with(1.9798258543014526, 5.1648478507995605, 0.79195666313171387), kp: (329.82791137695312, 153.94647216796875, 0.077886529266834259) }, 
            MapPointDummy { id: 34, position: DVVector3::new_with(1.4205805063247681, 5.7976889610290527, 1.565592885017395), kp: (286.47348022460938, 75.9114990234375, 0.077886529266834259) }, 
            MapPointDummy { id: 38, position: DVVector3::new_with(0.99014979600906372, 4.4738426208496094, 0.66114801168441772), kp: (225.06990051269531, 189.99406433105469, 0.077886529266834259) }, 
            MapPointDummy { id: 39, position: DVVector3::new_with(0.71992635726928711, 4.5188493728637695, 0.45444172620773315), kp: (194.94004821777344, 208.41390991210938, 0.077886529266834259) }, 
            MapPointDummy { id: 42, position: DVVector3::new_with(11.216087341308594, 12.651281356811523, -0.93590074777603149), kp: (510.774169921875, 171.05194091796875, 0.077886529266834259) }, 
            MapPointDummy { id: 45, position: DVVector3::new_with(1.5761884450912476, 5.7556467056274414, 0.78627461194992065), kp: (283.0323486328125, 143.17816162109375, 0.077886529266834259) }, 
            MapPointDummy { id: 46, position: DVVector3::new_with(1.2483036518096924, 4.9433107376098633, 0.78845697641372681), kp: (250.61831665039062, 161.14584350585938, 0.077886529266834259) }, 
            MapPointDummy { id: 47, position: DVVector3::new_with(-1.4402379989624023, 5.3638510704040527, 0.75877004861831665), kp: (47.537349700927734, 195.03485107421875, 0.077886529266834259) }, 
            MapPointDummy { id: 48, position: DVVector3::new_with(0.2000872790813446, 3.9260220527648926, 0.7776799201965332), kp: (91.318077087402344, 202.34146118164062, 0.077886529266834259) }, 
            MapPointDummy { id: 50, position: DVVector3::new_with(-1.0071916580200195, 4.9281144142150879, 0.86350643634796143), kp: (67.254661560058594, 210.72869873046875, 0.077886529266834259) }, 
            MapPointDummy { id: 54, position: DVVector3::new_with(2.2265112400054932, 6.3226704597473145, 1.6441713571548462), kp: (327.1654052734375, 71.729507446289062, 0.077886529266834259) }, 
            MapPointDummy { id: 55, position: DVVector3::new_with(1.7463204860687256, 5.3453445434570312, 1.2271105051040649), kp: (304.7080078125, 113.86820220947266, 0.077886529266834259) }, 
            MapPointDummy { id: 60, position: DVVector3::new_with(4.0452146530151367, 7.6440567970275879, 0.92894679307937622), kp: (421.46694946289062, 111.49833679199219, 0.077886529266834259) }, 
            MapPointDummy { id: 63, position: DVVector3::new_with(6.3589706420898438, 6.1845293045043945, -1.6969985961914062), kp: (571.838623046875, 277.73684692382812, 0.11215661466121674) }, 
            MapPointDummy { id: 64, position: DVVector3::new_with(1.9631222486495972, 5.422243595123291, 0.36485624313354492), kp: (319.540771484375, 185.1368408203125, 0.11215661466121674) }, 
            MapPointDummy { id: 67, position: DVVector3::new_with(5.0234279632568359, 9.4042415618896484, 1.5868294239044189), kp: (453.14886474609375, 51.1522216796875, 0.11215661466121674) }, 
            MapPointDummy { id: 68, position: DVVector3::new_with(13.826936721801758, 15.362061500549316, 2.5638387203216553), kp: (592.05950927734375, 50.815326690673828, 0.11215661466121674) }, 
            MapPointDummy { id: 69, position: DVVector3::new_with(2.0573773384094238, 5.6547460556030273, 1.632207989692688), kp: (332.69793701171875, 74.252517700195312, 0.11215661466121674) }, 
            MapPointDummy { id: 72, position: DVVector3::new_with(1.6527460813522339, 6.1763277053833008, -1.0825352668762207), kp: (283.53802490234375, 254.82077026367188, 0.11215661466121674) }, 
            MapPointDummy { id: 73, position: DVVector3::new_with(0.15919522941112518, 4.0504341125488281, 0.79330748319625854), kp: (159.05746459960938, 210.13029479980469, 0.11215661466121674) }, 
            MapPointDummy { id: 74, position: DVVector3::new_with(0.2033182829618454, 3.0881602764129639, 0.60164904594421387), kp: (56.799690246582031, 246.241455078125, 0.11215661466121674) }, 
            MapPointDummy { id: 75, position: DVVector3::new_with(-0.004136089701205492, 3.9094409942626953, 1.5571918487548828), kp: (22.674459457397461, 87.643630981445312, 0.11215661466121674) }, 
            MapPointDummy { id: 76, position: DVVector3::new_with(0.83288693428039551, 4.6058368682861328, 1.2307224273681641), kp: (200.66358947753906, 123.92973327636719, 0.11215661466121674) }, 
            MapPointDummy { id: 77, position: DVVector3::new_with(1.0024595260620117, 4.3238954544067383, 1.1475412845611572), kp: (219.776611328125, 136.63116455078125, 0.11215661466121674) }, 
            MapPointDummy { id: 83, position: DVVector3::new_with(1.9929143190383911, 5.5207509994506836, 1.2052744626998901), kp: (298.59976196289062, 173.18519592285156, 0.11215661466121674) }, 
            MapPointDummy { id: 86, position: DVVector3::new_with(1.8741879463195801, 5.0981945991516113, 0.65766346454620361), kp: (319.5482177734375, 170.18099975585938, 0.11215661466121674) }, 
            MapPointDummy { id: 87, position: DVVector3::new_with(2.0280187129974365, 5.4643359184265137, 0.64794832468032837), kp: (334.6251220703125, 161.14863586425781, 0.11215661466121674) }, 
            MapPointDummy { id: 89, position: DVVector3::new_with(-0.31605246663093567, 5.2848787307739258, 0.15398666262626648), kp: (91.253547668457031, 204.94607543945312, 0.11215661466121674) }, 
            MapPointDummy { id: 90, position: DVVector3::new_with(-0.40282860398292542, 4.5742373466491699, 0.45728588104248047), kp: (37.350387573242188, 212.88009643554688, 0.11215661466121674) }, 
            MapPointDummy { id: 91, position: DVVector3::new_with(0.071138881146907806, 3.6516542434692383, 0.56806463003158569), kp: (69.587539672851562, 242.14376831054688, 0.11215661466121674) }, 
            MapPointDummy { id: 94, position: DVVector3::new_with(0.81529486179351807, 4.6309924125671387, 1.6125558614730835), kp: (195.71000671386719, 79.032730102539062, 0.11215661466121674) }, 
            MapPointDummy { id: 95, position: DVVector3::new_with(1.0285483598709106, 4.8058257102966309, 1.5634121894836426), kp: (215.03242492675781, 79.772483825683594, 0.11215661466121674) }, 
            MapPointDummy { id: 96, position: DVVector3::new_with(0.82400083541870117, 4.6873078346252441, 0.72384238243103027), kp: (198.29377746582031, 182.160400390625, 0.11215661466121674) }, 
            MapPointDummy { id: 97, position: DVVector3::new_with(0.54553890228271484, 4.1205954551696777, 0.53340750932693481), kp: (220.13441467285156, 191.21530151367188, 0.11215661466121674) }, 
            MapPointDummy { id: 98, position: DVVector3::new_with(0.78069257736206055, 4.2318363189697266, 0.6019289493560791), kp: (194.9227294921875, 209.63986206054688, 0.11215661466121674) }, 
            MapPointDummy { id: 99, position: DVVector3::new_with(0.84287065267562866, 4.5987625122070312, 1.2344123125076294), kp: (137.77156066894531, 128.47418212890625, 0.11215661466121674) }, 
            MapPointDummy { id: 101, position: DVVector3::new_with(0.33375650644302368, 5.3661108016967773, 0.83117032051086426), kp: (155.5113525390625, 144.78948974609375, 0.11215661466121674) }, 
            MapPointDummy { id: 102, position: DVVector3::new_with(4.2303915023803711, 6.5523715019226074, 1.0702749490737915), kp: (469.52508544921875, 114.65183258056641, 0.11215661466121674) }, 
            MapPointDummy { id: 103, position: DVVector3::new_with(4.5999903678894043, 6.5504422187805176, 0.69964981079101562), kp: (494.57516479492188, 136.60765075683594, 0.11215661466121674) }, 
            MapPointDummy { id: 107, position: DVVector3::new_with(6.7196459770202637, 8.6144590377807617, -0.52907067537307739), kp: (513.169921875, 172.34889221191406, 0.11215661466121674) }, 
            MapPointDummy { id: 108, position: DVVector3::new_with(5.4394516944885254, 6.4288883209228516, 0.53820359706878662), kp: (575.19879150390625, 147.38090515136719, 0.11215661466121674) }, 
            MapPointDummy { id: 109, position: DVVector3::new_with(3.3115580081939697, 5.5180926322937012, -0.61052167415618896), kp: (420.63995361328125, 247.7586669921875, 0.11215661466121674) }, 
            MapPointDummy { id: 116, position: DVVector3::new_with(-0.18088552355766296, 6.2727036476135254, 1.9706254005432129), kp: (93.665512084960938, 47.391063690185547, 0.11215661466121674) }, 
            MapPointDummy { id: 118, position: DVVector3::new_with(0.20904846489429474, 4.1814389228820801, 1.2387665510177612), kp: (109.74779510498047, 87.532630920410156, 0.11215661466121674) }, 
            MapPointDummy { id: 120, position: DVVector3::new_with(-1.4304438829421997, 4.938809871673584, 0.62638425827026367), kp: (27.190004348754883, 130.5675048828125, 0.11215661466121674) }, 
            MapPointDummy { id: 121, position: DVVector3::new_with(0.19385339319705963, 4.1429448127746582, 1.2436292171478271), kp: (90.09271240234375, 129.96173095703125, 0.11215661466121674) }, 
            MapPointDummy { id: 122, position: DVVector3::new_with(-1.5012575387954712, 5.3904309272766113, 1.285896897315979), kp: (19.36590576171875, 154.60133361816406, 0.11215661466121674) }, 
            MapPointDummy { id: 123, position: DVVector3::new_with(0.1469866931438446, 4.0950193405151367, 1.1439032554626465), kp: (83.079475402832031, 146.2115478515625, 0.11215661466121674) }, 
            MapPointDummy { id: 124, position: DVVector3::new_with(4.484337329864502, 6.6311249732971191, 0.12449388951063156), kp: (467.41607666015625, 182.19638061523438, 0.11215661466121674) }, 
            MapPointDummy { id: 126, position: DVVector3::new_with(4.0420284271240234, 6.2641201019287109, -0.84243738651275635), kp: (443.9359130859375, 235.78605651855469, 0.11215661466121674) }, 
            MapPointDummy { id: 129, position: DVVector3::new_with(2.681412935256958, 5.223668098449707, 1.0532000064849854), kp: (400.29910278320312, 132.94235229492188, 0.11215661466121674) }, 
            MapPointDummy { id: 130, position: DVVector3::new_with(2.0045490264892578, 5.5799422264099121, 1.6462395191192627), kp: (365.17556762695312, 157.97047424316406, 0.11215661466121674) }, 
            MapPointDummy { id: 133, position: DVVector3::new_with(0.78300929069519043, 4.2959675788879395, 0.31381499767303467), kp: (244.34840393066406, 227.410400390625, 0.11215661466121674) }, 
            MapPointDummy { id: 135, position: DVVector3::new_with(3.8569402694702148, 5.6139230728149414, -1.7266875505447388), kp: (442.7020263671875, 309.02310180664062, 0.16150553524494171) }, 
            MapPointDummy { id: 137, position: DVVector3::new_with(1.9371967315673828, 5.3175578117370605, 0.38274624943733215), kp: (318.5419921875, 186.63169860839844, 0.16150553524494171) }, 
            MapPointDummy { id: 140, position: DVVector3::new_with(7.5651206970214844, 13.58475399017334, 2.2407617568969727), kp: (457.7994384765625, 53.117496490478516, 0.16150553524494171) }, 
            MapPointDummy { id: 145, position: DVVector3::new_with(1.3203080892562866, 5.1143283843994141, 1.1459206342697144), kp: (250.94999694824219, 136.4625244140625, 0.16150553524494171) }, 
            MapPointDummy { id: 150, position: DVVector3::new_with(0.85274755954742432, 4.5825562477111816, 1.2281535863876343), kp: (201.76411437988281, 125.51050567626953, 0.16150553524494171) }, 
            MapPointDummy { id: 156, position: DVVector3::new_with(0.068036384880542755, 3.5377850532531738, 0.56906652450561523), kp: (68.860809326171875, 242.74554443359375, 0.16150553524494171) }, 
            MapPointDummy { id: 157, position: DVVector3::new_with(1.7653388977050781, 5.3416905403137207, 1.2221790552139282), kp: (323.9005126953125, 113.54338836669922, 0.16150553524494171) }, 
            MapPointDummy { id: 159, position: DVVector3::new_with(1.9420034885406494, 5.3910675048828125, 0.54872828722000122), kp: (318.54623413085938, 171.67851257324219, 0.16150553524494171) }, 
            MapPointDummy { id: 165, position: DVVector3::new_with(-0.2497236430644989, 4.3321037292480469, 1.3544278144836426), kp: (26.596580505371094, 132.86167907714844, 0.16150553524494171) }, 
            MapPointDummy { id: 166, position: DVVector3::new_with(-0.05918140709400177, 3.8581452369689941, 0.95267486572265625), kp: (62.794784545898438, 131.60667419433594, 0.16150553524494171) }, 
            MapPointDummy { id: 167, position: DVVector3::new_with(-0.99889111518859863, 5.1407794952392578, 0.83552294969558716), kp: (24.3892822265625, 167.36335754394531, 0.16150553524494171) }, 
            MapPointDummy { id: 168, position: DVVector3::new_with(-0.26605165004730225, 4.8767213821411133, 1.0655075311660767), kp: (83.735549926757812, 146.2301025390625, 0.16150553524494171) }, 
            MapPointDummy { id: 169, position: DVVector3::new_with(0.17467276751995087, 3.9924888610839844, 1.2662409543991089), kp: (89.444480895996094, 129.93547058105469, 0.16150553524494171) }, 
            MapPointDummy { id: 171, position: DVVector3::new_with(0.15158714354038239, 4.2169537544250488, 1.2121351957321167), kp: (87.635086059570312, 170.82929992675781, 0.16150553524494171) }, 
            MapPointDummy { id: 173, position: DVVector3::new_with(6.5701155662536621, 10.938178062438965, 0.59969192743301392), kp: (470.58010864257812, 117.33876800537109, 0.16150553524494171) }, 
            MapPointDummy { id: 179, position: DVVector3::new_with(0.77829104661941528, 4.3251500129699707, 0.47161063551902771), kp: (191.60530090332031, 217.3662109375, 0.16150553524494171) }, 
            MapPointDummy { id: 181, position: DVVector3::new_with(1.2567503452301025, 4.980402946472168, 1.6707602739334106), kp: (283.34832763671875, 65.847152709960938, 0.16150553524494171) }, 
            MapPointDummy { id: 183, position: DVVector3::new_with(1.7659448385238647, 5.5546531677246094, 1.6231406927108765), kp: (291.08099365234375, 76.786628723144531, 0.16150553524494171) }, 
            MapPointDummy { id: 184, position: DVVector3::new_with(3.3679170608520508, 6.7393383979797363, 1.0920258760452271), kp: (372.81533813476562, 110.14041137695312, 0.16150553524494171) }, 
            MapPointDummy { id: 185, position: DVVector3::new_with(3.6227786540985107, 7.3824224472045898, 0.63210028409957886), kp: (401.3770751953125, 132.91889953613281, 0.16150553524494171) }, 
            MapPointDummy { id: 191, position: DVVector3::new_with(-0.29751434922218323, 7.2787199020385742, 2.0244567394256592), kp: (90.905853271484375, 46.487331390380859, 0.16150553524494171) }, 
            MapPointDummy { id: 192, position: DVVector3::new_with(0.40426769852638245, 5.3664827346801758, 1.4687507152557373), kp: (128.02105712890625, 38.100715637207031, 0.16150553524494171) }, 
            MapPointDummy { id: 193, position: DVVector3::new_with(0.19213387370109558, 4.1194090843200684, 1.2521243095397949), kp: (111.52590942382812, 86.5203857421875, 0.16150553524494171) }, 
            MapPointDummy { id: 195, position: DVVector3::new_with(-1.0996989011764526, 6.3972511291503906, 1.9158163070678711), kp: (11.93988037109375, 49.7913818359375, 0.16150553524494171) }, 
            MapPointDummy { id: 196, position: DVVector3::new_with(-1.1907656192779541, 6.6511111259460449, 1.9410351514816284), kp: (39.412540435791016, 53.075347900390625, 0.16150553524494171) }, 
            MapPointDummy { id: 197, position: DVVector3::new_with(-0.75534439086914062, 5.9458608627319336, 0.87344259023666382), kp: (22.378730773925781, 91.244743347167969, 0.16150553524494171) }, 
            MapPointDummy { id: 198, position: DVVector3::new_with(-0.03799651563167572, 3.9518289566040039, 1.532402515411377), kp: (72.991607666015625, 62.840229034423828, 0.16150553524494171) }, 
            MapPointDummy { id: 199, position: DVVector3::new_with(2.5618045330047607, 5.1262726783752441, -0.49887064099311829), kp: (372.9937744140625, 258.45086669921875, 0.16150553524494171) }, 
            MapPointDummy { id: 200, position: DVVector3::new_with(3.4669442176818848, 5.7984557151794434, -0.79039746522903442), kp: (418.48175048828125, 249.27865600585938, 0.16150553524494171) }, 
            MapPointDummy { id: 201, position: DVVector3::new_with(2.972569465637207, 5.3744707107543945, -1.071346640586853), kp: (389.99246215820312, 283.21157836914062, 0.16150553524494171) }, 
            MapPointDummy { id: 202, position: DVVector3::new_with(3.3702483177185059, 5.2617073059082031, -1.4126864671707153), kp: (425.0609130859375, 307.69937133789062, 0.16150553524494171) }, 
            MapPointDummy { id: 203, position: DVVector3::new_with(1.7043094635009766, 5.1858038902282715, 1.6982963085174561), kp: (332.30996704101562, 68.237113952636719, 0.16150553524494171) }, 
            MapPointDummy { id: 205, position: DVVector3::new_with(2.0546720027923584, 5.616154670715332, 1.599056601524353), kp: (332.080810546875, 79.147666931152344, 0.16150553524494171) }, 
            MapPointDummy { id: 209, position: DVVector3::new_with(10.377615928649902, 11.140708923339844, -0.20284342765808105), kp: (576.5670166015625, 137.95529174804688, 0.16150553524494171) }, 
            MapPointDummy { id: 210, position: DVVector3::new_with(1.2479516267776489, 4.8483748435974121, 0.53124374151229858), kp: (253.67414855957031, 189.1390380859375, 0.16150553524494171) }, 
            MapPointDummy { id: 211, position: DVVector3::new_with(1.3813825845718384, 4.8222169876098633, 0.56144511699676514), kp: (271.20343017578125, 186.62973022460938, 0.16150553524494171) }, 
            MapPointDummy { id: 213, position: DVVector3::new_with(-0.26018768548965454, 3.4130830764770508, 0.64103919267654419), kp: (15.681125640869141, 291.14410400390625, 0.16150553524494171) }, 
            MapPointDummy { id: 220, position: DVVector3::new_with(0.53793233633041382, 4.4542932510375977, 0.298807293176651), kp: (158.805908203125, 220.55674743652344, 0.16150553524494171) }, 
            MapPointDummy { id: 222, position: DVVector3::new_with(2.7508447170257568, 5.5301785469055176, -1.5053995847702026), kp: (366.38131713867188, 304.47442626953125, 0.23256798088550568) }, 
            MapPointDummy { id: 223, position: DVVector3::new_with(7.2631583213806152, 12.938680648803711, 2.1822474002838135), kp: (456.31564331054688, 52.75311279296875, 0.23256798088550568) }, 
            MapPointDummy { id: 226, position: DVVector3::new_with(0.95516401529312134, 4.5795555114746094, 1.5653330087661743), kp: (192.12065124511719, 129.19071960449219, 0.23256798088550568) }, 
            MapPointDummy { id: 227, position: DVVector3::new_with(0.87012571096420288, 4.6341147422790527, 1.1995213031768799), kp: (202.95681762695312, 120.77574920654297, 0.23256798088550568) }, 
            MapPointDummy { id: 229, position: DVVector3::new_with(1.3092433214187622, 4.9764494895935059, 1.1577136516571045), kp: (227.37188720703125, 153.13531494140625, 0.23256798088550568) }, 
            MapPointDummy { id: 230, position: DVVector3::new_with(1.9183974266052246, 5.2874221801757812, 1.2382724285125732), kp: (323.90509033203125, 113.11286163330078, 0.23256798088550568) }, 
            MapPointDummy { id: 232, position: DVVector3::new_with(1.9466544389724731, 5.3820881843566895, 0.54885923862457275), kp: (319.37890625, 172.09324645996094, 0.23256798088550568) }, 
            MapPointDummy { id: 236, position: DVVector3::new_with(1.2623740434646606, 4.9278717041015625, 0.82018119096755981), kp: (248.55844116210938, 153.27372741699219, 0.23256798088550568) }, 
            MapPointDummy { id: 237, position: DVVector3::new_with(1.5820236206054688, 5.9575047492980957, 0.71495705842971802), kp: (284.05172729492188, 145.02424621582031, 0.23256798088550568) }, 
            MapPointDummy { id: 238, position: DVVector3::new_with(0.026325739920139313, 3.745335578918457, 0.54909718036651611), kp: (28.166484832763672, 196.91654968261719, 0.23256798088550568) }, 
            MapPointDummy { id: 239, position: DVVector3::new_with(-0.029537828639149666, 3.7724089622497559, 0.77676534652709961), kp: (52.179374694824219, 210.59010314941406, 0.23256798088550568) }, 
            MapPointDummy { id: 240, position: DVVector3::new_with(0.24710319936275482, 3.1289479732513428, 0.95463621616363525), kp: (-6.0138344764709473, 222.12388610839844, 0.23256798088550568) }, 
            MapPointDummy { id: 241, position: DVVector3::new_with(0.34428071975708008, 3.6427643299102783, 0.746734619140625), kp: (67.717536926269531, 242.80496215820312, 0.23256798088550568) }, 
            MapPointDummy { id: 246, position: DVVector3::new_with(5.3662834167480469, 7.4132461547851562, -0.31966277956962585), kp: (476.9295654296875, 200.35111999511719, 0.23256798088550568) }, 
            MapPointDummy { id: 247, position: DVVector3::new_with(6.2084074020385742, 8.008056640625, -0.43703010678291321), kp: (511.451171875, 178.02426147460938, 0.23256798088550568) }, 
            MapPointDummy { id: 250, position: DVVector3::new_with(2.8833622932434082, 6.2268061637878418, 0.97794687747955322), kp: (383.80419921875, 125.08829498291016, 0.23256798088550568) }, 
            MapPointDummy { id: 251, position: DVVector3::new_with(2.749692440032959, 5.220637321472168, 1.0505962371826172), kp: (403.6160888671875, 133.30238342285156, 0.23256798088550568) }, 
            MapPointDummy { id: 253, position: DVVector3::new_with(0.73839735984802246, 4.3694891929626465, 0.53443711996078491), kp: (188.17292785644531, 210.14756774902344, 0.23256798088550568) }, 
            MapPointDummy { id: 254, position: DVVector3::new_with(0.96284645795822144, 4.5651240348815918, 0.59170395135879517), kp: (218.91494750976562, 195.08291625976562, 0.23256798088550568) }, 
            MapPointDummy { id: 257, position: DVVector3::new_with(0.42028900980949402, 4.1119108200073242, 1.277560830116272), kp: (146.12872314453125, 130.16041564941406, 0.23256798088550568) }, 
            MapPointDummy { id: 258, position: DVVector3::new_with(0.14761009812355042, 4.1410818099975586, 1.1141128540039062), kp: (83.363121032714844, 150.78631591796875, 0.23256798088550568) }, 
            MapPointDummy { id: 260, position: DVVector3::new_with(-1.4377213716506958, 6.3887100219726562, 1.6568795442581177), kp: (-13.242271423339844, 38.98333740234375, 0.23256798088550568) }, 
            MapPointDummy { id: 261, position: DVVector3::new_with(-1.6959429979324341, 7.7378120422363281, 1.9809252023696899), kp: (48.669284820556641, 38.946796417236328, 0.23256798088550568) }, 
            MapPointDummy { id: 262, position: DVVector3::new_with(-1.5486693382263184, 5.4823379516601562, 1.2915380001068115), kp: (10.05449104309082, 73.769462585449219, 0.23256798088550568) }, 
            MapPointDummy { id: 264, position: DVVector3::new_with(2.4912395477294922, 4.9652962684631348, -1.0683790445327759), kp: (390.06182861328125, 284.5872802734375, 0.23256798088550568) }, 
            MapPointDummy { id: 267, position: DVVector3::new_with(4.0947561264038086, 5.9002089500427246, -1.9821873903274536), kp: (443.46124267578125, 306.645263671875, 0.23256798088550568) }, 
            MapPointDummy { id: 268, position: DVVector3::new_with(-0.01962706632912159, 3.5911509990692139, 1.6648097038269043), kp: (25.814163208007812, 93.035774230957031, 0.23256798088550568) }, 
            MapPointDummy { id: 269, position: DVVector3::new_with(-0.1149684339761734, 4.2740182876586914, 1.213714599609375), kp: (62.794784545898438, 131.60667419433594, 0.23256798088550568) }, 
            MapPointDummy { id: 270, position: DVVector3::new_with(-0.52398717403411865, 4.066044807434082, 0.66489475965499878), kp: (25.046564102172852, 168.32719421386719, 0.23256798088550568) }, 
            MapPointDummy { id: 271, position: DVVector3::new_with(0.20150823891162872, 3.9149379730224609, 0.84195023775100708), kp: (52.424991607666016, 159.32511901855469, 0.23256798088550568) }, 
            MapPointDummy { id: 272, position: DVVector3::new_with(3.0777595043182373, 5.4690017700195312, 1.0816174745559692), kp: (471.0634765625, 117.77243041992188, 0.23256798088550568) }, 
            MapPointDummy { id: 274, position: DVVector3::new_with(3.3895235061645508, 5.7175297737121582, -0.18946157395839691), kp: (469.19589233398438, 169.286865234375, 0.23256798088550568) }, 
            MapPointDummy { id: 277, position: DVVector3::new_with(-0.58438599109649658, 7.5155248641967773, 2.3052291870117188), kp: (124.41559600830078, 21.727951049804688, 0.23256798088550568) }, 
            MapPointDummy { id: 282, position: DVVector3::new_with(6.6694917678833008, 8.2179450988769531, 0.02213035523891449), kp: (531.94024658203125, 154.69338989257812, 0.23256798088550568) }, 
            MapPointDummy { id: 283, position: DVVector3::new_with(13.053236961364746, 13.048134803771973, -0.67850422859191895), kp: (600.40277099609375, 140.44638061523438, 0.23256798088550568) }, 
            MapPointDummy { id: 287, position: DVVector3::new_with(1.2603455781936646, 4.9359526634216309, 1.5834800004959106), kp: (275.308349609375, 78.067863464355469, 0.23256798088550568) }, 
            MapPointDummy { id: 290, position: DVVector3::new_with(2.0290400981903076, 5.5532040596008301, 1.6893428564071655), kp: (333.16494750976562, 68.678779602050781, 0.23256798088550568) }, 
            MapPointDummy { id: 293, position: DVVector3::new_with(4.6231474876403809, 4.3742351531982422, -1.1692743301391602), kp: (578.90765380859375, 334.93414306640625, 0.23256798088550568) }, 
            MapPointDummy { id: 295, position: DVVector3::new_with(9.9905195236206055, 12.764236450195312, 3.3982710838317871), kp: (558.2982177734375, 17.048038482666016, 0.23256798088550568) }, 
            MapPointDummy { id: 297, position: DVVector3::new_with(8.5342845916748047, 11.517765998840332, 2.3383529186248779), kp: (533.2349853515625, 52.536430358886719, 0.23256798088550568) }, 
            MapPointDummy { id: 298, position: DVVector3::new_with(10.85762882232666, 12.025099754333496, 2.3039350509643555), kp: (594.367919921875, 53.233066558837891, 0.23256798088550568) }, 
            MapPointDummy { id: 301, position: DVVector3::new_with(1.1404482126235962, 5.2213716506958008, -0.082632206380367279), kp: (244.18963623046875, 226.48028564453125, 0.23256798088550568) }, 
            MapPointDummy { id: 302, position: DVVector3::new_with(7.4714255332946777, 7.9448719024658203, -0.89546060562133789), kp: (565.53253173828125, 199.42770385742188, 0.23256798088550568) }, 
            MapPointDummy { id: 305, position: DVVector3::new_with(3.9941396713256836, 10.228446006774902, 2.2929129600524902), kp: (380.80435180664062, 41.001319885253906, 0.23256798088550568) }, 
            MapPointDummy { id: 308, position: DVVector3::new_with(5.0696139335632324, 9.4735307693481445, 1.5842850208282471), kp: (437.0396728515625, 73.471443176269531, 0.23256798088550568) }, 
            MapPointDummy { id: 309, position: DVVector3::new_with(0.19672258198261261, 3.153209924697876, 0.62780988216400146), kp: (16.346593856811523, 291.07577514648438, 0.23256798088550568) }, 
            MapPointDummy { id: 311, position: DVVector3::new_with(0.13624049723148346, 2.8905439376831055, 0.63511753082275391), kp: (-16.156803131103516, 338.226318359375, 0.23256798088550568) }, 
            MapPointDummy { id: 314, position: DVVector3::new_with(2.962604284286499, 5.3946704864501953, -1.093382716178894), kp: (394.77346801757812, 233.71681213378906, 0.23256798088550568) }, 
            MapPointDummy { id: 318, position: DVVector3::new_with(4.1494240760803223, 5.8778080940246582, -1.7282055616378784), kp: (452.54739379882812, 297.66781616210938, 0.23256798088550568) }, 
            MapPointDummy { id: 330, position: DVVector3::new_with(1.6027485132217407, 5.8116292953491211, 1.2256639003753662), kp: (293.76187133789062, 150.25967407226562, 0.33489790558815002) }, 
            MapPointDummy { id: 331, position: DVVector3::new_with(0.81506049633026123, 4.3624725341796875, 1.4558643102645874), kp: (183.87699890136719, 98.5574951171875, 0.33489790558815002) }, 
            MapPointDummy { id: 332, position: DVVector3::new_with(0.80956441164016724, 4.6047701835632324, 1.2120476961135864), kp: (205.3941650390625, 130.18022155761719, 0.33489790558815002) }, 
            MapPointDummy { id: 334, position: DVVector3::new_with(0.79160594940185547, 4.8029270172119141, 0.84969353675842285), kp: (200.40473937988281, 158.53996276855469, 0.33489790558815002) }, 
            MapPointDummy { id: 335, position: DVVector3::new_with(-1.9140191078186035, 5.3212518692016602, -0.19264034926891327), kp: (-16.950290679931641, 208.39152526855469, 0.33489790558815002) }, 
            MapPointDummy { id: 336, position: DVVector3::new_with(-0.015225288458168507, 3.94710373878479, 0.72245526313781738), kp: (53.165401458740234, 210.56466674804688, 0.33489790558815002) }, 
            MapPointDummy { id: 337, position: DVVector3::new_with(-0.38034197688102722, 4.0521044731140137, 0.6804996132850647), kp: (-6.0414495468139648, 222.53849792480469, 0.33489790558815002) }, 
            MapPointDummy { id: 338, position: DVVector3::new_with(0.13809780776500702, 3.5457100868225098, 0.93674379587173462), kp: (65.774101257324219, 243.29977416992188, 0.33489790558815002) }, 
            MapPointDummy { id: 339, position: DVVector3::new_with(1.7441661357879639, 5.4248247146606445, 1.1084825992584229), kp: (323.55325317382812, 113.11601257324219, 0.33489790558815002) }, 
            MapPointDummy { id: 340, position: DVVector3::new_with(1.8673785924911499, 3.9527175426483154, 1.2660576105117798), kp: (367.58892822265625, 135.74604797363281, 0.33489790558815002) }, 
            MapPointDummy { id: 344, position: DVVector3::new_with(0.79531383514404297, 4.5017199516296387, 1.5916155576705933), kp: (190.6219482421875, 81.891189575195312, 0.33489790558815002) }, 
            MapPointDummy { id: 346, position: DVVector3::new_with(-1.7487401962280273, 6.2548766136169434, 2.2366459369659424), kp: (-23.836599349975586, 8.3030538558959961, 0.33489790558815002) }, 
            MapPointDummy { id: 347, position: DVVector3::new_with(-1.1582909822463989, 6.5711631774902344, 1.944987416267395), kp: (47.8328857421875, 37.069385528564453, 0.33489790558815002) }, 
            MapPointDummy { id: 348, position: DVVector3::new_with(-1.4765874147415161, 6.4288291931152344, 1.781602144241333), kp: (-14.153538703918457, 40.241226196289062, 0.33489790558815002) }, 
            MapPointDummy { id: 351, position: DVVector3::new_with(3.8168413639068604, 5.9802699089050293, -0.6688988208770752), kp: (453.34713745117188, 232.79231262207031, 0.33489790558815002) }, 
            MapPointDummy { id: 352, position: DVVector3::new_with(7.2759242057800293, 8.5913257598876953, -2.0976207256317139), kp: (519.22528076171875, 233.45974731445312, 0.33489790558815002) }, 
            MapPointDummy { id: 353, position: DVVector3::new_with(2.8727660179138184, 5.2187442779541016, -0.96273994445800781), kp: (389.684814453125, 284.57119750976562, 0.33489790558815002) }, 
            MapPointDummy { id: 354, position: DVVector3::new_with(3.4161136150360107, 5.7816104888916016, -1.2798032760620117), kp: (410.355712890625, 279.78872680664062, 0.33489790558815002) }, 
            MapPointDummy { id: 357, position: DVVector3::new_with(-0.26370498538017273, 3.7136001586914062, 1.2216508388519287), kp: (-5.5407638549804688, 113.30094909667969, 0.33489790558815002) }, 
            MapPointDummy { id: 358, position: DVVector3::new_with(-0.086999945342540741, 3.7396156787872314, 1.4393092393875122), kp: (22.521186828613281, 92.345283508300781, 0.33489790558815002) }, 
            MapPointDummy { id: 359, position: DVVector3::new_with(-0.97185516357421875, 5.1602630615234375, 0.841236412525177), kp: (25.561006546020508, 167.53790283203125, 0.33489790558815002) }, 
            MapPointDummy { id: 361, position: DVVector3::new_with(-1.1510595083236694, 6.5298309326171875, 1.9356434345245361), kp: (73.002922058105469, 40.173404693603516, 0.33489790558815002) }, 
            MapPointDummy { id: 365, position: DVVector3::new_with(2.7893145084381104, 5.259617805480957, 1.0419243574142456), kp: (404.31845092773438, 135.08985900878906, 0.33489790558815002) }, 
            MapPointDummy { id: 368, position: DVVector3::new_with(0.72594171762466431, 4.3875675201416016, 0.5225556492805481), kp: (187.43550109863281, 209.80088806152344, 0.33489790558815002) }, 
            MapPointDummy { id: 369, position: DVVector3::new_with(0.74501872062683105, 4.3584470748901367, 1.0287197828292847), kp: (220.33444213867188, 197.17718505859375, 0.33489790558815002) }, 
            MapPointDummy { id: 370, position: DVVector3::new_with(0.80408453941345215, 4.2346005439758301, 0.34232017397880554), kp: (192.83821105957031, 218.63104248046875, 0.33489790558815002) }, 
            MapPointDummy { id: 375, position: DVVector3::new_with(0.17954385280609131, 4.0983057022094727, 1.2517749071121216), kp: (87.3935546875, 130.31204223632812, 0.33489790558815002) }, 
            MapPointDummy { id: 378, position: DVVector3::new_with(-0.034907720983028412, 5.4358744621276855, 0.6728205680847168), kp: (155.16024780273438, 156.23843383789062, 0.33489790558815002) }, 
            MapPointDummy { id: 379, position: DVVector3::new_with(3.2674164772033691, 5.6649050712585449, 1.0525107383728027), kp: (472.86663818359375, 116.16924285888672, 0.33489790558815002) }, 
            MapPointDummy { id: 380, position: DVVector3::new_with(9.0861377716064453, 10.378013610839844, -0.33604958653450012), kp: (523.88995361328125, 131.18801879882812, 0.33489790558815002) }, 
            MapPointDummy { id: 381, position: DVVector3::new_with(5.0258932113647461, 7.0984034538269043, -0.10632558166980743), kp: (479.45962524414062, 164.73863220214844, 0.33489790558815002) }, 
            MapPointDummy { id: 382, position: DVVector3::new_with(4.0938005447387695, 6.2962098121643066, 1.1002925634384155), kp: (511.486328125, 141.35542297363281, 0.33489790558815002) }, 
            MapPointDummy { id: 383, position: DVVector3::new_with(10.002185821533203, 12.661174774169922, 3.3713734149932861), kp: (557.39630126953125, 16.252141952514648, 0.33489790558815002) }, 
            MapPointDummy { id: 384, position: DVVector3::new_with(10.813590049743652, 10.837854385375977, 3.9800465106964111), kp: (650.03369140625, -14.840481758117676, 0.33489790558815002) }, 
            MapPointDummy { id: 385, position: DVVector3::new_with(10.23265552520752, 12.049763679504395, 2.3171849250793457), kp: (574.7586669921875, 52.468612670898438, 0.33489790558815002) }, 
            MapPointDummy { id: 388, position: DVVector3::new_with(1.5374438762664795, 8.7971372604370117, 2.3557538986206055), kp: (271.7947998046875, 27.36829948425293, 0.33489790558815002) }, 
            MapPointDummy { id: 389, position: DVVector3::new_with(1.2630993127822876, 4.868034839630127, 1.575211763381958), kp: (236.91334533691406, 89.032546997070312, 0.33489790558815002) }, 
            MapPointDummy { id: 391, position: DVVector3::new_with(11.096390724182129, 13.384634017944336, -0.080238699913024902), kp: (544.32440185546875, 122.28643035888672, 0.33489790558815002) }, 
            MapPointDummy { id: 395, position: DVVector3::new_with(0.20136791467666626, 3.140186071395874, 0.63213950395584106), kp: (16.694063186645508, 292.33282470703125, 0.33489790558815002) }, 
            MapPointDummy { id: 396, position: DVVector3::new_with(0.039589483290910721, 3.8599936962127686, 0.51318401098251343), kp: (67.968032836914062, 271.02517700195312, 0.33489790558815002) }, 
            MapPointDummy { id: 397, position: DVVector3::new_with(0.25760558247566223, 2.8662400245666504, 0.64438152313232422), kp: (-14.566091537475586, 338.93911743164062, 0.33489790558815002) }, 
            MapPointDummy { id: 400, position: DVVector3::new_with(6.5554490089416504, 13.056625366210938, 3.1162753105163574), kp: (437.712890625, 20.313411712646484, 0.33489790558815002) }, 
            MapPointDummy { id: 401, position: DVVector3::new_with(4.4690823554992676, 10.051868438720703, 1.747178316116333), kp: (401.89096069335938, 64.199676513671875, 0.33489790558815002) }, 
            MapPointDummy { id: 403, position: DVVector3::new_with(1.2606469392776489, 4.8584017753601074, 0.52761155366897583), kp: (253.8819580078125, 190.11007690429688, 0.33489790558815002) }, 
            MapPointDummy { id: 404, position: DVVector3::new_with(1.3880969285964966, 4.9087166786193848, 0.5426785945892334), kp: (269.53900146484375, 186.63056945800781, 0.33489790558815002) }, 
            MapPointDummy { id: 410, position: DVVector3::new_with(3.3684322834014893, 5.6397762298583984, -0.70440739393234253), kp: (418.44082641601562, 250.09046936035156, 0.33489790558815002) }, 
            MapPointDummy { id: 411, position: DVVector3::new_with(0.14177185297012329, 3.6104881763458252, 0.85544079542160034), kp: (95.155410766601562, 207.68643188476562, 0.33489790558815002) }, 
            MapPointDummy { id: 413, position: DVVector3::new_with(-0.034117966890335083, 3.9622802734375, 0.70826011896133423), kp: (74.635208129882812, 250.67271423339844, 0.33489790558815002) }, 
            MapPointDummy { id: 416, position: DVVector3::new_with(2.032961368560791, 5.5241909027099609, 1.7007735967636108), kp: (333.1649169921875, 68.67877197265625, 0.33489790558815002) }, 
            MapPointDummy { id: 418, position: DVVector3::new_with(6.9203672409057617, 12.844635009765625, 3.1580862998962402), kp: (452.6595458984375, 18.766273498535156, 0.33489790558815002) }, 
            MapPointDummy { id: 419, position: DVVector3::new_with(11.138278007507324, 16.799324035644531, 4.2656793594360352), kp: (501.35052490234375, 8.2253437042236328, 0.33489790558815002) }, 
            MapPointDummy { id: 421, position: DVVector3::new_with(7.9870729446411133, 10.804988861083984, 2.1421458721160889), kp: (529.783935546875, 55.499958038330078, 0.33489790558815002) }, 
            MapPointDummy { id: 422, position: DVVector3::new_with(4.3707523345947266, 6.0557389259338379, -0.92335653305053711), kp: (450.93658447265625, 262.78134155273438, 0.33489790558815002) }, 
            MapPointDummy { id: 424, position: DVVector3::new_with(4.2295317649841309, 5.9395847320556641, -1.8092166185379028), kp: (453.8482666015625, 298.16921997070312, 0.33489790558815002) }, 
            MapPointDummy { id: 432, position: DVVector3::new_with(7.9814186096191406, 8.924220085144043, -2.0051696300506592), kp: (538.040771484375, 222.47254943847656, 0.33489790558815002) }, 
            MapPointDummy { id: 433, position: DVVector3::new_with(2.4086310863494873, 5.119135856628418, -0.59885543584823608), kp: (355.88958740234375, 266.62136840820312, 0.33489790558815002) }, 
            MapPointDummy { id: 434, position: DVVector3::new_with(1.8300845623016357, 5.7514739036560059, -1.4049423933029175), kp: (304.56781005859375, 305.3939208984375, 0.33489790558815002) }, 
            MapPointDummy { id: 435, position: DVVector3::new_with(2.4969806671142578, 5.549532413482666, -1.4108264446258545), kp: (366.39889526367188, 304.86700439453125, 0.33489790558815002) }, 
            MapPointDummy { id: 439, position: DVVector3::new_with(1.9527729749679565, 5.3533782958984375, 0.36850032210350037), kp: (317.98672485351562, 186.63137817382812, 0.33489790558815002) }, 
            MapPointDummy { id: 440, position: DVVector3::new_with(2.0586023330688477, 6.0514388084411621, -0.46279916167259216), kp: (314.61297607421875, 223.13832092285156, 0.33489790558815002) }, 
            MapPointDummy { id: 445, position: DVVector3::new_with(0.3569951057434082, 8.3406038284301758, 2.1214632987976074), kp: (221.96479797363281, 34.072795867919922, 0.33489790558815002) }, 
            MapPointDummy { id: 447, position: DVVector3::new_with(0.57074588537216187, 8.0383186340332031, 2.130871057510376), kp: (217.24195861816406, 52.024059295654297, 0.33489790558815002) }, 
            MapPointDummy { id: 450, position: DVVector3::new_with(1.20296311378479, 5.1475448608398438, 1.1832551956176758), kp: (246.47946166992188, 121.89015960693359, 0.33489790558815002) }, 
            MapPointDummy { id: 451, position: DVVector3::new_with(1.0294268131256104, 4.7499680519104004, 0.75617188215255737), kp: (251.9300537109375, 136.11802673339844, 0.33489790558815002) }, 
            MapPointDummy { id: 453, position: DVVector3::new_with(5.4361796379089355, 7.7773575782775879, -0.61481761932373047), kp: (477.21975708007812, 190.70938110351562, 0.33489790558815002) }, 
            MapPointDummy { id: 456, position: DVVector3::new_with(-0.44040235877037048, 5.5541749000549316, 0.93005847930908203), kp: (87.052818298339844, 130.93719482421875, 0.48225307464599609) }, 
            MapPointDummy { id: 458, position: DVVector3::new_with(0.20137239992618561, 4.0037431716918945, 1.1446743011474609), kp: (86.054412841796875, 149.966796875, 0.48225307464599609) }, 
            MapPointDummy { id: 460, position: DVVector3::new_with(-1.5489648580551147, 5.4742488861083984, 1.3010927438735962), kp: (-31.883977890014648, 99.995979309082031, 0.48225307464599609) }, 
            MapPointDummy { id: 461, position: DVVector3::new_with(-0.094639889895915985, 3.77227783203125, 1.4303239583969116), kp: (24.502685546875, 93.901199340820312, 0.48225307464599609) }, 
            MapPointDummy { id: 462, position: DVVector3::new_with(-0.35055923461914062, 3.9522635936737061, 1.1110825538635254), kp: (13.865008354187012, 152.94584655761719, 0.48225307464599609) }, 
            MapPointDummy { id: 464, position: DVVector3::new_with(-1.1558798551559448, 6.9551868438720703, 2.3626248836517334), kp: (56.897518157958984, 4.5553698539733887, 0.48225307464599609) }, 
            MapPointDummy { id: 465, position: DVVector3::new_with(-0.39661973714828491, 7.2956728935241699, 2.3642053604125977), kp: (131.31900024414062, 10.786114692687988, 0.48225307464599609) }, 
            MapPointDummy { id: 468, position: DVVector3::new_with(-1.8007829189300537, 6.3491449356079102, 2.2477450370788574), kp: (-31.998798370361328, 4.6507325172424316, 0.48225307464599609) }, 
            MapPointDummy { id: 475, position: DVVector3::new_with(1.5499966144561768, 8.7046976089477539, 2.3313381671905518), kp: (273.95782470703125, 28.775957107543945, 0.48225307464599609) }, 
            MapPointDummy { id: 484, position: DVVector3::new_with(0.1585422158241272, 2.840634822845459, 0.64462500810623169), kp: (-46.82867431640625, 334.34188842773438, 0.48225307464599609) }, 
            MapPointDummy { id: 485, position: DVVector3::new_with(0.40473583340644836, 2.9517366886138916, 0.65266722440719604), kp: (38.066104888916016, 323.01025390625, 0.48225307464599609) }, 
            MapPointDummy { id: 486, position: DVVector3::new_with(0.1376892626285553, 4.1884865760803223, 0.63767141103744507), kp: (95.514656066894531, 207.99247741699219, 0.48225307464599609) }, 
            MapPointDummy { id: 488, position: DVVector3::new_with(0.43638882040977478, 2.9822142124176025, 1.0449347496032715), kp: (71.576736450195312, 258.76095581054688, 0.48225307464599609) }, 
            MapPointDummy { id: 489, position: DVVector3::new_with(-0.10800346732139587, 3.6312181949615479, 0.63311183452606201), kp: (-19.731655120849609, 214.37416076660156, 0.48225307464599609) }, 
            MapPointDummy { id: 492, position: DVVector3::new_with(0.32438138127326965, 3.1160528659820557, 0.97821307182312012), kp: (46.124282836914062, 248.71693420410156, 0.48225307464599609) }, 
            MapPointDummy { id: 494, position: DVVector3::new_with(1.6697735786437988, 6.2024054527282715, -1.1085108518600464), kp: (285.0113525390625, 254.43254089355469, 0.48225307464599609) }, 
            MapPointDummy { id: 504, position: DVVector3::new_with(0.72058457136154175, 4.4063749313354492, 0.51778650283813477), kp: (187.44010925292969, 209.50424194335938, 0.48225307464599609) }, 
            MapPointDummy { id: 506, position: DVVector3::new_with(0.53437161445617676, 4.5291299819946289, 0.25872620940208435), kp: (168.11825561523438, 229.318359375, 0.48225307464599609) }, 
            MapPointDummy { id: 508, position: DVVector3::new_with(3.330711841583252, 5.7532162666320801, 1.0340750217437744), kp: (432.75799560546875, 127.06842041015625, 0.48225307464599609) }, 
            MapPointDummy { id: 510, position: DVVector3::new_with(2.1311318874359131, 5.6764802932739258, 1.2294952869415283), kp: (336.26922607421875, 108.17275238037109, 0.48225307464599609) }, 
            MapPointDummy { id: 511, position: DVVector3::new_with(2.0169589519500732, 5.4813714027404785, 0.73215347528457642), kp: (328.461669921875, 158.30799865722656, 0.48225307464599609) }, 
            MapPointDummy { id: 513, position: DVVector3::new_with(4.0947837829589844, 10.518074035644531, 2.3411452770233154), kp: (381.4351806640625, 40.016632080078125, 0.48225307464599609) }, 
            MapPointDummy { id: 516, position: DVVector3::new_with(5.0630550384521484, 9.5040073394775391, 1.584679126739502), kp: (442.50469970703125, 76.12579345703125, 0.48225307464599609) }, 
            MapPointDummy { id: 517, position: DVVector3::new_with(2.7338190078735352, 9.2524785995483398, 2.3971426486968994), kp: (335.10574340820312, 30.014835357666016, 0.48225307464599609) }, 
            MapPointDummy { id: 518, position: DVVector3::new_with(3.9261910915374756, 10.677642822265625, 2.3652708530426025), kp: (372.0294189453125, 38.807880401611328, 0.48225307464599609) }, 
            MapPointDummy { id: 519, position: DVVector3::new_with(2.0787315368652344, 5.6471104621887207, 1.5905607938766479), kp: (333.83807373046875, 79.078926086425781, 0.48225307464599609) }, 
            MapPointDummy { id: 525, position: DVVector3::new_with(4.178779125213623, 6.3751373291015625, 1.0853419303894043), kp: (474.29598999023438, 116.10226440429688, 0.48225307464599609) }, 
            MapPointDummy { id: 527, position: DVVector3::new_with(4.6046657562255859, 6.861854076385498, -0.02761397510766983), kp: (479.46490478515625, 164.42874145507812, 0.48225307464599609) }, 
            MapPointDummy { id: 529, position: DVVector3::new_with(10.646998405456543, 12.83717155456543, 3.6310672760009766), kp: (578.93121337890625, 8.6703481674194336, 0.48225307464599609) }, 
            MapPointDummy { id: 533, position: DVVector3::new_with(9.9406661987304688, 15.413776397705078, 4.1369533538818359), kp: (503.13021850585938, 2.5819666385650635, 0.48225307464599609) }, 
            MapPointDummy { id: 534, position: DVVector3::new_with(9.7974357604980469, 14.806427001953125, 3.9258115291595459), kp: (510.60665893554688, 5.3687810897827148, 0.48225307464599609) }, 
            MapPointDummy { id: 541, position: DVVector3::new_with(2.4675390720367432, 4.9746928215026855, 0.099900729954242706), kp: (370.75552368164062, 258.41741943359375, 0.48225307464599609) }, 
            MapPointDummy { id: 543, position: DVVector3::new_with(2.6114113330841064, 5.2190632820129395, -1.27094566822052), kp: (366.42843627929688, 305.52197265625, 0.48225307464599609) }, 
            MapPointDummy { id: 550, position: DVVector3::new_with(2.0562527179718018, 5.972498893737793, -0.42655134201049805), kp: (315.48489379882812, 223.43394470214844, 0.48225307464599609) }, 
            MapPointDummy { id: 552, position: DVVector3::new_with(6.4996433258056641, 6.9048280715942383, -1.964698314666748), kp: (546.4033203125, 269.50323486328125, 0.48225307464599609) }, 
            MapPointDummy { id: 553, position: DVVector3::new_with(7.9015874862670898, 6.6373815536499023, -2.3377888202667236), kp: (622.4969482421875, 292.76174926757812, 0.48225307464599609) }, 
            MapPointDummy { id: 554, position: DVVector3::new_with(5.1461868286132812, 4.7274394035339355, -1.504179835319519), kp: (599.4923095703125, 351.39471435546875, 0.48225307464599609) }, 
            MapPointDummy { id: 556, position: DVVector3::new_with(4.3350310325622559, 6.0583572387695312, -1.9126510620117188), kp: (455.540771484375, 297.63015747070312, 0.48225307464599609) }, 
            MapPointDummy { id: 560, position: DVVector3::new_with(6.5268864631652832, 7.1110000610351562, -0.84278136491775513), kp: (554.55322265625, 212.79832458496094, 0.48225307464599609) }, 
            MapPointDummy { id: 561, position: DVVector3::new_with(9.2566013336181641, 8.8493051528930664, -0.99299007654190063), kp: (604.9622802734375, 188.36276245117188, 0.48225307464599609) }, 
            MapPointDummy { id: 564, position: DVVector3::new_with(5.1142892837524414, 7.1906337738037109, -0.61192798614501953), kp: (512.84588623046875, 178.27430725097656, 0.48225307464599609) }, 
            MapPointDummy { id: 565, position: DVVector3::new_with(4.2171292304992676, 6.2877354621887207, -0.79526823759078979), kp: (454.39895629882812, 233.44711303710938, 0.48225307464599609) }, 
            MapPointDummy { id: 566, position: DVVector3::new_with(7.7817096710205078, 9.1507577896118164, -2.3911197185516357), kp: (520.37713623046875, 232.86032104492188, 0.48225307464599609) }, 
            MapPointDummy { id: 567, position: DVVector3::new_with(0.84326159954071045, 5.0107302665710449, 1.5602904558181763), kp: (204.8929443359375, 111.81351470947266, 0.48225307464599609) }, 
            MapPointDummy { id: 569, position: DVVector3::new_with(0.8798058032989502, 4.5518431663513184, 1.1928173303604126), kp: (206.90821838378906, 129.91009521484375, 0.48225307464599609) }, 
            MapPointDummy { id: 572, position: DVVector3::new_with(1.2744158506393433, 4.945106029510498, 1.5561811923980713), kp: (260.048828125, 102.26187896728516, 0.48225307464599609) }, 
            MapPointDummy { id: 579, position: DVVector3::new_with(0.87251436710357666, 4.639622688293457, 1.6371930837631226), kp: (191.65463256835938, 61.000911712646484, 0.48225307464599609) }, 
            MapPointDummy { id: 580, position: DVVector3::new_with(1.031551718711853, 5.6450395584106445, 1.689800500869751), kp: (224.63282775878906, 65.676353454589844, 0.48225307464599609) }, 
            MapPointDummy { id: 581, position: DVVector3::new_with(0.80047440528869629, 4.5643272399902344, 1.6322363615036011), kp: (191.253173828125, 81.918441772460938, 0.48225307464599609) }, 
            MapPointDummy { id: 582, position: DVVector3::new_with(0.79624730348587036, 4.4966721534729004, 1.5846225023269653), kp: (223.90605163574219, 87.7767333984375, 0.48225307464599609) }, 
            MapPointDummy { id: 589, position: DVVector3::new_with(-0.018648762255907059, 3.8551414012908936, 1.6532676219940186), kp: (12.281572341918945, 71.549690246582031, 0.48225307464599609) }, 
            MapPointDummy { id: 593, position: DVVector3::new_with(-1.8074547052383423, 6.112694263458252, 1.5543677806854248), kp: (-31.920343399047852, 66.860404968261719, 0.48225307464599609) }, 
            MapPointDummy { id: 597, position: DVVector3::new_with(2.262995719909668, 5.4660196304321289, 0.83142459392547607), kp: (382.29244995117188, 126.85871887207031, 0.48225307464599609) }, 
            MapPointDummy { id: 598, position: DVVector3::new_with(3.0661275386810303, 5.4247255325317383, 1.2400350570678711), kp: (406.86264038085938, 133.83155822753906, 0.48225307464599609) }, 
            MapPointDummy { id: 600, position: DVVector3::new_with(1.2691093683242798, 4.9198408126831055, 0.82422125339508057), kp: (254.57719421386719, 137.89779663085938, 0.48225307464599609) }, 
            MapPointDummy { id: 603, position: DVVector3::new_with(1.8447357416152954, 5.3661093711853027, 0.78193312883377075), kp: (308.33297729492188, 115.90114593505859, 0.48225307464599609) }, 
            MapPointDummy { id: 604, position: DVVector3::new_with(1.9735924005508423, 5.4585041999816895, 1.2214616537094116), kp: (325.90301513671875, 112.79508209228516, 0.48225307464599609) }, 
            MapPointDummy { id: 605, position: DVVector3::new_with(2.0183596611022949, 6.4120855331420898, 0.89358818531036377), kp: (302.47830200195312, 124.81258392333984, 0.48225307464599609) }, 
            MapPointDummy { id: 606, position: DVVector3::new_with(1.9161406755447388, 5.3786911964416504, 1.0108380317687988), kp: (318.430419921875, 132.11126708984375, 0.48225307464599609) }, 
            MapPointDummy { id: 607, position: DVVector3::new_with(0.18861584365367889, 4.1107115745544434, 1.2545585632324219), kp: (86.1231689453125, 131.16619873046875, 0.69444441795349121) }, 
            MapPointDummy { id: 608, position: DVVector3::new_with(0.35651877522468567, 4.2282533645629883, 1.5400128364562988), kp: (115.16978454589844, 89.768852233886719, 0.69444441795349121) }, 
            MapPointDummy { id: 612, position: DVVector3::new_with(-1.2088382244110107, 5.31903076171875, 0.81392216682434082), kp: (-33.145301818847656, 159.23634338378906, 0.69444441795349121) }, 
            MapPointDummy { id: 614, position: DVVector3::new_with(-1.2118545770645142, 6.9854850769042969, 2.3717830181121826), kp: (52.730030059814453, 2.9396896362304688, 0.69444441795349121) }, 
            MapPointDummy { id: 615, position: DVVector3::new_with(-0.40416455268859863, 7.2978744506835938, 2.3689272403717041), kp: (131.78993225097656, 12.079790115356445, 0.69444441795349121) }, 
            MapPointDummy { id: 617, position: DVVector3::new_with(-1.4247139692306519, 6.5606594085693359, 2.5396897792816162), kp: (17.64598274230957, -16.2047119140625, 0.69444441795349121) }, 
            MapPointDummy { id: 620, position: DVVector3::new_with(0.61178648471832275, 6.6706757545471191, 1.1557866334915161), kp: (185.00204467773438, 93.458847045898438, 0.69444441795349121) }, 
            MapPointDummy { id: 621, position: DVVector3::new_with(0.24639967083930969, 5.2259321212768555, 0.85775810480117798), kp: (153.91093444824219, 156.17047119140625, 0.69444441795349121) }, 
            MapPointDummy { id: 622, position: DVVector3::new_with(0.92297160625457764, 5.256659984588623, 1.9263839721679688), kp: (227.587646484375, 32.896087646484375, 0.69444441795349121) }, 
            MapPointDummy { id: 623, position: DVVector3::new_with(1.562137246131897, 8.8338346481323242, 2.3340520858764648), kp: (273.71914672851562, 29.917449951171875, 0.69444441795349121) }, 
            MapPointDummy { id: 625, position: DVVector3::new_with(1.8575103282928467, 5.4152145385742188, 1.6970198154449463), kp: (294.02572631835938, 80.227798461914062, 0.69444441795349121) }, 
            MapPointDummy { id: 626, position: DVVector3::new_with(-0.21257209777832031, 8.1576023101806641, 2.5370109081268311), kp: (161.88188171386719, 7.5473451614379883, 0.69444441795349121) }, 
            MapPointDummy { id: 634, position: DVVector3::new_with(0.15612250566482544, 2.8400795459747314, 0.63789808750152588), kp: (-44.640827178955078, 336.02593994140625, 0.69444441795349121) }, 
            MapPointDummy { id: 636, position: DVVector3::new_with(-0.2362254410982132, 5.0837736129760742, 0.61987084150314331), kp: (93.679428100585938, 192.89892578125, 0.69444441795349121) }, 
            MapPointDummy { id: 637, position: DVVector3::new_with(0.47702479362487793, 4.3177433013916016, 0.68004488945007324), kp: (151.34446716308594, 196.21464538574219, 0.69444441795349121) }, 
            MapPointDummy { id: 639, position: DVVector3::new_with(-1.517533540725708, 4.9627947807312012, 0.69580280780792236), kp: (-35.120861053466797, 198.72174072265625, 0.69444441795349121) }, 
            MapPointDummy { id: 643, position: DVVector3::new_with(1.884451150894165, 6.0242824554443359, -1.6116470098495483), kp: (298.97061157226562, 288.67379760742188, 0.69444441795349121) }, 
            MapPointDummy { id: 650, position: DVVector3::new_with(1.2655417919158936, 4.8929634094238281, 0.51788890361785889), kp: (255.48190307617188, 189.6260986328125, 0.69444441795349121) }, 
            MapPointDummy { id: 651, position: DVVector3::new_with(1.2747625112533569, 4.936164379119873, 0.82877713441848755), kp: (266.357666015625, 187.2093505859375, 0.69444441795349121) }, 
            MapPointDummy { id: 654, position: DVVector3::new_with(0.71411812305450439, 4.4268651008605957, 0.50528585910797119), kp: (186.92373657226562, 209.51063537597656, 0.69444441795349121) }, 
            MapPointDummy { id: 655, position: DVVector3::new_with(0.80593323707580566, 4.1526169776916504, 0.38003093004226685), kp: (191.89981079101562, 219.339599609375, 0.69444441795349121) }, 
            MapPointDummy { id: 656, position: DVVector3::new_with(0.79428410530090332, 4.1998167037963867, 0.52248913049697876), kp: (194.48963928222656, 218.06111145019531, 0.69444441795349121) }, 
            MapPointDummy { id: 662, position: DVVector3::new_with(6.0798134803771973, 13.336984634399414, 3.5827338695526123), kp: (422.35971069335938, 6.1763668060302734, 0.69444441795349121) }, 
            MapPointDummy { id: 663, position: DVVector3::new_with(4.5769991874694824, 10.252315521240234, 1.8074361085891724), kp: (402.30511474609375, 62.758453369140625, 0.69444441795349121) }, 
            MapPointDummy { id: 666, position: DVVector3::new_with(3.9236881732940674, 10.644030570983887, 2.3758506774902344), kp: (372.07662963867188, 37.955368041992188, 0.69444441795349121) }, 
            MapPointDummy { id: 667, position: DVVector3::new_with(1.7073564529418945, 5.254948616027832, 1.5801906585693359), kp: (335.08367919921875, 68.002838134765625, 0.69444441795349121) }, 
            MapPointDummy { id: 671, position: DVVector3::new_with(8.955286979675293, 10.260292053222656, -0.59254717826843262), kp: (549.91925048828125, 157.92355346679688, 0.69444441795349121) }, 
            MapPointDummy { id: 673, position: DVVector3::new_with(6.9201312065124512, 10.876180648803711, 0.6325872540473938), kp: (458.55416870117188, 110.51248168945312, 0.69444441795349121) }, 
            MapPointDummy { id: 674, position: DVVector3::new_with(10.512103080749512, 13.545222282409668, -0.50437349081039429), kp: (520.35272216796875, 130.31100463867188, 0.69444441795349121) }, 
            MapPointDummy { id: 676, position: DVVector3::new_with(10.921976089477539, 13.881097793579102, 4.4943017959594727), kp: (568.825439453125, -12.851333618164062, 0.69444441795349121) }, 
            MapPointDummy { id: 678, position: DVVector3::new_with(11.234524726867676, 13.509498596191406, 2.8178586959838867), kp: (571.14617919921875, 39.064537048339844, 0.69444441795349121) }, 
            MapPointDummy { id: 682, position: DVVector3::new_with(7.6750736236572266, 13.556966781616211, 2.1890525817871094), kp: (458.96713256835938, 54.564643859863281, 0.69444441795349121) }, 
            MapPointDummy { id: 683, position: DVVector3::new_with(8.5237302780151367, 11.506138801574707, 2.1552786827087402), kp: (528.40557861328125, 56.42303466796875, 0.69444441795349121) }, 
            MapPointDummy { id: 685, position: DVVector3::new_with(3.3327841758728027, 5.6205854415893555, -1.1556739807128906), kp: (411.59939575195312, 277.25201416015625, 0.69444441795349121) }, 
            MapPointDummy { id: 688, position: DVVector3::new_with(2.1219005584716797, 6.1967077255249023, -2.6831915378570557), kp: (308.06417846679688, 335.23666381835938, 0.69444441795349121) }, 
            MapPointDummy { id: 691, position: DVVector3::new_with(3.9447634220123291, 6.2019109725952148, -0.39781081676483154), kp: (444.15365600585938, 213.98820495605469, 0.69444441795349121) }, 
            MapPointDummy { id: 695, position: DVVector3::new_with(2.4633736610412598, 5.2425217628479004, 0.71392470598220825), kp: (365.6014404296875, 179.98507690429688, 0.69444441795349121) }, 
            MapPointDummy { id: 697, position: DVVector3::new_with(2.4837818145751953, 5.0383024215698242, 0.075874075293540955), kp: (360.27755737304688, 252.36004638671875, 0.69444441795349121) }, 
            MapPointDummy { id: 698, position: DVVector3::new_with(6.2397408485412598, 6.1337909698486328, -1.8551740646362305), kp: (579.2200927734375, 281.42587280273438, 0.69444441795349121) }, 
            MapPointDummy { id: 704, position: DVVector3::new_with(4.1548295021057129, 5.1104564666748047, -1.9935975074768066), kp: (477.5289306640625, 346.775390625, 0.69444441795349121) }, 
            MapPointDummy { id: 707, position: DVVector3::new_with(10.457090377807617, 9.8502283096313477, -1.3405829668045044), kp: (607.4556884765625, 188.37956237792969, 0.69444441795349121) }, 
            MapPointDummy { id: 710, position: DVVector3::new_with(6.526242733001709, 8.3061056137084961, -0.59443241357803345), kp: (510.582275390625, 179.86419677734375, 0.69444441795349121) }, 
            MapPointDummy { id: 711, position: DVVector3::new_with(4.2416515350341797, 6.3156437873840332, -0.80222016572952271), kp: (454.6263427734375, 232.16392517089844, 0.69444441795349121) }, 
            MapPointDummy { id: 713, position: DVVector3::new_with(1.2859909534454346, 4.9794793128967285, 0.82218581438064575), kp: (236.98948669433594, 139.94898986816406, 0.69444441795349121) }, 
            MapPointDummy { id: 714, position: DVVector3::new_with(1.0697144269943237, 5.3413949012756348, 0.89452558755874634), kp: (254.08816528320312, 137.6500244140625, 0.69444441795349121) }, 
            MapPointDummy { id: 716, position: DVVector3::new_with(1.2004934549331665, 4.8895378112792969, 0.78018438816070557), kp: (248.18173217773438, 165.52302551269531, 0.69444441795349121) }, 
            MapPointDummy { id: 722, position: DVVector3::new_with(1.4253573417663574, 5.040339469909668, 1.6013261079788208), kp: (258.58551025390625, 103.00182342529297, 0.69444441795349121) }, 
            MapPointDummy { id: 730, position: DVVector3::new_with(0.75239700078964233, 5.5974435806274414, 2.2232425212860107), kp: (217.23828125, 11.865626335144043, 0.69444441795349121) }, 
            MapPointDummy { id: 731, position: DVVector3::new_with(0.94967377185821533, 6.6668357849121094, 2.1090335845947266), kp: (206.33932495117188, 28.943111419677734, 0.69444441795349121) }, 
            MapPointDummy { id: 732, position: DVVector3::new_with(0.89324301481246948, 5.5531778335571289, 2.2087903022766113), kp: (221.12699890136719, 34.033779144287109, 0.69444441795349121) }, 
            MapPointDummy { id: 733, position: DVVector3::new_with(-1.3411884307861328, 6.437401294708252, 1.8630859851837158), kp: (26.029241561889648, 42.063652038574219, 0.69444441795349121) }, 
            MapPointDummy { id: 734, position: DVVector3::new_with(-1.1336311101913452, 6.7773833274841309, 2.2472019195556641), kp: (45.019756317138672, 36.769939422607422, 0.69444441795349121) }, 
            MapPointDummy { id: 739, position: DVVector3::new_with(0.8153875470161438, 4.6647148132324219, 0.91214996576309204), kp: (201.0577392578125, 157.95701599121094, 0.69444441795349121) }, 
            MapPointDummy { id: 740, position: DVVector3::new_with(1.0216031074523926, 4.7707757949829102, 0.76760357618331909), kp: (227.38682556152344, 170.29685974121094, 0.69444441795349121) }, 
            MapPointDummy { id: 744, position: DVVector3::new_with(6.7560062408447266, 8.5855560302734375, -0.66441923379898071), kp: (530.47052001953125, 170.43728637695312, 0.69444441795349121) }, 
            MapPointDummy { id: 746, position: DVVector3::new_with(2.012265682220459, 5.4873437881469727, 0.72703301906585693), kp: (324.11953735351562, 154.69764709472656, 0.69444441795349121) }, 
            MapPointDummy { id: 747, position: DVVector3::new_with(1.8571585416793823, 5.3652234077453613, 0.54940688610076904), kp: (312.03268432617188, 161.96672058105469, 0.69444441795349121) }, 
            MapPointDummy { id: 749, position: DVVector3::new_with(-1.9725608825683594, 6.1867241859436035, 1.7293224334716797), kp: (-53.570442199707031, 24.987470626831055, 0.69444441795349121) }, 
            MapPointDummy { id: 750, position: DVVector3::new_with(-1.5790379047393799, 6.1561579704284668, 1.8782187700271606), kp: (-13.703868865966797, 36.851612091064453, 0.69444441795349121) }, 
            MapPointDummy { id: 751, position: DVVector3::new_with(-1.7843027114868164, 6.0227241516113281, 1.5454868078231812), kp: (-32.612831115722656, 67.722175598144531, 0.69444441795349121) }, 
            MapPointDummy { id: 752, position: DVVector3::new_with(-1.6839627027511597, 6.5876402854919434, 1.7657849788665771), kp: (-16.45857048034668, 53.919784545898438, 0.69444441795349121) }, 
            MapPointDummy { id: 753, position: DVVector3::new_with(1.0327901840209961, 4.7338190078735352, 1.1694152355194092), kp: (205.15611267089844, 112.07325744628906, 0.69444441795349121) }, 
            MapPointDummy { id: 756, position: DVVector3::new_with(1.2785362005233765, 4.9575004577636719, 0.82279139757156372), kp: (226.93997192382812, 128.75643920898438, 0.69444441795349121) }, 
            MapPointDummy { id: 757, position: DVVector3::new_with(0.88610541820526123, 4.5641293525695801, 0.66435700654983521), kp: (209.99824523925781, 187.28611755371094, 0.69444441795349121) }, 
            MapPointDummy { id: 761, position: DVVector3::new_with(0.49447458982467651, 4.2608356475830078, 1.1506022214889526), kp: (120.09355926513672, 149.21012878417969, 0.69444441795349121) }, 
            MapPointDummy { id: 763, position: DVVector3::new_with(0.065000750124454498, 5.2523670196533203, 0.76496493816375732), kp: (127.54502868652344, 159.58265686035156, 0.69444441795349121) }, 
            MapPointDummy { id: 764, position: DVVector3::new_with(0.46979430317878723, 4.3318648338317871, 1.2558760643005371), kp: (134.52714538574219, 154.60408020019531, 0.69444441795349121) }, 
            MapPointDummy { id: 766, position: DVVector3::new_with(5.7493419647216797, 7.6672396659851074, -0.43580847978591919), kp: (472.22970581054688, 176.06282043457031, 0.69444441795349121) }, 
            MapPointDummy { id: 768, position: DVVector3::new_with(5.1066751480102539, 7.2292380332946777, -0.81071382761001587), kp: (479.85867309570312, 203.12152099609375, 0.69444441795349121) }, 
            MapPointDummy { id: 772, position: DVVector3::new_with(2.7684595584869385, 5.2071590423583984, 1.0528938770294189), kp: (406.85556030273438, 134.08247375488281, 0.69444441795349121) }, 
            MapPointDummy { id: 773, position: DVVector3::new_with(0.12472082674503326, 3.540848970413208, 0.88919603824615479), kp: (34.05059814453125, 186.65177917480469, 0.69444441795349121) }, 
            MapPointDummy { id: 776, position: DVVector3::new_with(0.20003852248191833, 3.5224289894104004, 0.90536040067672729), kp: (54.451869964599609, 210.80195617675781, 0.69444441795349121) }, 
            MapPointDummy { id: 780, position: DVVector3::new_with(3.3176403045654297, 5.2173709869384766, -1.8656820058822632), kp: (413.3896484375, 337.19137573242188, 0.69444441795349121) }, 
            MapPointDummy { id: 781, position: DVVector3::new_with(-0.64889109134674072, 6.6152634620666504, 1.8309341669082642), kp: (124.05577087402344, 45.674674987792969, 0.69444441795349121) }, 
            MapPointDummy { id: 782, position: DVVector3::new_with(-0.4213043749332428, 7.2270603179931641, 1.8239239454269409), kp: (131.99295043945312, 50.710819244384766, 0.69444441795349121) }, 
            MapPointDummy { id: 783, position: DVVector3::new_with(-0.87144219875335693, 6.8813033103942871, 1.571014404296875), kp: (114.97966766357422, 71.871086120605469, 0.69444441795349121) }, 
            MapPointDummy { id: 785, position: DVVector3::new_with(-1.0010716915130615, 6.9619545936584473, 1.9358381032943726), kp: (78.591964721679688, 43.882789611816406, 0.69444441795349121) }, 
            MapPointDummy { id: 786, position: DVVector3::new_with(-0.67762237787246704, 6.1380753517150879, 1.9405969381332397), kp: (99.5260009765625, 44.690357208251953, 0.69444441795349121) }, 
            MapPointDummy { id: 790, position: DVVector3::new_with(0.35885530710220337, 4.2303118705749512, 1.5375658273696899), kp: (115.74591064453125, 90.711509704589844, 1.0) }, 
            MapPointDummy { id: 792, position: DVVector3::new_with(-0.014556917361915112, 3.9003996849060059, 1.5252395868301392), kp: (24.008127212524414, 94.391815185546875, 1.0) }, 
            MapPointDummy { id: 794, position: DVVector3::new_with(-1.2886267900466919, 6.9429903030395508, 2.5844924449920654), kp: (42.586826324462891, -14.528602600097656, 1.0) }, 
            MapPointDummy { id: 810, position: DVVector3::new_with(0.10629294067621231, 2.905482292175293, 0.67314612865447998), kp: (-47.78125, 335.89501953125, 1.0) }, 
            MapPointDummy { id: 812, position: DVVector3::new_with(0.15761199593544006, 4.1420550346374512, 0.78663176298141479), kp: (94.716720581054688, 191.80555725097656, 1.0) }, 
            MapPointDummy { id: 814, position: DVVector3::new_with(0.02463160827755928, 3.9172463417053223, 0.47705495357513428), kp: (64.560935974121094, 243.66473388671875, 1.0) }, 
            MapPointDummy { id: 815, position: DVVector3::new_with(-0.75788223743438721, 4.2719430923461914, 0.83473843336105347), kp: (-35.099552154541016, 197.98880004882812, 1.0) }, 
            MapPointDummy { id: 819, position: DVVector3::new_with(1.9538936614990234, 6.4101309776306152, -1.8950194120407104), kp: (299.17437744140625, 288.01959228515625, 1.0) }, 
            MapPointDummy { id: 826, position: DVVector3::new_with(1.2867640256881714, 4.9555697441101074, 0.70862889289855957), kp: (248.81674194335938, 177.98611450195312, 1.0) }, 
            MapPointDummy { id: 829, position: DVVector3::new_with(1.7061833143234253, 6.4398593902587891, -1.242114782333374), kp: (284.88790893554688, 255.01644897460938, 1.0) }, 
            MapPointDummy { id: 836, position: DVVector3::new_with(4.0405435562133789, 10.413763999938965, 2.3392603397369385), kp: (381.68240356445312, 38.868896484375, 1.0) }, 
            MapPointDummy { id: 837, position: DVVector3::new_with(5.2325382232666016, 12.783115386962891, 3.6209816932678223), kp: (421.06182861328125, 5.0107202529907227, 1.0) }, 
            MapPointDummy { id: 840, position: DVVector3::new_with(3.5696549415588379, 12.300158500671387, 2.6326336860656738), kp: (335.48675537109375, 30.147115707397461, 1.0) }, 
            MapPointDummy { id: 854, position: DVVector3::new_with(8.8270254135131836, 12.791510581970215, 3.2368364334106445), kp: (517.79583740234375, 19.361324310302734, 1.0) }, 
            MapPointDummy { id: 858, position: DVVector3::new_with(4.0711913108825684, 5.8284902572631836, -1.8856806755065918), kp: (446.7586669921875, 307.4654541015625, 1.0) }, 
            MapPointDummy { id: 859, position: DVVector3::new_with(2.5590612888336182, 5.145871639251709, -0.50478005409240723), kp: (371.15765380859375, 259.14834594726562, 1.0) }, 
            MapPointDummy { id: 861, position: DVVector3::new_with(2.6676325798034668, 5.0599961280822754, -1.6247644424438477), kp: (370.27426147460938, 335.52499389648438, 1.0) }, 
            MapPointDummy { id: 867, position: DVVector3::new_with(2.0333247184753418, 5.8571362495422363, -0.36586153507232666), kp: (316.12887573242188, 223.23361206054688, 1.0) }, 
            MapPointDummy { id: 872, position: DVVector3::new_with(6.4787740707397461, 6.8927531242370605, -1.9698292016983032), kp: (545.47979736328125, 269.71536254882812, 1.0) }, 
            MapPointDummy { id: 880, position: DVVector3::new_with(4.2531557083129883, 6.3316640853881836, -0.80737978219985962), kp: (454.37957763671875, 231.94075012207031, 1.0) }, 
            MapPointDummy { id: 881, position: DVVector3::new_with(7.4420962333679199, 8.7993965148925781, -2.2123947143554688), kp: (517.92864990234375, 233.29426574707031, 1.0) }, 
            MapPointDummy { id: 883, position: DVVector3::new_with(-1.2362042665481567, 6.5246152877807617, 1.8600656986236572), kp: (40.676910400390625, 44.160411834716797, 1.0) }, 
            MapPointDummy { id: 887, position: DVVector3::new_with(1.2889235019683838, 6.0318136215209961, 1.22402024269104), kp: (259.38433837890625, 101.53912353515625, 1.0) }, 
            MapPointDummy { id: 893, position: DVVector3::new_with(-1.7031121253967285, 6.3870553970336914, 1.6885452270507812), kp: (-11.067508697509766, 75.100883483886719, 1.0) }, 
            MapPointDummy { id: 897, position: DVVector3::new_with(7.1572666168212891, 8.6831226348876953, -0.4484880268573761), kp: (530.181640625, 170.88780212402344, 1.0) }, 
            MapPointDummy { id: 903, position: DVVector3::new_with(1.9871636629104614, 5.466637134552002, 1.2343517541885376), kp: (326.48294067382812, 111.99950408935547, 1.0) }, 
            MapPointDummy { id: 908, position: DVVector3::new_with(0.79081696271896362, 4.5554847717285156, 1.5748285055160522), kp: (191.5181884765625, 83.687751770019531, 1.0) }, 
            MapPointDummy { id: 910, position: DVVector3::new_with(-1.3621783256530762, 7.4004912376403809, 1.9643628597259521), kp: (55.819076538085938, 38.396133422851562, 1.0) }, 
            MapPointDummy { id: 922, position: DVVector3::new_with(0.5569380521774292, 7.9089760780334473, 2.1072218418121338), kp: (202.48919677734375, 11.944334983825684, 1.0) }, 
            MapPointDummy { id: 926, position: DVVector3::new_with(4.2957310676574707, 6.3877544403076172, -0.1187344491481781), kp: (464.03048706054688, 192.66366577148438, 1.0) }, 
            MapPointDummy { id: 927, position: DVVector3::new_with(5.0020079612731934, 7.1804113388061523, -0.40843221545219421), kp: (489.9420166015625, 178.80679321289062, 1.0) }, 
            MapPointDummy { id: 929, position: DVVector3::new_with(5.3735828399658203, 7.4865827560424805, -0.77793222665786743), kp: (480.11761474609375, 203.55677795410156, 1.0) }, 
            MapPointDummy { id: 938, position: DVVector3::new_with(3.1683027744293213, 5.5811753273010254, -1.7143428325653076), kp: (394.12179565429688, 310.84036254882812, 1.0) }, 
            MapPointDummy { id: 940, position: DVVector3::new_with(3.1204931735992432, 5.0816469192504883, -1.9231137037277222), kp: (396.49642944335938, 343.29635620117188, 1.0) }, 
            MapPointDummy { id: 941, position: DVVector3::new_with(3.3613808155059814, 5.2972378730773926, -1.9402117729187012), kp: (413.27053833007812, 338.41366577148438, 1.0) }, 
            MapPointDummy { id: 943, position: DVVector3::new_with(2.0715012550354004, 5.5372939109802246, 0.66927117109298706), kp: (324.11868286132812, 154.89913940429688, 1.0) }, 
            MapPointDummy { id: 946, position: DVVector3::new_with(0.80269342660903931, 4.5392322540283203, 0.76078397035598755), kp: (198.22654724121094, 177.93634033203125, 1.0) }, 
            MapPointDummy { id: 956, position: DVVector3::new_with(-0.4876990020275116, 7.6413350105285645, 1.5312302112579346), kp: (115.15965270996094, 71.188079833984375, 1.0) }, 
            MapPointDummy { id: 957, position: DVVector3::new_with(-0.47943860292434692, 7.1166892051696777, 1.9400452375411987), kp: (133.34507751464844, 69.103431701660156, 1.0) }, 
            MapPointDummy { id: 958, position: DVVector3::new_with(-0.20595899224281311, 3.6089370250701904, 1.1928586959838867), kp: (-35.766063690185547, 149.13581848144531, 1.0) }, 
            MapPointDummy { id: 960, position: DVVector3::new_with(-1.3279091119766235, 4.9589023590087891, 0.72252458333969116), kp: (-33.560657501220703, 157.76242065429688, 1.0) }, 
            MapPointDummy { id: 961, position: DVVector3::new_with(-0.061796166002750397, 3.7777462005615234, 1.1795710325241089), kp: (-0.78078252077102661, 162.05426025390625, 1.0) }, 
            MapPointDummy { id: 964, position: DVVector3::new_with(-0.0077440016902983189, 5.3450946807861328, 0.69909262657165527), kp: (127.76605987548828, 158.73652648925781, 1.0) }, 
            MapPointDummy { id: 969, position: DVVector3::new_with(7.0395050048828125, 13.000781059265137, 3.1895549297332764), kp: (483.54254150390625, -3.7966840267181396, 1.0) }, 
            MapPointDummy { id: 970, position: DVVector3::new_with(9.0175504684448242, 14.063675880432129, 3.9199380874633789), kp: (504.04168701171875, 2.7192368507385254, 1.0) }, 
            MapPointDummy { id: 975, position: DVVector3::new_with(7.5536818504333496, 6.4050998687744141, -2.0607988834381104), kp: (627.02783203125, 290.99069213867188, 1.0) }, 
            MapPointDummy { id: 977, position: DVVector3::new_with(7.9803614616394043, 6.6763138771057129, -2.8537213802337646), kp: (624.42144775390625, 315.73165893554688, 1.0) }, 
            MapPointDummy { id: 993, position: DVVector3::new_with(4.7952733039855957, 4.2567787170410156, -1.1711467504501343), kp: (597.62689208984375, 351.38973999023438, 1.0) }, 
            MapPointDummy { id: 996, position: DVVector3::new_with(1.0876394510269165, 5.3448386192321777, 1.4899324178695679), kp: (237.42764282226562, 87.341072082519531, 1.0) }, 
            MapPointDummy { id: 998, position: DVVector3::new_with(0.23661988973617554, 3.9338340759277344, 1.1586624383926392), kp: (86.525230407714844, 151.47093200683594, 1.0) }, 
            MapPointDummy { id: 1002, position: DVVector3::new_with(-2.4808218479156494, 7.1477212905883789, 2.5815126895904541), kp: (-49.910850524902344, -15.454801559448242, 1.0) }, 
            MapPointDummy { id: 1004, position: DVVector3::new_with(-1.8844203948974609, 6.1860017776489258, 2.1990971565246582), kp: (-48.998500823974609, 13.105895042419434, 1.0) }, 
            MapPointDummy { id: 1005, position: DVVector3::new_with(-1.7129789590835571, 6.3195490837097168, 2.1869497299194336), kp: (-23.529544830322266, 11.232787132263184, 1.0) }, 

        ];


        // Optimization code
        let fx= SETTINGS.get::<f64>(CAMERA, "fx");
        let fy= SETTINGS.get::<f64>(CAMERA, "fy");
        let cx= SETTINGS.get::<f64>(CAMERA, "cx");
        let cy= SETTINGS.get::<f64>(CAMERA, "cy");
        let camera_param = [fx, fy, cx, cy];

        let mut optimizer = g2o::ffi::new_sparse_optimizer(7, camera_param, 0.0);

        let mut initial_mono_correspondences = 0; //nInitialMonoCorrespondences
        let mut _initial_stereo_correspondences = 0; //nInitialStereoCorrespondences

        // Set Frame vertex
        let vp = 0;
        let vv = 1;
        let vg = 2;
        let va = 3;
        add_vertex_pose_frame(&mut optimizer, & frame, false, vp);
        optimizer.pin_mut().add_vertex_velocity(
            vv, false, frame.imu_data.velocity.unwrap().into()
        );
        optimizer.pin_mut().add_vertex_gyrobias(
            vg, false, frame.imu_data.get_imu_bias().get_gyro_bias().into()
        );
        optimizer.pin_mut().add_vertex_accbias(
            va, false, frame.imu_data.get_imu_bias().get_acc_bias().into()
        );


        let mut bla = 0;
        // Set MapPoint vertices
        let mut mp_indexes = vec![]; // vnIndexEdgeMono
        let mut mappoint_matches = vec![]; // using instead of keyframe matches
        for i in 0..mappoints.len() {
            bla += 1;

            // Left monocular observation
            initial_mono_correspondences += 1;
            mappoint_matches.push((mappoints[i].id, false)); // frame.mappoint_matches.set_outlier(i, false);

            let (x, y, inv_sigma2) = mappoints[i].kp;
            // // Add here uncerteinty
            // let unc2 = CAMERA_MODULE.uncertainty;
            // let inv_sigma2 = INV_LEVEL_SIGMA2[octave as usize] / unc2;
            // println!("INV SIGMA2: {}", inv_sigma2);

            optimizer.pin_mut().add_edge_mono_only_pose(
                true,
                vp,
                mappoints[i].id,
                (mappoints[i].position).into(),
                x, y,
                inv_sigma2,
                *TH_HUBER_MONO
            );
            mp_indexes.push(mappoints[i].id as u32);
        }
        let num_initial_correspondences = initial_mono_correspondences + _initial_stereo_correspondences;
        println!("POSE OPT! Num initial correspondences: {}, bla: {}", num_initial_correspondences, bla);

        // Set Previous Frame Vertex
        let vpk = 4;
        let vvk = 5;
        let vgk = 6;
        let vak = 7;

        // Add vertex pose keyframe (add_vertex_pose_keyframe)
        let imu_calib = ImuCalib::new();
        let rot = prev_kf_pose.get_quaternion();
        let imu_rot = nalgebra::geometry::UnitQuaternion::from_rotation_matrix(
            & nalgebra::Rotation3::from_matrix(& prev_kf_imu_rot)
        ); // lol whateverrr
        let tcb_rot = imu_calib.tcb.get_quaternion();

        optimizer.pin_mut().add_vertex_pose(
            vpk,
            true,
            1, // TODO (Stereo... num cams shouldn't be 1)
            prev_kf_imu_pos.into(), // imu position
            [imu_rot.i, imu_rot.j, imu_rot.k, imu_rot.w], // imu rotation
            prev_kf_pose.get_translation().into(), // translation
            [rot.i, rot.j, rot.k, rot.w], // rotation
            imu_calib.tcb.translation.into(), //tcb translation
            [tcb_rot.i, tcb_rot.j, tcb_rot.k, tcb_rot.w], // tcb rotation
            imu_calib.tbc.translation.into(), // tbc translation
            CAMERA_MODULE.stereo_baseline as f32
        );

        optimizer.pin_mut().add_vertex_velocity(
            vvk,
            true,
            prev_kf_velocity.into()
        );
        optimizer.pin_mut().add_vertex_gyrobias(
            vgk,
            true,
            prev_kf_imu_bias.get_gyro_bias().into()
        );
        optimizer.pin_mut().add_vertex_accbias(
            vak,
            true,
            prev_kf_imu_bias.get_acc_bias().into()
        );

        optimizer.pin_mut().add_edge_inertial(
            vpk, vvk, vgk, vak, vp, vv,
            frame.imu_data.imu_preintegrated.as_ref().unwrap().into(),
            false,
            1.0
        );

        optimizer.pin_mut().add_edge_gyro_and_acc(
            vgk, vg,
            vak, va,
            frame.imu_data.imu_preintegrated.as_ref().unwrap().into(),
            false
        );

        // We perform 4 optimizations, after each optimization we classify observation as inlier/outlier
        // At the next optimization, outliers are not included, but at the end they can be classified as inliers again.
        let chi2_mono = vec![12.0, 7.5, 5.991, 5.991];
        let _chi2_stereo = vec![15.6, 9.8, 7.815, 7.815];
        let iterations = vec![10,10,10,10];


        // // For debugging ... prints the .g2o file
        // optimizer.save("darvis.g2o\0",1);

        let mut num_bad = 0;
        let mut num_inliers = 0;
        for iteration in 0..4 {
            optimizer.pin_mut().optimize(iterations[iteration], false, false);

            num_bad = 0;
            num_inliers = 0;

            let chi2_close = 1.5 * chi2_mono[iteration];

            // For monocular observations
            let mut i = 0;
            for mut edge in optimizer.pin_mut().get_mut_mono_onlypose_edges().iter_mut() {
                let mp_idx = mp_indexes[i];
                let (mp_id, is_outlier) = mappoint_matches[i];
                let is_close = *tracked_mappoint_data.get(&mp_id).unwrap();

                println!("mp idx {}", mp_indexes[i]);

                if is_outlier {
                    edge.inner.pin_mut().compute_error();
                }

                let chi2 = edge.inner.chi2();

                println!("POSE OPT OPTIMIZATION LOOPS... IDX {}, CHI2: {}, IS CLOSE: {}, IS DEPTH POSITIVE: {}", mp_idx, chi2, is_close, edge.inner.is_depth_positive());

                if (chi2 > chi2_mono[iteration] && !is_close) ||
                    (is_close && chi2 > chi2_close) ||
                    ! edge.inner.is_depth_positive()
                {
                    // frame.mappoint_matches.set_outlier(mp_idx as usize, true);
                    mappoint_matches[i].1 = true;
                    edge.inner.pin_mut().set_level(1);
                    num_bad += 1;
                } else {
                    // frame.mappoint_matches.set_outlier(mp_idx as usize, false);
                    mappoint_matches[i].1 = false;
                    edge.inner.pin_mut().set_level(0);
                }

                if iteration == 2 {
                    edge.inner.pin_mut().set_robust_kernel(true, 0.0);
                }
                i += 1;
            }

            if optimizer.num_edges() < 10 {
                break;
            }
        }






        let recovered_pose: Pose = optimizer.recover_optimized_vertex_pose(vp, VertexPoseRecoverType::Wb).into();
        let recovered_velocity = optimizer.recover_optimized_vertex_velocity(vv);
        frame.set_imu_pose_velocity(recovered_pose, recovered_velocity.into());

        let recovered_bias_estimate = optimizer.recover_optimized_inertial(
            vg, va, -1, -1
        );
        let recovered_bias = ImuBias {
            bax: recovered_bias_estimate.vb[3],
            bay: recovered_bias_estimate.vb[4],
            baz: recovered_bias_estimate.vb[5],
            bwx: recovered_bias_estimate.vb[0],
            bwy: recovered_bias_estimate.vb[1],
            bwz: recovered_bias_estimate.vb[2],
        };
        println!("POSE OPT RESULT... pose... rotation: {:?}, translation: {:?},", recovered_pose.get_rotation(), recovered_pose.get_translation());
        println!("POSE OPT RESULT... velocity {:?}", recovered_velocity);
        println!("POSE OPT RESULT... biases: {:?}", recovered_bias);

        // Recover Hessian, marginalize keyFframe states and generate new prior for frame
        let mut h = nalgebra::SMatrix::<f64, 15, 15>::zeros();
        h.view_mut((0, 0), (9, 9)).add_assign(&optimizer.get_hessian2_from_edge_inertial(0).into());
        h.view_mut((9, 9), (3, 3)).add_assign(&optimizer.get_hessian2_from_edge_gyro().into());
        h.view_mut((12, 12), (3, 3)).add_assign(&optimizer.get_hessian2_from_edge_acc().into());
        println!("H is: {:?}", h);

        let mut i = 0;
        for mut edge in optimizer.pin_mut().get_mut_mono_onlypose_edges().iter_mut() {
            let idx = mp_indexes[i];
            if !frame.mappoint_matches.is_outlier(&idx) {
                h.view_mut((0, 0), (6, 6)).add_assign(&edge.inner.pin_mut().get_hessian().into());
            }
            i += 1;
        }
        println!("new H is: {:?}", h);


        assert_eq!(1, -1); // just to get output
    }

    // #[test]
    fn set_imu_pose_velocity() {
        load_config_files();
        let pose = Pose::new(
            Vector3::new(0.78944295644760132, 0.76480811834335327, 0.20717731118202209),
            Matrix3::new(
            -0.02788255363702774 ,   0.9973219633102417, -0.067614242434501648,
            0.33505344390869141  ,0.073052100837230682,   0.93936282396316528,
            0.94178646802902222 ,0.0035374523140490055 , -0.33619296550750732,
            )
        );

        println!("Inverse: {:?}", pose.inverse());
        println!("Tcb: {:?}", ImuCalib::new().tcb * pose.inverse());
        assert_eq!(1, -1);
    }

    // #[test]
    fn test_predict_state_last_keyframe() {
        load_config_files();

        let twb1 = Vector3::new(0.289, 0.020, -0.088);
        let rwb1 = Matrix3::new(
            0.041,  0.967,  0.251,
            0.284,  0.229, -0.931,
            -0.958,  0.109, -0.265,
        );
        let vwb1 = Vector3::new(-0.090, -0.036, -0.055);

        let gz = Vector3::new(0.0, 0.0, -GRAVITY_VALUE);
        let t12 = 0.100;

        let delta_rot = Matrix3::new(
            0.9999820709972063, 0.0008516362992555537, -0.005927259042183081,
            -0.0008203091847354127, 0.9999856941983858, 0.005285687411753268,
            0.005931675731257389, -0.0052807304596162175, 0.9999684640571586
        // 0.9999820709972063, -0.0008203091847354127, 0.005931675731257389,
        // 0.0008516362992555537, 0.9999856941983858, -0.0052807304596162175,
        // -0.005927259042183081, 0.005285687411753268, 0.9999684640571586
        );
        let delta_pos = Vector3::new(0.045, 0.0009, -0.017);
        let delta_vel = Vector3::new(0.092399372924096, -0.003987202057646202, -0.33174207575739134);

        // let twb1 = Vector3::new(-0.076105348765850067, -2.2276792526245117, 0.41877233982086182);
        // let rwb1 = Matrix3::new(
        //     -0.014802932739257812  , 0.99908292293548584 ,-0.040174867957830429,
        //     0.28991818428039551 , 0.042741954326629639 ,  0.95609647035598755,
        //     0.95693683624267578 ,0.0025057292077690363, -0.29028499126434326
        // );
        // let vwb1 = Vector3::new(-0.02129179984331131, 0.010835034772753716 ,-0.32680156826972961);

        // let gz = Vector3::new(0.0, 0.0, -GRAVITY_VALUE);
        // let t12 = 0.049999713897705078;

        // let delta_rot = Matrix3::new(
        //     0.99992954730987549,  0.0025707951281219721, -0.011586366221308708,
        //     -0.0025363536551594734, 0.99999237060546875, 0.0029836783651262522,
        //     0.011593963019549847, -0.0029541286639869213, 0.99992835521697998
        // );
        // let delta_pos = Vector3::new(0.0086059132590889931,-0.00016054169100243598, -0.0025186375714838505);
        // let delta_vel = Vector3::new(0.3482382595539093, -0.0067207436077296734,  -0.10927820950746536);

        let rwb2 = *normalize_rotation(rwb1 * delta_rot);
        let twb2 = twb1 + vwb1*t12 + (0.5*t12*t12*gz) + (rwb1 * delta_pos);
        let vwb2 = vwb1 + t12 * gz + rwb1 * delta_vel;


        println!("twb1: {:?}", twb1);
        println!("rwb1: {:?}", rwb1);
        println!("vwb1: {:?}", vwb1);
        println!("t12: {:?}", t12);
        println!("delta rot: {:?}", delta_rot);
        println!("delta pos: {:?}", delta_pos);
        println!("delta vel: {:?}", delta_vel);

        println!();
        println!("Rwb2: {:?}", rwb2);
        println!("twb2: {:?}", twb2);
        println!("Vwb2: {:?}", vwb2);


        let new_pose = Pose::new(twb2, rwb2).group_inverse();

        println!();
        println!("RESULT velocity: {:?}", vwb2);
        println!("RESULT rotation: {:?}", rwb2);

        println!("RESULT translation before group inverse: {:?}", Pose::new(twb2, rwb2));
        println!("RESULT translation before multiply: {:?}", new_pose);
        println!("RESULT translation after: {:?}", ImuCalib::new().tcb * new_pose);

        println!();


        // EXPECTED:
        // Rwb2: -0.017801703885197639   0.99915611743927002 -0.037019573152065277
        // 0.30087423324584961  0.040662523359060287   0.95279651880264282
        // 0.95349758863449097 0.0058231628499925137  -0.30134415626525879
        // twb2: -0.077356532216072083   -2.2270574569702148    0.3991360068321228
        // Vwb2: -0.028771089389920235 0.0070278691127896309  -0.45235177874565125


        assert_eq!(-1, 1);

    }

    // #[test]
    fn test_set_imu_pose_velocity() {
        let mut system_config = env::current_dir().unwrap();
        system_config.push("orbslam_config.yaml");
        let mut dataset_config = env::current_dir().unwrap();
        dataset_config.push("config_datasets/EUROC.yaml");
        let _ = load_config(
            &system_config.into_os_string().into_string().unwrap(),
            &dataset_config.into_os_string().into_string().unwrap()
        ).expect("Could not load config");

        let mut frame = Frame::new_no_features(1, None, 1.0, None).expect("Could not create frame!");
        frame.set_imu_pose_velocity(
            Pose::new(
                Vector3::new(0.04427526518702507, 0.014617485925555229,  0.16934683918952942),
                Matrix3::new(-0.013555065728724003, 0.99869793653488159, -0.049184534698724747,
                    0.29258990287780762, 0.05099768191576004, 0.95487731695175171,
                    0.95614206790924072,  -0.0014474884374067187, -0.29290005564689636
                )
            ),
            Vector3::new(4.0, 5.0, 6.0)
        );

        println!("result translation: {:?}", frame.pose.unwrap().get_translation());
        println!("result rotation: {:?}", frame.pose.unwrap().get_rotation());

        // EXPECTED:
        // translation: 0.01708829402923584  0.1443430632352829 0.02791847288608551
        // rotation:   0.99932175874710083   0.03071308322250843  0.020315906032919884
        // 0.02831624262034893  -0.28820514678955078   -0.9571499228477478
        // -0.023541878908872604   0.95707601308822632  -0.28887927532196045
   
        assert_eq!(1,-1); // just to get output from above, the actual assert doesn't matter
    }

    // #[test]
    fn test_update_frame_imu() {
        let gz = nalgebra::Vector3::new(0.0, 0.0, -GRAVITY_VALUE);
        let twb1 = nalgebra::Vector3::new(0.043944559991359711, 0.014681989327073097, 0.18302075564861298);
        let rwb1 = nalgebra::Matrix3::new(
        -0.0066180229187011719,     0.9985160231590271,  -0.054057840257883072,
        0.28045958280563354,   0.053742527961730957,    0.95836031436920166,
        0.95984315872192383, -0.0088187279179692268,   -0.28039908409118652
        );
        let vwb1 = nalgebra::Vector3::new( 0.011901642195880413, -0.015045445412397385, -0.22826705873012543);
        let t12 = 0.050000190734863281;

        let delta_rot = nalgebra::Matrix3::new(
        0.9999082088470459,  0.0061537628062069416,  -0.012043275870382786,
        -0.0060982056893408298,    0.99997037649154663,  0.0046455073170363903,
        0.012071588076651096, -0.0045717405155301094,    0.99991637468338013,
        );
        let delta_pos = nalgebra::Vector3::new(0.0085019767284393311, 6.4905257204372901e-06, -0.0022448110394179821);
        let delta_vel = nalgebra::Vector3::new(0.34468531608581543, -0.00065375061240047216, -0.087426729500293732);

        let first = normalize_rotation(rwb1 * delta_rot);
        let second = twb1 + vwb1 * t12 + 0.5 * t12 * t12 * gz + rwb1 * delta_pos;
        let third = vwb1 + gz * t12 + rwb1 * delta_vel;

        println!("First: {:?}", first);
        println!("Second: {:?}", second);
        println!("Third: {:?}", third);
        

        // EXPECTED:
        // first:  -0.013359141536056995    0.99869292974472046  -0.049334701150655746
        //     0.2916751503944397   0.051085446029901505    0.95515233278274536
        //     0.95642423629760742 -0.0016296894755214453   -0.29197633266448975
        // second: 0.044611208140850067
        // 0.014163186773657799
        // 0.16813471913337708
        // third:   0.013693826273083687
        // -0.0021965913474559784
        // -0.36340495944023132
        assert_eq!(1, -1); // just to get output from above, the actual assert doesn't matter

    }

    // #[test]
    fn test_apply_scaled_rotation() {
        let t = Pose::new(
            Vector3::new(0.0, 0.0, 0.0),
            Matrix3::new(
            0.99802708625793457,  0.049260139465332031 ,-0.038928128778934479,
            0.056640125811100006, -0.43887817859649658  , 0.89675945043563843,
            0.027089789509773254,  -0.89719510078430176,  -0.44080233573913574,
            )
        );
        let s = 6.1029448509216309;

        let old_velocity = Vector3::new(0.002648587804287672, 0.062408339232206345, 0.033924948424100876);
        let old_pose = Pose::new(
            Vector3::new(-0.00072055746568366885 ,  -0.015388553962111473 ,  -0.006493755616247654),
            Matrix3::new(
                0.99903744459152222  ,0.038806568831205368 ,-0.020450692623853683,
                -0.038588084280490875  , 0.99919497966766357 , 0.010972167365252972,
                0.020860021933913231 , -0.01017245277762413 ,  0.99973064661026001,
            )
        );

        let mut twc = old_pose.group_inverse().clone();
        let twc_trans = twc.get_translation();
        twc.set_translation(nalgebra::Vector3::new(twc_trans[0] * s, twc_trans[1] * s, twc_trans[2] * s)); // just scaling translation by s
        let tyc = t * twc;
        let tcy = tyc.group_inverse();
        let new_pose = tcy;
        let new_velocity = DVVector3::new(*t.get_rotation() * old_velocity * s);

        let expected_new_vel = Vector3::new(0.026834471151232719 ,0.019424915313720703, -0.43254566192626953);
        let expected_new_trans = Vector3::new(-0.0043975226581096649 , -0.093915477395057678 ,  -0.03963104635477066);
        let expected_new_rot = Matrix3::new(
        0.99977415800094604,  0.021214896813035011, 0.0012613671133294702,
        0.010281410999596119  ,-0.43087124824523926  ,  -0.902354896068573,
            -0.018599878996610641 ,   0.9021640419960022,  -0.43099212646484375,
        );


        assert_eq!(*new_pose.get_translation(), expected_new_trans);
        assert_eq!(*new_pose.get_rotation(), expected_new_rot);
        assert_eq!(new_velocity.transpose(), expected_new_vel.transpose());
    }

    // #[test]
    fn test_update_frame_imu_old() {
    //     // Not doing this because it's too annoying to do it the legit way, but code is here if you ever need it later
    //     // Just spawn tracking
    //     // let writeable_map = ReadWriteMap::<crate::map::map::Map>::new(crate::map::map::Map::new()); 
    //     // let map_clone = writeable_map.clone();
    //     // let (tx, rx) = unbounded();
    //     // let mut transmitters = HashMap::new();
    //     // transmitters.insert("TRACKING_BACKEND".to_string(), tx);
    //     // let system = System {receiver: rx, receiver_bound: Some(10), actors: transmitters, my_name: "TRACKING_BACKEND".to_string()};
    //     // let mut tracking = TrackingBackend::new_test(system, map_clone);

    //     // Fake keyframe 
    //     struct KeyFrameDummy {
    //         id: Id,
    //         parent: Option<Id>,
    //         imu_data: ImuDataFrame,
    //         pose: Pose,
    //         imu_position: Option<DVVector3<f64>>,
    //     }
    //     impl KeyFrameDummy {
    //         pub fn get_imu_rotation(&self) -> DVMatrix3<f64> {
    //             // Eigen::Matrix3f KeyFrame::GetImuRotation()
    //             // Note: in Orbslam this is: (mTwc * mImuCalib.mTcb).rotationMatrix();
    //             // and mTwc is inverse of the pose
    //             (self.pose.inverse() * ImuCalib::new().tcb).get_rotation()
    //         }
    //         pub fn get_imu_position(&self) -> DVVector3<f64> {
    //             // Eigen::Vector3f KeyFrame::GetImuPosition()
    //             self.imu_position.expect("IMU position not set")
    //         }
    //     }

    //     // Copy of update frame imu that doesn't use tracking backend or map objects
    //     fn update_frame_imu_copy(
    //         // original variables to update_frame_imu
    //         scale: f64, imu_bias: ImuBias, current_kf_id: Id,
    //         // varialbes inside `self` ( tracking backend )
    //         trajectory_poses: Vec<Pose>, reference_kfs_for_trajectory: Vec<(Id, Option<Id>)>,
    //         current_frame: &mut Frame, last_frame: &mut Frame,
    //         // Fake map
    //         keyframes_in_map: HashMap<Id, KeyFrameDummy>, last_kf_id: Id
    //     ) {
    //         for i in 0..trajectory_poses.len() {
    //             let mut pose = trajectory_poses[i];
    //             let (mut kf, mut parent) = reference_kfs_for_trajectory[i];

    //             while keyframes_in_map.get(& kf).is_none() {
    //                 println!("KF deleted, finding parent {} {:?}", kf, parent);
    //                 if parent.is_none() {
    //                     break;
    //                 } else {
    //                     let parent_kf = keyframes_in_map.get(& parent.unwrap()).unwrap();
    //                     kf = parent_kf.id;
    //                     parent = parent_kf.parent;
    //                 }

    //             }

    //             pose.set_translation(*pose.get_translation() * (scale));
    //             println!("NEW TRANSLATION FOR KF {}: {:?}", kf, pose.get_translation());
    //         }
    //         // imu.last_bias = Some(imu_bias);
    //         last_frame.imu_data.set_new_bias(imu_bias);
    //         current_frame.imu_data.set_new_bias(imu_bias);

    //         // if(mLastFrame.mnId == mLastFrame.mpLastKeyFrame->mnFrameId)
    //         let last_kf = keyframes_in_map.get(&last_kf_id).unwrap();
    //         if last_frame.frame_id == last_kf_id {
    //             last_frame.set_imu_pose_velocity(
    //             Pose::new(
    //                 * last_kf.get_imu_position(),
    //                 * last_kf.get_imu_rotation(),
    //             ),
    //             * last_kf.imu_data.get_velocity()
    //             );
    //         } else {
    //             let gz = nalgebra::Vector3::new(0.0, 0.0, -GRAVITY_VALUE);
    //             let twb1 = * last_kf.get_imu_position();
    //             let rwb1 = * last_kf.get_imu_rotation();
    //             let vwb1 = * last_kf.imu_data.get_velocity();
    //             let t12 = last_kf.imu_data.imu_preintegrated.as_ref().unwrap().d_t;

    //             let delta_rot = last_kf.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_rotation();
    //             let delta_pos = last_kf.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_position();
    //             let delta_vel = last_kf.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_velocity();
    //             last_frame.set_imu_pose_velocity(
    //                 Pose::new(
    //                     twb1 + vwb1 * t12 + 0.5 * t12 * t12 * gz + rwb1 * delta_pos,
    //                     * normalize_rotation(rwb1 * delta_rot),
    //                 ),
    //                 vwb1 + gz * t12 + rwb1 * delta_vel
    //             );

    //         }

    //         if current_frame.imu_data.imu_preintegrated.is_some() {
    //             let last_kf = keyframes_in_map.get(&last_kf_id).unwrap();
    //             let gz = nalgebra::Vector3::new(0.0, 0.0, -GRAVITY_VALUE);
    //             let twb1 = * last_kf.get_imu_position();
    //             let rwb1 = * last_kf.get_imu_rotation();
    //             let vwb1 = * last_kf.imu_data.get_velocity();
    //             let t12 = last_kf.imu_data.imu_preintegrated.as_ref().unwrap().d_t;

    //             let delta_rot = current_frame.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_rotation();
    //             let delta_pos = current_frame.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_position();
    //             let delta_vel = current_frame.imu_data.imu_preintegrated.as_ref().unwrap().get_updated_delta_velocity();

    //             current_frame.set_imu_pose_velocity(
    //                 Pose::new(
    //                     twb1 + vwb1 * t12 + 0.5 * t12 * t12 * gz + rwb1 * delta_pos,
    //                     * normalize_rotation(rwb1 * delta_rot),
    //                 ),
    //                 vwb1 + gz * t12 + rwb1 * delta_vel
    //             );
    //         }
    //     }

    //     // Test!!!!!!!
    //     let mut trajectory_poses = vec![];
    //     let mut reference_kfs_for_trajectory = vec![];
    //     let mut last_frame = Frame::new_no_features(
    //         1, None, 1.0, None
    //     ).expect("Could not create frame!");
    //     let mut current_frame = Frame::new_no_features(
    //         2, None, 2.0, Some(&last_frame)
    //     ).expect("Could not create frame!");

    //     let mut keyframes_in_map = HashMap::new();
    //     keyframes_in_map.insert(
    //         0, 
    //         KeyFrameDummy {
    //             id: 0,
    //             parent: None,
    //             imu_data: todo!(),
    //             pose: todo!(),
    //             imu_position: todo!(),
    //         }
    //     );
    //     let last_kf_id = 0;

    //     let scale = 1.0;
    //     let imu_bias: ImuBias = ImuBias::new();
    //     let current_kf_id = 0;
    //     update_frame_imu_copy(
    //         scale, imu_bias, current_kf_id,
    //         trajectory_poses, reference_kfs_for_trajectory,
    //         &mut current_frame, &mut last_frame,
    //         keyframes_in_map, last_kf_id
    //     );



    }

    // #[test]
    fn test_marginalize() {
        let h: SMatrix<f64, 30, 30> = SMatrix::from_row_slice( &[
            1409653425.605258, -157925.20366498124, 433109.99924061075, -251811.56264187914, 18175117.822994057, -3052667.1651555551, 83954.789086428471, 28244.117806185241, -11930.041958855862, -34601888.694164373, 841.22228690591112, 110491.28263056338, 0.46179786699983727, -31415.947372419618, 1914.7446914301227, -691985234.34611976, -208685.77016597879, 4716848.9384564962, 24381.149647075334, -23594496.914596178, 2552919.3819195936, -34047.306940108516, -26833.648672898653, 13103.545082655946, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -157925.20366497975, 1401139936.2476735, 537058.56551037938, -26212634.314240307, -348259.37612781068, -85566173.78263779, 30731.096713514999, -197859.6851138724, 7896.652013420844, -490.72238549854137, -34601982.542025186, 85341.554847513966, 31534.333444371565, 100.10332402075498, 61843.92300656077, 233007.09443818039, -691825017.66461134, 2700624.8968493748, 23898962.207036488, 179742.1433449226, 43924892.438856386, -22228.251620532734, 136065.29350218567, -30530.491518936833, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            433109.99924059457, 537058.56551038357, 1389093838.3222625, 6079422.4235847546, 85292542.378789037, 598656.40000335407, 178504.89095070679, 19176.731958993827, -22960.30485359858, -110479.08270994389, -85347.809335531681, -34601768.396997713, -1867.0668726559061, -61901.334849854422, 103.70774481272927, -4546472.052877469, -2705289.2941432344, -691852073.57882893, -2445883.2982383543, -44084691.974231966, 188811.42287413738, -135049.887394163, -9139.5952633680336, 27223.554249892975, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -251811.56264187666, -26212634.314240318, 6079422.4235847611, 48524187528.995911, 234759.11933362976, 6184692.6901352275, -111.93018705397844, 8338.6695448756218, -1975.2477566599846, -32.509973583791535, 15.18917614713153, -91.070929168770732, -112.23005379276066, 358.76062720013607, -33445.419617630505, -9913.0672755150481, 22026959.481271461, -476297.4452293606, -24241816540.388229, -7412525.5900076693, 162619252.60160899, -20578580.055134397, 286714379.04590833, 533552162.34934789, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            18175117.822994061, -348259.37612780725, 85292542.378789023, 234759.11933315397, 48530583278.093147, -4790411.2522401297, 17449.314392805099, 2677.7319578528404, 420.01948399841785, -858.68231056620664, -277.98443603879218, 387.2924467429001, -486.25249951129859, -455.93561418535165, -21287.614816291654, -22338014.400458977, -187594.56369537394, -46183542.346942663, 8072492.370088865, -24241497248.600368, 94678830.213341683, 598460069.81399333, 91826346.764867619, -26263242.854783271, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -3052667.1651555561, -85566173.782637775, 598656.40000335546, 6184692.6901361598, -4790411.2522403607, 48497063208.538696, -2988.9507472217083, 15417.263364732265, 789.91121661663055, -97.893933257088989, 2.7054555981407158, -218.08180544260313, 33071.501604713289, 21285.907646998374, -466.44042273838397, 375001.29285899666, 46332089.699794792, -183369.12940316513, -161921398.46392274, -94739992.618964985, -24241136114.678276, -93265321.895166323, 525965320.94536734, -286261858.75949806, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            83954.789086427772, 30731.096713514999, 178504.89095070492, -111.93018706515431, 17449.31439268589, -2988.9507472217083, 40300439.793432236, -2.6436544974269767, -2.1200667007984624, 41.121125719609381, 30.159741207626187, -26.851909831927344, 8450.6709856365105, -246843.79831411681, 38508.809921443819, -47995.620496551142, -21914.72298185647, -126543.25111489077, 21402739.216669865, -598101011.55308127, 95464369.337360293, 10151781.611815715, -2.1580594767612364, -8.8643967127791825, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            28244.11780618543, -197859.68511387054, 19176.731958993885, 8338.6695448756218, 2677.7319578826427, 15417.263364672661, -2.6436544950249967, 40300448.805717096, 37.736131170224034, 6.3287108297376857, 5.1192744313620624, 32.384574470654293, -118163.97069630156, -37898.067758020843, -216997.14795866169, -12045.771212480047, 134318.48376559321, -17426.163717913776, -290204339.12065947, -93971552.376920775, -523686518.56394017, -2.1757345547888853, 10151788.253988776, -18.521259911596889, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -11930.041958855803, 7896.6520134206949, -22960.304853598522, -1975.2477566599846, 420.01948399841785, 789.91121661663055, -2.1200667007785601, 37.736131166834639, 40303067.707721375, -0.47427888332370449, -0.4073620403061049, -0.35300986356190972, -220142.92439925243, 10866.737718416638, 117977.72667914364, 4642.7429225766646, -17837.306713501766, 10195.140070687577, -531630159.57855338, 27218902.236824848, 289721905.8662914, -0.22139356027103729, -3.7100766554645932, 10151540.752232367, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -34601888.694164358, -490.7223854985059, -110479.08270994465, -32.509973583760782, -858.68231056620527, -97.893933257103541, 41.121125719604429, 6.3287108297419765, -0.47427888332355872, 79770215703.142944, -3.7011797358817224, -0.10527099348330964, -0.10012109712248157, -3.1529649498497889, -0.083534747781162558, 34601854.047998212, 11521.405551282707, -121134.3286925585, 32.878958375626233, 859.06823876045144, 94.319550187407145, -82.710222763836612, -17.851139483736329, 3.2157562855707909, -26589498471.930256, 0.0,  0.0,  0.0,  0.0,  0.0, 
            841.22228690587838, -34601982.542025179, -85347.809335531783, 15.189176146891167, -277.98443603875796, 2.7054555990720384, 30.159741207618818, 5.1192744314245928, -0.40736204032704121, -3.7011797358801464, 79770215705.959229, 0.25145274509986226, -0.033007430693506833, -1.87626845939535, 0.0082651526897724471, -11765.764441098068, 34602049.862700909, -49781.172057879186, -15.299376907515665, 277.96707515844963, -3.6894411657405835, -43.931868187648746, -6.7485902764514192, 1.6143935060219898, 0.0,  -26589498471.930256, 0.0,  0.0,  0.0,  0.0,
            110491.28263056425, 85341.55484751414, -34601768.396997727, -91.070929168657514, 387.29244674290004, -218.08180544261222, -26.851909831959937, 32.384574470654186, -0.35300986355826763, -0.10527099352402083, 0.25145274509328214, 79770215700.166748, -0.91560899808802476, 1.5593565564339087, -1.8940021918202794, 121126.35987666532, 49825.029862876305, 34601780.104382783, 92.657329788978473, -386.40932031792937, 218.97832480518102, 47.807226125405428, -41.068173766259349, 0.65543063520235501, 0.0,  0.0,  -26589498471.930256, 0.0,  0.0,  0.0,
            0.4617978670004777, 31534.33344437159, -1867.0668726559045, -112.23005379276053, -486.25249951112221, 33071.501604712037, 8450.6709856365178, -118163.97069630165, -220142.92439925263, -0.10012109712248751, -0.033007430694151393, -0.91560899808805229, 3345832.9046450192, -0.028900279906921143, -0.76509295989940262, -11.020405689944544, 25314.876443836616, -848.24189400252828, -109.28479264720764, 357.0411541779639, -33073.166545361732, -8728.9640452853382, 119592.73992927512, 219358.00383749593, 0.0,  0.0,  0.0,  -1111111.2823413683, 0.0,  0.0,
            -31415.947372419632, 100.10332402075598, -61901.334849854415, 358.76062720071172, -455.93561418535251, 21285.907646998301, -246843.7983141171, -37898.067758020814, 10866.737718416658, -3.152964949849129, -1.8762684593953964, 1.5593565564330987, -0.028900279906829352, 3345831.3648947864, 0.014549959852609606, -25449.236926090722, -51.665166414090159, -51327.461963973772, -501.37287790501972, 372.63781357130927, -21284.652407867281, 246656.88891911911, 38826.782711550586, -11352.657215439294, 0.0,  0.0,  0.0,  0.0,  -1111111.2823413683, 0.0, 
            1914.7446914301233, 61843.923006560741, 103.70774481272933, -33445.419617629668, -21287.614816292324, -466.44042273838397, 38508.809921443819, -216997.14795866178, 117977.7266791437, -0.083534747781158464, 0.0082651526916476918, -1.8940021918203307, -0.76509295989937853, 0.014549959852545613, 3345831.7486621165, 809.28378157580482, 51394.385354212478, -45.707827736990339, 33440.723457676104, 21299.519321939464, 159.38507575644653, -39499.513604089763, 216024.48499376717, -119392.77688380833, 0.0,  0.0,  0.0,  0.0,  0.0,  -1111111.2823413683,
            -691985234.34612, 233007.09443818114, -4546472.0528774867, -9913.0672755151463, -22338014.400458977, 375001.29285899713, -47995.620496551026, -12045.771212480018, 4642.7429225766437, 34601854.047998235, -11765.764441098105, 121126.35987666613, -11.02040568994442, -25449.236926090736, 809.28378157580437, 715591166.10261309, -83637.382912226283, 202382.72626097375, -91132.972938149309, -6088476.2610163074, 1261754.074145413, -1057815.62037509, -141149.03559345281, 34466.298569169601, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -208685.77016597948, -691825017.66461122, -2705289.2941432367, 22026959.481271461, -187594.56369537441, 46332089.699794799, -21914.722981856685, 134318.48376559396, -17837.306713502257, 11521.405551282745, 34602049.862700924, 49825.029862876429, 25314.876443836638, -51.66516641409023, 51394.385354212427, -83637.382912225527, 707651471.58098865, 717367.95737281349, -1533727.7967736491, -460638.99050413811, -43346297.541296005, -381257.69577333244, 2395844.1479967088, -106382.50794717438, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            4716848.9384565121, 2700624.8968493766, -691852073.57882881, -476297.44522935996, -46183542.346942663, -183369.12940316409, -126543.25111489059, -17426.163717913707, 10195.140070687565, -121134.32869255931, -49781.172057879303, 34601780.104382768, -848.24189400252749, -51327.461963973779, -45.707827736990744, 202382.72626095769, 717367.95737281116, 696217693.53749359, 1588442.3544360432, 42886956.91108764, 551321.48165263853, -2151555.8871455146, -351684.98478820588, 73239.5643826265, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            24381.149647072994, 23898962.207036495, -2445883.2982383589, -24241816540.388229, 8072492.3700884329, -161921398.4639228, 21402739.216669843, -290204339.12065941, -531630159.57855338, 32.878958375657106, -15.29937690723983, 92.657329789065813, -109.28479265008635, -501.37287790444537, 33440.723457676941, -91132.972938149425, -1533727.7967736453, 1588442.3544360439, 24280964249.772655, 242866.53254506559, 5618830.9013331793, 21401344.47542334, -290197838.74113303, -531633111.58905131, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -23594496.914596185, 179742.14334491771, -44084691.974231981, -7412525.590007239, -24241497248.600368, -94739992.618964538, -598101011.55308139, -93971552.376920775, 27218902.236824851, 859.06823876085514, 277.96707515848601, -386.40932031783143, 357.04115417813648, 372.63781357384966, 21299.519321938787, -6088476.261016313, -460638.99050413858, 42886956.91108764, 242866.53254463235, 24287915095.778584, -4202874.2330047833, -598084692.37903285, -93968918.993318707, 27218299.29089988, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            2552919.3819195959, 43924892.438856415, 188811.42287413715, 162619252.60160905, 94678830.213341236, -24241136114.678276, 95464369.337360308, -523686518.56394029, 289721905.86629146, 94.319550187390263, -3.6894411654344474, 218.97832480517718, -33073.166545362976, -21284.652407867306, 159.38507576296061, 1261754.074145413, -43346297.541295998, 551321.48165263957, 5618830.901333157, -4202874.2330043111, 24253628700.648849, 95462239.942600131, -523671615.73487186, 289722552.92587316, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -34047.30694010821, -22228.251620532483, -135049.88739416216, -20578580.055134401, 598460069.81399333, -93265321.895166337, 10151781.611815721, -2.1757345542630566, -0.22139356012097519, -82.710222763831098, -43.931868187657294, 47.807226125413244, -8728.9640452853455, 246656.88891911905, -39499.513604089749, -1057815.6203750896, -381257.69577333255, -2151555.8871455146, 21401344.47542334, -598084692.37903273, 95462239.942600161, 20149854.458676916, -2.4739717386322133, 48.031494049504786, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            -26833.648672898798, 136065.29350218398, -9139.5952633680154, 286714379.04590833, 91826346.764867619, 525965320.94536734, -2.1580594775127651, 10151788.253988776, -3.7100766531603462, -17.851139483731199, -6.7485902764214263, -41.068173766259136, 119592.73992927505, 38826.782711550615, 216024.48499376711, -141149.03559345275, 2395844.1479967092, -351684.98478820588, -290197838.74113303, -93968918.993318707, -523671615.73487192, -2.4739717378630157, 20149868.624856465, 78.010575657247088, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            13103.54508265601, -30530.491518937619, 27223.554249893121, 533552162.34934789, -26263242.854783259, -286261858.75949806, -8.8643967121406106, -18.521259909379552, 10151540.752232367, 3.2157562855694866, 1.6143935060221246, 0.65543063519847389, 219358.00383749566, -11352.657215439312, -119392.77688380834, 34466.298569169587, -106382.5079471747, 73239.564382626486, -531633111.58905131, 27218299.290899865, 289722552.92587322, 48.031494049775475, 78.010575657396387, 20151633.740759619, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -26589498471.930256, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  26589498471.930256, 0.0,  0.0,  0.0,  0.0,  0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -26589498471.930256, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  26589498471.930256, 0.0,  0.0,  0.0,  0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -26589498471.930256, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  26589498471.930256, 0.0,  0.0,  0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1111111.2823413683, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1111111.2823413683, 0.0,  0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1111111.2823413683, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1111111.2823413683, 0.0, 
            0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  -1111111.2823413683, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1111111.2823413683,
        ]);
        let start = 0;
        let end = 14;
        let res = crate::modules::optimizer::marginalize(h, start, end);

        let expected_res: DMatrix<f64> = DMatrix::from_row_slice(30, 30, &[
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 247802161.63252604, 856019.51508638763, -2686650.900104749, 126885.66769950945, 1192994.5708984584, -176045.88919518504, -707410.90956322197, 43196.265236431529, -317.80567825551202, 4729163.4560815962, 1734.3184994588501, 15272.112439856453, 0.18682116518730935, -12369.886349193312, 500.21224757408373,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 856019.51508638076, 243919280.69613683, 818649.16940728412, -2202085.2458218932, -175568.76423011208, -14503362.261961915, 61673.183598330528, 2133812.5053304215, 34099.418214994541, 6175.8442327962111, 4704230.7193555851, 5802.4012149240416, 12221.773735321345, 3.774633693013052, 33154.500045183195,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2686650.900104682, 818649.1694072932, 234348132.90052003, 260901.15916995436, 14539006.481400628, 56983.127631940981, -2017137.6352322886, 44673.255466592258, -579.96114882401707, -41067.143479198188, -794.81649562433029, 4642099.4395280015, -500.83593219137157, -33212.300001283307, -31.99168877209312,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 126885.66769950872, -2202085.2458219007, 260901.15916995448, 889172704.56943512, 8617.1212061054721, 278323.66807630472, -1357876.2439736612, -21504167.540680766, -62887076.648847461, 1025.476833955548, -4586.4770398077953, -315.81820579037566, -885311.39112602652, 402.17622490172022, -4959.0710006806039,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1192994.5708984695, -175568.76423011342, 14539006.481400628, 8617.1212064400916, 889403628.30568695, -289189.65226430329, -66438732.004551291, 1801740.6190144718, 818307.97797237616, -5524.2490551391984, -1500.4098523358082, 85969.674922520222, -394.99159688993404, -885136.98059128365, -529.17572903887731,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -176045.88919518492, -14503362.261961885, 56983.127631940035, 278323.66807765875, -289189.65226456831, 887863035.9564743, -1427225.2830997128, -62849588.789840519, 21513122.752397746, 2596.6113236974638, -84530.780913546507, 689.2419754281118, 5017.7659208327159, 571.95472019213821, -885046.77180443844,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -707410.9095632222, 61673.183598330594, -2017137.6352322891, -1357876.2439736705, -66438732.00455153, -1427225.283099724, 6636913.0050419625, -186.78831969275055, 69.59962941876293, -5869.7242222128698, 616.3646582039072, -19137.388178573889, 2066.3828851651838, 99457.857459276289, 2225.4228957925948,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 43196.265236431558, 2133812.5053304224, 44673.255466592294, -21504167.540680945, 1801740.6190144829, -62849588.789840519, -186.78831969296846, 6636415.7631766945, 351.80239400639039, 375.53976928655362, 19941.019604222707, 420.41510877660556, 31618.820528318633, -2768.4708673059163, 94304.032825269329,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -317.8056782554952, 34099.418214994534, -579.96114882402799, -62887076.64884764, 818307.97797238175, 21513122.752397954, 69.599629418751931, 351.80239400269727, 6639445.285624329, -14.903774685664112, -217.95391454898157, -2.9848450693971054, 94370.899925525548, -1251.7705558723064, -31676.740883548846,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4729163.4560815971, 6175.8442327966777, -41067.143479199214, 1025.4768339555678, -5524.2490551394358, 2596.6113236974929, -5869.7242222128698, 375.5397692865518, -14.903774685664455, 10635895535.985725, 78.107379320772466, -276.80506740279935, 0.15689613991654694, -120.30924774710827, 5.8727330877870427,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1734.3184994589053, 4704230.7193555888, -794.8164956249193, -4586.4770398075852, -1500.4098523357743, -84530.780913547176, 616.3646582039072, 19941.019604222693, -217.95391454898612, 78.107379256905929, 10635894967.159159, 51.169038733417352, 120.6738806501188, 0.53257526802226762, 337.44344398270221,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15272.112439857068, 5802.4012149245709, 4642099.4395280099, -315.81820579039885, 85969.674922520557, 689.24197542809702, -19137.388178573896, 420.41510877660602, -2.9848450693968314, -276.80506732678958, 51.169038454526472, 10635893732.475983, -5.4842487288702175, -339.81731312667483, -0.22998697768570711,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18682116518708611, 12221.773735321334, -500.83593219137157, -885311.39112602663, -394.99159688997304, 5017.7659208327232, 2066.3828851651842, 31618.820528318589, 94370.899925525577, 0.15689613991654491, 120.67388065011866, -5.484248728870214, 445992.82554635929, -0.015383746741206785, -0.28535650558028652,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -12369.886349193308, 3.7746336930154025, -33212.300001283293, 402.17622490176274, -885136.98059128353, 571.95472019222973, 99457.857459276231, -2768.4708673059113, -1251.7705558723085, -120.30924774710823, 0.53257526802226141, -339.81731312667461, -0.01538374674001447, 445992.0449321217, 0.0027838248611634785,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 500.2122475740843, 33154.500045183202, -31.991688772091983, -4959.07100068004, -529.17572903890925, -885046.77180443995, 2225.422895792587, 94304.032825269271, -31676.740883548828, 5.8727330877870569, 337.44344398270226, -0.2299869776856909, -0.28535650560354686, 0.0027838248757636797, 445992.12646004447,
        ]);

        assert_eq!(res, expected_res);

    }

    // #[test]
    fn test_group_exp() {
        let vzg = nalgebra::Vector3::new(1.9862374067306519, 0.066213145852088928   , 0.0);
        let quat = group_exp(& vzg);
        let mat = * quat.to_rotation_matrix().matrix();

        assert_eq!(
            mat,
            nalgebra::Matrix3::<f64>::new(
                0.99844080209732056, 0.046771813184022903, 0.030468568205833435,
                0.046771813184022903, -0.40304350852966309,  -0.91398477554321289,
                -0.030468568205833435,  0.91398477554321289,  -0.40460264682769775,
            )
        );
    }

    fn test_get_imu_position() {
        let mut frame = Frame::new_no_features(
            1, None, 1.0, None
        ).expect("Could not create frame!");
        frame.pose = Some(Pose::new(
            nalgebra::Vector3::new(0.0, 0.0, 0.0),
            nalgebra::Matrix3::new(
                1.0, 0.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 0.0, 1.0
            )
        ));

        frame.get_imu_position();
    }

    // #[test]
    fn test_set_pose() {
        let mut system_config = env::current_dir().unwrap();
        system_config.push("orbslam_config.yaml");
        let mut dataset_config = env::current_dir().unwrap();
        dataset_config.push("config_datasets/EUROC.yaml");
        let _ = load_config(
            &system_config.into_os_string().into_string().unwrap(),
            &dataset_config.into_os_string().into_string().unwrap()
        ).expect("Could not load config");

        let mut frame = Frame::new_no_features(
            1, None, 1.0, None
        ).expect("Could not create frame!");

        let rot = nalgebra::Matrix3::new(
        0.99875575304031372, -0.044571500271558762, -0.022366957738995552,
        0.043374180793762207, 0.99773430824279785, -0.051428589969873428,
        0.024608531966805458, 0.050394453108310699, 0.99842619895935059
        );

        let trans = nalgebra::Vector3::new(
            0.014522586017847061, 0.19346439838409424,0.075992681086063385
        );
        frame.pose = Some(Pose::new(trans, rot));
        let kf = KeyFrame::new(frame, 1, 1, true);

        println!("frame: {:?}", kf.get_imu_position());
        assert!(
            *kf.get_imu_position() -
            nalgebra::Vector3::new(0.039279468357563019, -0.22018085420131683, -0.074034512042999268) <
            nalgebra::Vector3::new(1e-6, 1e-6, 1e-6)
        );

    }

    // #[test]
    fn test_construct_rwg() {
        let rwg; // mRwg
        let mut dir_g: Vector3<f64> = Vector3::zeros(); // dirG

        struct KeyFrameDummy {
            id: Id,
            imu_position: nalgebra::Vector3<f64>,
            prev_kf_imu_rotation: nalgebra::Matrix3<f64>,
            prev_kf_imu_position: nalgebra::Vector3<f64>,
            updated_delta_velocity: nalgebra::Vector3<f64>,
            d_t: f64,
        }
        let keyframes: Vec<KeyFrameDummy> = vec![
            KeyFrameDummy {
                id: 44,
                imu_position: nalgebra::Vector3::new(0.064443759620189667, 0.0016115475445985794, 0.0020114034414291382),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.014865398406982422, 0.9995572566986084, -0.025774437934160233,
                    -0.99988096952438354,  0.014967083930969238, 0.0037561894860118628,
                    0.0041402950882911682,  0.025715531781315804,   0.99966073036193848
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.065222904086112976,  -0.020706389099359512, -0.0080546028912067413),
                updated_delta_velocity: nalgebra::Vector3::new(0.97671890258789062, -0.001049284590408206, -0.44334658980369568),
                d_t: 0.10000014305114746
            },
            KeyFrameDummy {
                id: 45,
                imu_position: nalgebra::Vector3::new(0.062968924641609192,0.030613351613283157,0.014570681378245354),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.046516299247741699 ,  0.99800312519073486 ,-0.042735561728477478,
                    -0.99863743782043457 , 0.047474026679992676 , 0.021674863994121552,
                    0.023660413920879364,  0.041669085621833801 ,  0.99885129928588867
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.064443759620189667,0.0016115475445985794,0.0020114034414291382),
                updated_delta_velocity: nalgebra::Vector3::new(3.1740756034851074,-0.0074799382127821445,   -1.4652607440948486),
                d_t: 0.29999995231628418
            },
            KeyFrameDummy {
                id: 46,
                imu_position: nalgebra::Vector3::new(0.061159200966358185, -0.0080592501908540726,-0.00043367152102291584),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.053050458431243896 ,  0.99718391895294189 ,-0.053009651601314545,
                    -0.99719446897506714,  0.055708885192871094 , 0.049997903406620026,
                    0.052810214459896088 , 0.050208516418933868  ,  0.9973415732383728,
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.062968924641609192,0.030613351613283157,0.014570681378245354),
                updated_delta_velocity: nalgebra::Vector3::new(2.665168285369873,-0.099234789609909058,  -1.3247029781341553),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 47,
                imu_position: nalgebra::Vector3::new(0.061743244528770447,-0.072799377143383026,-0.027681313455104828),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.038724839687347412 ,  0.99706417322158813 ,-0.066057860851287842,
                    -0.99729031324386597 , 0.042702555656433105 , 0.059906039386987686,
                    0.062551006674766541,  0.063558995723724365 ,  0.99601584672927856,                
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.061159200966358185, -0.0080592501908540726,-0.00043367152102291584),
                updated_delta_velocity: nalgebra::Vector3::new(2.2120797634124756,-0.011208789423108101,  -1.1418012380599976),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 48,
                imu_position: nalgebra::Vector3::new(0.062551297247409821, -0.11401627957820892,-0.050050429999828339),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.05898892879486084 ,  0.99613022804260254, -0.065153829753398895,
                    -0.9976203441619873,   0.05649179220199585 ,-0.039527565240859985,
                    -0.0356939397752285 , 0.067330479621887207 ,  0.99709206819534302,                
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.061743244528770447,-0.072799377143383026,-0.027681313455104828),
                updated_delta_velocity: nalgebra::Vector3::new(1.7533444166183472,-0.035631515085697174, -0.71447086334228516),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 49,
                imu_position: nalgebra::Vector3::new(0.062667049467563629,-0.092444159090518951,-0.039206214249134064),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.055915892124176025  , 0.99745321273803711, -0.044278018176555634,
                    -0.98980820178985596,  0.049560904502868652 , -0.13350474834442139,
                    -0.13097026944160461 , 0.051291782408952713 ,   0.9900585412979126 ,               ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.062551297247409821, -0.11401627957820892,-0.050050429999828339),
                updated_delta_velocity: nalgebra::Vector3::new(1.7159998416900635,-0.015462535433471203, -0.45654833316802979),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 50,
                imu_position: nalgebra::Vector3::new(0.065175272524356842,-0.043763596564531326,-0.018328730016946793),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.030734062194824219 ,  0.99915772676467896 ,-0.027192717418074608,
                    -0.99580514430999756 , 0.028262436389923096, -0.087026521563529968,
                    -0.086184673011302948 , 0.029753334820270538 ,  0.99583476781845093,
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.062667049467563629,-0.092444159090518951,-0.039206214249134064),
                updated_delta_velocity: nalgebra::Vector3::new(2.399268627166748,0.052245650440454483,-0.87505722045898438),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 51,
                imu_position: nalgebra::Vector3::new(0.066005676984786987,-0.0093048177659511566,-0.0087219346314668655),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.019911229610443115 ,  0.99957579374313354 ,-0.021255053579807281,
                    -0.99942547082901001,  0.019316017627716064 ,-0.027850041165947914,
                    -0.027427662163972855 , 0.021797370165586472  , 0.99938613176345825,
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.065175272524356842,-0.043763596564531326,-0.018328730016946793),
                updated_delta_velocity: nalgebra::Vector3::new(2.4406106472015381,0.021383216604590416, -1.0072472095489502),
                d_t: 0.25
            },
            KeyFrameDummy {
                id: 52,
                imu_position: nalgebra::Vector3::new(0.065249107778072357,0.0037395022809505463, -0.01129281148314476),
                prev_kf_imu_rotation: nalgebra::Matrix3::new(
                    0.03889918327331543,   0.99703055620193481, -0.066459648311138153,
                    -0.99853229522705078 , 0.041293740272521973 , 0.035044357180595398,
                    0.037684664130210876 , 0.064998909831047058 ,   0.9971734881401062,
                ),
                prev_kf_imu_position: nalgebra::Vector3::new(0.066005676984786987,-0.0093048177659511566,-0.0087219346314668655),
                updated_delta_velocity: nalgebra::Vector3::new( 2.3737087249755859,-0.055561721324920654,  -1.1735450029373169),
                d_t: 0.25
            },

        ];

        for kf in keyframes.iter() {
            let velocity = {

                dir_g = dir_g - (kf.prev_kf_imu_rotation * kf.updated_delta_velocity);

                println!("... current imu pos: {:?}", kf.imu_position);
                println!("... prev imu pos: {:?}", kf.prev_kf_imu_position);
                println!("... d t: {}", kf.d_t);
                println!("= velocity top: {:?}", kf.imu_position - kf.prev_kf_imu_position);

                (
                    DVVector3::new((kf.imu_position - kf.prev_kf_imu_position) / kf.d_t),
                )
            };
            println!("Set KF velocity {} {:?}", kf.id,  velocity);
        }

        dir_g = dir_g / dir_g.norm();
        let gi = Vector3::new(0.0, 0.0, -1.0);
        let v = gi.cross(&dir_g);
        let nv = v.norm();
        let cosg = gi.dot(&dir_g);
        let ang = cosg.acos();
        let vzg = v * ang / nv;

        rwg = {
            let unit_quat = group_exp(& nalgebra::Vector3::new(vzg.x, vzg.y, vzg.z));
            DVMatrix3::new(* unit_quat.to_rotation_matrix().matrix())
        };


        assert!(
            (*rwg -
            nalgebra::Matrix3::new(
                0.99592792987823486 , 0.075498953461647034 , 0.049268767237663269,
                0.075498953461647034  , -0.3998115062713623   , -0.913482666015625,
                -0.049268767237663269  ,   0.913482666015625 , -0.40388357639312744,
            )).abs() <
            nalgebra::Matrix3::new(
                1e-5, 1e-5, 1e-5,
                1e-5, 1e-5, 1e-5,
                1e-5, 1e-5, 1e-5
            )
        );

    }

    // #[test]
    fn test_inertial_gba() {
//         let mut system_config = env::current_dir().unwrap();
//         system_config.push("orbslam_config.yaml");
//         let mut dataset_config = env::current_dir().unwrap();
//         dataset_config.push("config_datasets/EUROC.yaml");
//         let _ = load_config(
//             &system_config.into_os_string().into_string().unwrap(),
//             &dataset_config.into_os_string().into_string().unwrap()
//         ).expect("Could not load config");

//         let camera_param = [458.654, 457.296, 367.215, 248.375];
//         let prior_a = 10000000000.0;
//         let prior_g = 100.0;
//         let max_kf_id = 64;

//         let mut optimizer = g2o::ffi::new_sparse_optimizer(5, camera_param, 1e5);

//         struct KeyFrameDummy {
//             id: Id,
//             pose: Pose,
//             imu_rotation: nalgebra::Matrix3<f64>,
//             imu_position: nalgebra::Vector3<f64>,
//             velocity: nalgebra::Vector3<f64>,
//             prev_kf_id: Id,
//             imu_preintegrated: Option<ImuPreIntegrated>,
//         }
//         let calib = ImuCalib::new();
//         let keyframes = vec![
//             KeyFrameDummy {
//                 id: 59,
//                 prev_kf_id: 58,
//                 imu_position: Vector3::new(-0.098112113773822784, 0.060175135731697083,-0.2106126993894577),
//                 velocity: Vector3::new(-0.099902123212814331, 0.00030876696109771729,0.00088042020797729492),
//                 imu_rotation: Matrix3::new(
//                     0.034043729305267334,   0.99935483932495117, -0.011448211967945099,
//                     -0.99856382608413696,  0.033538162708282471, -0.041781298816204071,
//                     -0.041370388120412827,  0.012854164466261864,   0.99906116724014282,
//                 ), 
//                 pose: Pose::new(
//                     Vector3::new(0.15927127003669739, -0.073142148554325104,0.2064451277256012),
//                     Matrix3::new(
//                         0.9997134804725647 , 0.019756156951189041, -0.013516758568584919,
//                         -0.019125277176499367 ,  0.99878984689712524 , 0.045310515910387039,
//                         0.014395562931895256, -0.045039020478725433 ,  0.99888151884078979
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6956512928009033, -0.075809411704540253, -1.7529716491699219),
//                     d_p: Vector3::new(0.21129941940307617, -0.0099749276414513588, -0.21853739023208618),
//                     avg_a: Vector3::new(6.7826051712036133, -0.3032376766204834, -7.0118865966796875),
//                     avg_w: Vector3::new(0.0061226221732795238, 0.016859913244843483, 0.0043633473105728626),
//                     d_r: Matrix3::new(   0.99999058246612549, -0.0010348204523324966 , 0.0042294040322303772,
//                     0.0010413946583867073  ,  0.99999827146530151, -0.0015518249711021781,
//                     -0.0042278128676116467,  0.0015562203479930758  ,  0.99998992681503296),
//                     jrg: Matrix3::new(   -0.24998138844966888 , -0.0007502017542719841 ,  0.0026820385828614235,
//                     0.00074271939229220152 ,   -0.24999725818634033, -0.00067408749600872397,
//                     -0.002684498205780983 , 0.00066465087002143264 ,   -0.24998146295547485),
//                     jvg: Matrix3::new(-0.00046952083357609808 ,    0.21532353758811951,  -0.0086884759366512299,
//                     -0.21687059104442596 ,-0.00031183563987724483 ,   -0.20675887167453766,
//                     0.0084014628082513809  ,   0.20838955044746399 , 2.4199249310186133e-05),
//                     jva: Matrix3::new(   -0.24999114871025085, -0.00049127743113785982 ,  0.0016359955770894885,
//                     0.00048916932428255677 ,   -0.24999865889549255, -0.00028730911435559392,
//                     -0.0016369990771636367,  0.00028271466726437211  ,  -0.24999134242534637),
//                     jpg: Matrix3::new(-3.3414031349821016e-05 ,   0.017732653766870499 ,-0.00090810318943113089,
//                     -0.017852375283837318 ,-2.8096139430999756e-05  , -0.017247453331947327,
//                     0.00088109512580558658  ,  0.017372237518429756 ,-7.8617076724185608e-06),
//                     jpa: Matrix3::new(  -0.031248828396201134, -5.7042499975068495e-05 , 0.00022854720009490848,
//                     5.6897206377470866e-05 ,    -0.0312498789280653, -1.4040542737348005e-05,
//                     -0.00022862668265588582 , 1.3485551789926831e-05  , -0.031248869374394417),

//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },

//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[7.2250005977991805e-09,1.8698017391344715e-17,4.135132461306484e-17,-7.554266240328289e-12,6.1973151055383369e-09,-2.602391357964251e-10,-6.4453005649625639e-13,5.1034948489458998e-10,-2.6739015515642173e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,1.8695515997172355e-17,7.224993048282613e-09,7.5819202893043106e-17,-6.2224239094632594e-09,2.9310549213429349e-12,-6.021737330996757e-09,-5.1243492782404587e-10,2.508014683520049e-13,-5.0198822876268423e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,4.4391454900936082e-17,7.5380208215793863e-17,7.2249974891747115e-09,2.6362328986451189e-10,6.0482729935529278e-09,8.2699246756190448e-12,2.7011344549965344e-11,5.0417897634602582e-10,6.6802699439857949e-13,0.0,0.0,0.0,0.0,0.0,0.0,
// -7.5542679750517649e-12,-6.222425241730889e-09,2.6362334537566312e-10,1.0072263876281795e-06,3.0394053940341337e-10,7.0013257413847896e-09,1.2566938778491021e-07,2.8877272101324181e-11,6.5509170310562581e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.1973151055383369e-09,2.9310503676938104e-12,6.0482712171960884e-09,3.0394053940341337e-10,1.0140090580534888e-06,-3.1298524882927836e-10,3.2861876414491675e-11,1.2630474088837218e-07,-3.3818500083659941e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.6023908028527387e-10,-6.021737330996757e-09,8.2699177367251409e-12,7.0013235209387403e-09,-3.1298519331812713e-10,1.0068102938021184e-06,6.4929966958615637e-10,-2.9442656646061494e-11,1.2563828022393864e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -6.4452956860527877e-13,-5.1243487231289464e-10,2.7011348019412296e-11,1.2566940199576493e-07,3.2861869475597771e-11,6.4929978060845883e-10,2.0897383379292478e-08,3.2226894763898173e-12,6.4740782179661949e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.1034959591689244e-10,2.5080106177619022e-13,5.0417886532372336e-10,2.8877273836047657e-11,1.2630472667751746e-07,-2.9442667054402349e-11,3.2226892595493828e-12,2.0960754909538082e-08,-3.2850291497438233e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.6739017250365649e-11,-5.0198822876268423e-10,6.6802656071771049e-13,6.5509164759447458e-10,-3.3818496614212989e-11,1.2563828022393864e-07,6.4740789118555853e-11,-3.2850284992225198e-12,2.0894937335924624e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                 }),
                
//             },
//             KeyFrameDummy {
//                 id: 56,
//                 prev_kf_id: 55,
//                 imu_position: Vector3::new(0.048577740788459778, -0.035978935658931732,-0.063918277621269226),
//                 velocity: Vector3::new(-0.21128073334693909, 0.18306636810302734,-0.19490495324134827),
//                 imu_rotation: Matrix3::new(
//                 0.030418574810028076  , 0.99922090768814087, -0.025147352367639542,
//                 -0.99927628040313721,  0.029826045036315918 ,-0.023610638454556465,
//                 -0.022842194885015488  ,0.025847353041172028  ,  0.9994049072265625,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.01719433069229126, 0.017735203728079796,0.054836791008710861),
//                     nalgebra::Matrix3::new(
//                         0.99987882375717163 ,   0.015566722489893436, -0.00026274914853274822,
//                         -0.015553968027234077 ,    0.99951493740081787  ,  0.026980290189385414,
//                         0.00068261637352406979 ,  -0.026972932741045952 ,    0.99963593482971191
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         1.1560000068300269e-08,1.6119056838584037e-16,9.3180109293975453e-17,-8.0691520132347705e-10,1.6645604006271242e-08,-1.1890339823850127e-09,-1.0719763965383322e-10,2.2032062840793287e-09,-1.6840526195771588e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,1.6227739106650644e-16,1.1559994739229751e-08,4.715837735864841e-18,-1.7146719599736571e-08,-8.133311246716346e-10,-1.3637133200461449e-08,-2.2716402092726184e-09,-1.0785448228967098e-10,-1.8629915388146401e-09,0.0,0.0,0.0,0.0,0.0,0.0
// ,8.0310092170046601e-17,4.60768304359292e-18,1.1559994739229751e-08,5.0322718214701467e-10,1.4280495896912271e-08,-6.7430561134784739e-11,7.4955597284542819e-11,1.9486294799975212e-09,-9.4254135746263401e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -8.0691509030117459e-10,-1.7146714270666052e-08,5.0322696010240975e-10,1.6342319213435985e-06,9.2829932629712175e-10,2.7461034335374279e-08,3.2511118774891656e-07,1.4692579097808078e-10,4.2288323953698637e-09,0.0,0.0,0.0,0.0,0.0,0.0
// ,1.6645596900843884e-08,-8.1333118018278583e-10,1.4280493232377012e-08,9.2829927078597052e-10,1.6562582914048107e-06,-1.1530311150309558e-09,1.5817684662078335e-10,3.2852113918124815e-07,-1.9515300486716569e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.1890335382958028e-09,-1.3637131424104609e-08,-6.7430588890360355e-11,2.7461036111731119e-08,-1.1530317811647706e-09,1.6221064242927241e-06,4.1214494039820693e-09,-1.7672560637116419e-10,3.2342401823370892e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.0719761189825761e-10,-2.2716388770049889e-09,7.4955548712285491e-11,3.2511127301404485e-07,1.5817680498741993e-10,4.1214494039820693e-09,8.6144851252356602e-08,2.7020949713851827e-11,6.7802768954905446e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,2.2032056179455139e-09,-1.078545100452466e-10,1.9486285918191015e-09,1.4692587424480763e-10,3.2852113918124815e-07,-1.7672555086001296e-10,2.7020953183298779e-11,8.6709171398524632e-08,-3.2258001825269389e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.6840516481320122e-10,-1.862991760859245e-09,-9.4254144419880781e-12,4.2288346158159129e-09,-1.9515292160043884e-10,3.2342407507712778e-07,6.7802780057135692e-10,-3.2258001825269389e-11,8.5897063684114983e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.5043524759228433e-10,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.5043524759228433e-10,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.5043524759228433e-10,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.5999987630930264e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.5999987630930264e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,3.5999987630930264e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],

//                     d_t: 0.40000009536743164,
//                     d_v: Vector3::new(2.5087361335754395, -0.12383084744215012, -3.0122950077056885),
//                     d_p: Vector3::new(0.52395462989807129, -0.029741039499640465, -0.60348314046859741),
//                     avg_a: Vector3::new(6.2718386650085449, -0.30957695841789246, -7.5307354927062988),
//                     avg_w: Vector3::new(-0.0034775815438479185, 0.0888676717877388, 0.11561498045921326),
//                     d_r: Matrix3::new(   0.99830836057662964 , -0.045934088528156281 ,  0.035645630210638046,
//                     0.045839689671993256 ,   0.99894285202026367 , 0.0034627297427505255,
//                     -0.035767048597335815 ,-0.0018228645203635097  ,  0.99935859441757202),
//                     jrg: Matrix3::new(  -0.39950630068778992, -0.0072630848735570908 ,  0.014891169033944607,
//                     0.0072091361507773399 ,  -0.39989858865737915, -0.0014692998956888914,
//                     -0.014911508187651634 , 0.0011019917437806726  , -0.39960187673568726),
//                     jvg: Matrix3::new( 0.011961978860199451 ,  0.59382140636444092, -0.016517380252480507,
//                     -0.60037195682525635,  0.014618063345551491 , -0.46465286612510681,
//                     0.029091468080878258 ,  0.47275155782699585 ,0.0020594398956745863),
//                     jva: Matrix3::new(   -0.39969712495803833 ,   0.011042395606637001 , 0.00077855406561866403,
//                     -0.011048523709177971  ,  -0.39980760216712952 , -0.0021602087654173374,
//                     -0.00071539293276146054  , 0.0020854845643043518   ,  -0.3998769223690033),
//                     jpg: Matrix3::new( 0.0012374005746096373,   0.078676991164684296 ,-0.0025227388832718134,
//                     -0.079852774739265442,  0.0015797412488609552 , -0.063172444701194763,
//                     0.00390401273034513,   0.064610116183757782 ,0.00022525942767970264),
//                     jpa: Matrix3::new(  -0.079956762492656708  , 0.0016227173618972301 ,  0.0011304636718705297,
//                     -0.0016282328870147467  , -0.079976305365562439 ,-0.00039395259227603674,
//                     -0.0011204539332538843 , 0.00040809539495967329 ,  -0.079978138208389282),
//                 }),

//             },
//             KeyFrameDummy {
//                 id: 57,
//                 prev_kf_id: 56,
//                 imu_position: Vector3::new(-0.0042424425482749939, 0.009787658229470253,-0.11264451593160629),
//                 velocity: Vector3::new(-0.20775920152664185, 0.092365674674510956,-0.27579835057258606),
//                 imu_rotation: Matrix3::new(
//                 0.046421289443969727 ,  0.99866610765457153, -0.022608058527112007,
//                 -0.99849873781204224,  0.045731008052825928, -0.030149824917316437,
//                 -0.029075717553496361,  0.023973710834980011 ,  0.99928969144821167,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.068902820348739624, -0.026879582554101944,0.1048654317855835),
//                     nalgebra::Matrix3::new(
//                         0.9994966983795166 ,  0.031644832342863083 ,-0.0022252534981817007,
//                         -0.03155367448925972 ,    0.9989510178565979 ,   0.03318459540605545,
//                         0.0032730400562286377, -0.033097676932811737,    0.99944674968719482
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2250001537099706e-09,-6.3816249722082138e-17,-2.4009930575602006e-19,-2.3262095028009355e-10,6.5216116951205549e-09,-5.3064752592035802e-10,-1.9163294215363003e-11,5.338842701263502e-10,-5.343563092008452e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -6.2300113686056144e-17,7.2249992655315509e-09,6.0380505417006384e-17,-6.5932579396132951e-09,-2.5448718132814463e-10,-5.7963469579647153e-09,-5.3975379721293848e-10,-2.0817307946896513e-11,-4.7084947052411508e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -3.2555177796223937e-18,6.0383721495227991e-17,7.2249988214423411e-09,2.977456892150343e-10,5.8890394782906696e-09,-3.1771481279196934e-11,3.4490493794336885e-11,4.7878684350521894e-10,-2.7049222237063297e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.3262096415788136e-10,-6.5932566073456655e-09,2.9774571697060992e-10,1.0081040500153904e-06,3.8733874441199134e-10,7.1062915552033701e-09,1.2574641061746661e-07,3.6949044518452823e-11,6.4881428007979025e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.5216130273881845e-09,-2.544871258169934e-10,5.8890403664690893e-09,3.8733846685623519e-10,1.0143297686227015e-06,-4.4074952021411207e-10,4.6576076329074567e-11,1.2631325319034659e-07,-5.3056451593258558e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -5.3064747040920679e-10,-5.7963469579647153e-09,-3.1771481279196934e-11,7.1062919992925799e-09,-4.4074952021411207e-10,1.0062759656648268e-06,6.5296346107857062e-10,-4.23850711472884e-11,1.25572995557377e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.9163292480639527e-11,-5.3975374170178725e-10,3.4490500733230789e-11,1.2574645325003075e-07,4.6576083267968471e-11,6.5296335005626815e-10,2.0904630915197231e-08,4.6315694335330448e-12,6.3593220966939867e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.3388432563750143e-10,-2.0817299273279133e-11,4.7878673248291648e-10,3.6949027171218063e-11,1.2631328161205602e-07,-4.2385078086182304e-11,4.6315672651286999e-12,2.0959653568297654e-08,-5.3208852254793548e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -5.3435627450637568e-11,-4.7084941501296385e-10,-2.7049215731850262e-12,6.4881444661324394e-10,-5.3056451593258558e-11,1.2557296713566757e-07,6.3593227905833771e-11,-5.3208856591602238e-12,2.0887043206130329e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6086376905441284, -0.1235460638999939, -1.849172830581665),
//                     d_p: Vector3::new(0.1970532089471817, -0.019179657101631165, -0.22944000363349915),
//                     avg_a: Vector3::new(6.4345502853393555, -0.49418431520462036, -7.3966913223266602),
//                     avg_w: Vector3::new(-0.017320660874247551, 0.048171110451221466, 0.13879558444023132),
//                     d_r: Matrix3::new(   0.99932682514190674 , -0.034722886979579926 ,  0.011851358227431774,
//                     0.034668121486902237  ,  0.99938750267028809 , 0.0047956244088709354,
//                     -0.012010280042886734, -0.0043814084492623806,    0.99991822242736816),
//                     jrg: Matrix3::new(  -0.24993471801280975, -0.0038057055789977312 , 0.0031618522480130196,
//                     0.0038230519276112318  ,  -0.2499532550573349 , 0.0012384650763124228,
//                     -0.003140660235658288, -0.0012906967895105481,    -0.2499745786190033),
//                     jvg: Matrix3::new(  0.0030020684935152531  ,   0.22818835079669952 ,  -0.011643378995358944,
//                         -0.2285521924495697 ,  0.0028113140724599361 ,   -0.20068939030170441,
//                     0.014068346470594406  ,    0.2009347528219223, -0.00023584795417264104),
//                     jva: Matrix3::new(   -0.24993796646595001 ,  0.0047737718559801579 , 0.00018373729835730046,
//                     -0.0047723720781505108  ,  -0.24993972480297089 , 0.00016059746849350631,
//                     -0.00018524013285059482, -0.00016073403821792454 ,   -0.24999770522117615),
//                     jpg: Matrix3::new( 0.00018480455037206411,      0.0186796635389328 , -0.0013023808132857084,
//                     -0.018705371767282486,  0.00017014387412928045  , -0.016319377347826958,
//                     0.0014476414071395993  ,  0.016334297135472298, -1.8684420865611173e-05),
//                     jpa: Matrix3::new(  -0.031245904043316841 , 0.00040394949610345066 , 5.2753799536731094e-05,
//                     -0.00040384603198617697  , -0.031246015802025795,  3.2913951145019382e-05,
//                     -5.3227086027618498e-05 ,-3.1985662644729018e-05,   -0.031249845400452614),
//                 }),
//             },
//             KeyFrameDummy {
//                 id: 55,
//                 prev_kf_id: -1,
//                 imu_position: Vector3::new(0.065222904086112976, -0.020706389099359512,-0.0080546028912067413),
//                 velocity: Vector3::new(-0.0416128970682621, -0.038181357085704803,-0.13965915143489838),
//                 imu_rotation: Matrix3::new(
//                 0.014865398406982422  ,  0.9995572566986084, -0.025774437934160233,
//                 -0.99988096952438354 , 0.014967083930969238, 0.0037561894860118628,
//                 0.0041402950882911682,  0.025715531781315804 ,  0.99966073036193848
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.0, 0.0,0.0),
//                     nalgebra::Matrix3::new(
//                         1.0, 0.0, 0.0,
//                         0.0, 1.0, 0.0,
//                         0.0, 0.0, 1.0
//                     ),
//                 ),
//                 imu_preintegrated: None,


//             },
//             KeyFrameDummy {
//                 id: 61,
//                 prev_kf_id: 60,

//                 imu_position: Vector3::new(-0.12126803398132324, 0.058753222227096558,-0.19390058517456055),
//                 velocity: Vector3::new(0.59120118618011475, -0.085182100534439087,0.071317076683044434),
//                 imu_rotation: Matrix3::new(
//                 0.029942095279693604 ,  0.99888253211975098 ,-0.036568440496921539,
//                 -0.99816977977752686  ,0.027957558631896973, -0.053624343127012253,
//                 -0.052542053163051605 , 0.038107138127088547 ,  0.99789136648178101,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.18786591291427612, -0.070167981088161469,0.18756633996963501),
//                     nalgebra::Matrix3::new(
//                         0.99982786178588867,  0.014489148743450642 , 0.011589112691581249,
//                         -0.015125547535717487 ,  0.99826788902282715,  0.056854415684938431,
//                         -0.010745267383754253, -0.057019922882318497,   0.99831521511077881
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249912719257736e-09,3.971716975596223e-17,-4.0133546006541822e-18,-1.0751145806953133e-10,6.3071663447544779e-09,-7.7470189985273663e-11,-8.9425879895577154e-12,5.2004700545893456e-10,-1.9268073248035478e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,3.8632530832113297e-17,7.2249966009962918e-09,2.3778750965186298e-17,-6.342935954251061e-09,-8.5149269579698483e-11,-5.8900084809465625e-09,-5.2294857333379241e-10,-7.0202732516122524e-12,-4.8559251064617115e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -3.6324751517010779e-18,2.3615908881076659e-17,7.2250001537099706e-09,9.314051266362533e-13,5.9291207499256871e-09,2.1883793388521866e-11,1.295622376745742e-11,4.8903581184589484e-10,1.7263000924583327e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.0751145113063743e-10,-6.3429363983402709e-09,9.3145705992031536e-13,1.0075021918964921e-06,1.8165514231727187e-11,6.9650689660250009e-09,1.256953652273296e-07,3.8952252881530036e-12,6.4660182763631724e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.3071672329328976e-09,-8.5149304274168003e-11,5.9291220821933166e-09,1.8165427495553388e-11,1.0139674486708827e-06,-1.9473322260266102e-11,1.6231307964353903e-11,1.2629577383904689e-07,-1.7461842735655431e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -7.7470266313106606e-11,-5.8900080368573526e-09,2.1883802062139246e-11,6.9650676337573714e-09,-1.9473379506140809e-11,1.0064692332889535e-06,6.4585597980837406e-10,-4.1586404458948678e-12,1.2560086304347351e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -8.9425923263664053e-12,-5.2294851782264118e-10,1.2956233308436538e-11,1.2569533680562017e-07,1.6231309699077379e-11,6.4585581327492037e-10,2.0899992847489557e-08,1.7693681806166262e-12,6.3963549734591396e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.2004722750353949e-10,-7.0202741189739903e-12,4.8903586735704607e-10,3.8952183492590997e-12,1.262957880499016e-07,-4.1586430479800818e-12,1.7693674216751054e-12,2.0959490143468429e-08,-1.8980732784112941e-12,0.0,0.0,0.0,0.0,0.0,0.0
// ,-1.926807671748243e-11,-4.8559262166847361e-10,1.72630020087855e-12,6.4660182763631724e-10,-1.7461839266208479e-11,1.2560089146518294e-07,6.3963577490167012e-11,-1.8980730615708596e-12,2.0890873031476076e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6688470840454102, -0.02859133668243885, -1.7850308418273926),
//                     d_p: Vector3::new(0.209215447306633, -0.0078545110300183296, -0.22228606045246124),
//                     avg_a: Vector3::new(6.6753888130187988, -0.11436530202627182, -7.1401233673095703),
//                     avg_w: Vector3::new(0.014967937953770161, 0.024378761649131775, 0.067809537053108215),
//                     d_r: Matrix3::new(   0.99983769655227661 , -0.016945790499448776 , 0.0061087803915143013,
//                     0.016968714073300362 ,   0.99984920024871826, -0.0036917342804372311,
//                     -0.0060452963225543499,  0.0037947909440845251  ,  0.99997460842132568),
//                     jrg: Matrix3::new(   -0.24998375773429871 ,   -0.00236546341329813 , 0.00082655961159616709,
//                     0.0023638156708329916  ,  -0.24998508393764496 ,-0.00029246613848954439,
//                     -0.00083113100845366716 , 0.00028222092078067362 ,   -0.24999774992465973),
//                     jvg: Matrix3::new( 0.00098155124578624964 ,    0.21951133012771606 , 0.00039999300497584045,
//                     -0.21916802227497101  , 0.0006337821832858026   , -0.20418860018253326,
//                     0.00014001847011968493 ,    0.20383866131305695, -0.00035809687688015401),
//                     jva: Matrix3::new(   -0.24998870491981506  , 0.0018298987997695804 ,-0.00068032316630706191,
//                     -0.0018323176773265004 ,   -0.24998892843723297,  0.00063504948047921062,
//                     0.00067376886727288365, -0.00064239359926432371,     -0.2499975711107254),
//                     jpg: Matrix3::new( 5.6475946621503681e-05 ,   0.018098963424563408, -0.0004036168975289911,
//                     -0.018080336973071098, 3.5783508792519569e-05  , -0.016831906512379646,
//                     0.00043362894211895764  ,   0.01681104488670826 ,-2.0353803847683594e-05),
//                     jpa: Matrix3::new(  -0.031249374151229858 , 0.00013758808199781924,-5.0920712965307757e-05,
//                     -0.0001377404696540907 ,   -0.03124937042593956 , 5.2675415645353496e-05,
//                     5.0508013373473659e-05,  -5.308810796122998e-05,   -0.031249845400452614),
//                 }),
//             },
//             KeyFrameDummy {
//                 id: 58,
//                 prev_kf_id: 57,
//                 imu_position: Vector3::new(-0.056182242929935455, 0.032879076898097992,-0.18159410357475281),
//                 velocity: Vector3::new(-0.16771948337554932, 0.10918423533439636,-0.11607438325881958),
//                 imu_rotation: Matrix3::new(
//                 0.051454484462738037  ,  0.99864137172698975 ,-0.0082493387162685394,
//                 -0.99779510498046875 ,  0.051060616970062256 , -0.042401757091283798,
//                 -0.041922926902770996 ,   0.01041291281580925,    0.99906659126281738,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.11723335832357407, -0.047259625047445297,0.17580331861972809),
//                     nalgebra::Matrix3::new(
//                         0.99917662143707275 , 0.037298321723937988 ,-0.015965279191732407,
//                         -0.036532659083604813 ,  0.99828118085861206 , 0.045826464891433716,
//                         0.017647087574005127 ,-0.045205481350421906,   0.99882185459136963
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249983773531312e-09,-1.7514787141157832e-16,-1.2178148701210719e-16,-1.5691964394548563e-10,6.200963742486465e-09,-4.2607661843163669e-10,-1.3036864990323416e-11,5.1832604874846311e-10,-3.1455005267133629e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.7796661177158342e-16,7.2249992655315509e-09,2.1065288528718782e-16,-6.3112137738130514e-09,-2.3173649110752592e-10,-5.5018891664815328e-09,-5.274654046871774e-10,-1.9357232830530258e-11,-4.5909928636511665e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.2123626249187144e-16,2.1217050363087151e-16,7.2249979332639214e-09,2.0098382680355797e-10,5.6282916105487857e-09,-8.6766101248247907e-11,1.2660839390776779e-11,4.6956416532850653e-10,-7.1615807901992401e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.5691965782327344e-10,-6.3112128856346317e-09,2.0098378517019455e-10,1.0074862757392111e-06,2.9097474429917725e-10,6.5226517520500238e-09,1.2570417595725303e-07,2.6853403181648083e-11,6.1434257681014515e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.2009624102188354e-09,-2.3173649110752592e-10,5.6282924987272054e-09,2.9097457776572355e-10,1.0131657290912699e-06,-3.3319433323519831e-10,2.3381132099875579e-11,1.262396978063407e-07,-2.6745394093863339e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -4.2607675720951477e-10,-5.5018878342139033e-09,-8.6766149820505234e-11,6.5226508638716041e-09,-3.331943054796227e-10,1.0057099188998109e-06,6.1417726460177846e-10,-3.0729679217911254e-11,1.255378521136663e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.3036868459770368e-11,-5.2746534917602617e-10,1.2660841125500255e-11,1.2570417595725303e-07,2.3381130365152103e-11,6.1417743113523215e-10,2.0901859798527767e-08,2.3525519639994164e-12,6.1749501345520486e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.1832599323731188e-10,-1.9357234565253734e-11,4.69564276350809e-10,2.6853392773307228e-11,1.2623971201719542e-07,-3.0729686156805158e-11,2.3525517471589819e-12,2.0955829072022425e-08,-2.6833461667929992e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -3.1455008736580581e-11,-4.5909920309838981e-10,-7.1615833922844541e-12,6.1434246578784268e-10,-2.6745390624416387e-11,1.2553788053537573e-07,6.1749487467732678e-11,-2.6833446489099577e-12,2.0885428497763314e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.5910439491271973, -0.081674665212631226, -1.8056818246841431),
//                     d_p: Vector3::new(0.20308420062065125, -0.010039024986326694, -0.22858396172523499),
//                     avg_a: Vector3::new(6.3641757965087891, -0.32669863104820251, -7.2227272987365723),
//                     avg_w: Vector3::new(-0.05905492976307869, 0.075705349445343018, 0.096111804246902466),
//                     d_r: Matrix3::new(  0.99952882528305054 , -0.02425282821059227 , 0.018807169049978256,
//                     0.023977234959602356  ,  0.9996037483215332 , 0.014740114100277424,
//                     -0.019157223403453827 ,-0.014282231219112873 ,   0.9997144341468811),
//                     jrg: Matrix3::new(   -0.24997325241565704,  -0.0022735949605703354 ,-0.00027300228248350322,
//                     0.0022808902431279421 ,   -0.24997645616531372 , 0.00088201730977743864,
//                     0.00029086298309266567 ,-0.00089299748651683331 ,   -0.24998810887336731),
//                     jvg: Matrix3::new( 0.0023484420962631702  ,  0.21838414669036865, -0.0083165038377046585,
//                     -0.2150837630033493  ,0.0037876260466873646 ,  -0.19427821040153503,
//                     0.012069907039403915  ,   0.1905626505613327 ,  0.001797898905351758),
//                     jva: Matrix3::new(  -0.24990649521350861 , 0.0037127258256077766, -0.0049487883225083351,
//                     -0.003649495542049408 ,   -0.2499459981918335, -0.0027728790882974863,
//                     0.0049990820698440075 , 0.0026853089220821857 ,  -0.24992476403713226),
//                     jpg: Matrix3::new( 0.00014349038247019053 ,   0.018251920118927956, -0.00058230047579854727,
//                     -0.018026048317551613,  0.00024167720403056592  , -0.016158422455191612,
//                     0.00082270317943766713 ,    0.01590237207710743,  0.00011798178456956521),
//                     jpa: Matrix3::new(  -0.031242081895470619 , 0.00031213057809509337 ,-0.00051016785437241197,
//                     -0.00030656231683678925  ,   -0.0312461256980896, -0.00026173147489316761,
//                     0.00051385251572355628,  0.00025467257364653051 ,  -0.031243089586496353),
//                 }),

//             },
//             KeyFrameDummy {
//                 id: 62,
//                 prev_kf_id: 61,
//                 imu_position: Vector3::new(0.026532270014286041, 0.037457697093486786,-0.17607131600379944),
//                 velocity: Vector3::new(1.6823946237564087, -0.43695101141929626,0.15727448463439941),
//                 imu_rotation: Matrix3::new(
//                 0.032068908214569092  , 0.99919164180755615 ,-0.024243852123618126,
//                 -0.99873870611190796 , 0.031097888946533203, -0.039422105997800827,
//                 -0.038636300712823868 , 0.025477500632405281  ,  0.9989284873008728,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.037897787988185883, -0.050138164311647415,0.16941444575786591),
//                 nalgebra::Matrix3::new(
//                         0.9998508095741272  ,  0.017253490164875984, -0.00085494609083980322,
//                         -0.017201155424118042 ,    0.99893707036972046  ,  0.042765188962221146,
//                         0.0015918861608952284  , -0.042744103819131851,     0.99908477067947388
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249970450855017e-09,4.1980332603184863e-17,-4.2066346152000577e-17,-1.4968611072863069e-10,6.2606071438153776e-09,4.1590950128345128e-10,-1.2381390183946461e-11,5.182747009335742e-10,3.3009359134972271e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,4.2844680095021124e-17,7.2249974891747115e-09,-5.4309271036108079e-17,-6.2120895094608386e-09,-2.012291305808489e-10,-6.048565648342219e-09,-5.1431725545114659e-10,-1.6601641936175859e-11,-4.9444631722295185e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -4.2594358698050326e-17,-5.4309734257251108e-17,7.2250014859776002e-09,-6.1405158735539089e-10,5.9911426930625566e-09,-5.9039571842500749e-11,-4.9266094676037042e-11,4.8972753630138754e-10,-4.8191008475417796e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.4968609685084289e-10,-6.2120899535500484e-09,-6.1405164286654212e-10,1.0072803888760973e-06,-6.2131177980262464e-10,6.9902252874953774e-09,1.2567757323722617e-07,-5.67655193683958e-11,6.4381389108802978e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.2606093642614269e-09,-2.0122915833642452e-10,5.9911440253301862e-09,-6.2131150224686849e-10,1.0139879123016726e-06,6.4198407700999383e-10,-5.539396372156169e-11,1.2629453749468667e-07,5.7317570828496756e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,4.1590961230575374e-10,-6.0485652042530091e-09,-5.903959265918246e-11,6.9902248434061676e-09,6.4198424354344752e-10,1.0068217761727283e-06,6.4984484460239855e-10,5.9294735788029129e-11,1.2562713891384192e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.2381391051308199e-11,-5.1431725545114659e-10,-4.9266084267696186e-11,1.2567754481551674e-07,-5.5393988007690353e-11,6.4984495562470102e-10,2.0898463404250833e-08,-5.3642069085257926e-12,6.3863747623571498e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.182745344001205e-10,-1.6601640201452383e-11,4.8972770283484124e-10,-5.6765505490607993e-11,1.2629453749468667e-07,5.9294735788029129e-11,-5.3642038727597097e-12,2.0959083357752206e-08,5.6068374769402407e-12,0.0,0.0,0.0,0.0,0.0,0.0
// ,3.3009369543313127e-11,-4.9444637273410308e-10,-4.8191012812226486e-12,6.4381378006572731e-10,5.7317567359049804e-11,1.2562716733555135e-07,6.3863747623571498e-11,5.6068374769402407e-12,2.0892811036787862e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.693202018737793, 0.14225669205188751, -1.760756254196167),
//                     d_p: Vector3::new(0.21015909314155579, 0.015917506068944931, -0.22058917582035065),
//                     avg_a: Vector3::new(6.7728080749511719, 0.56902682781219482, -7.043025016784668),
//                     avg_w: Vector3::new(-0.036945130676031113, -0.028986439108848572, 0.093542680144309998),
//                     d_r: Matrix3::new(   0.99969983100891113 , -0.023358901962637901, -0.0073793670162558556,
//                     0.02342570386826992 ,   0.99968409538269043,  0.0090976627543568611,
//                     0.0071645253337919712,  -0.009267798624932766 ,   0.99993133544921875),
//                     jrg: Matrix3::new(  -0.24996928870677948 , -0.003110246267169714 ,-0.0015499518485739827,
//                     0.0030989767983555794,   -0.24996976554393768 , 0.0015230255667120218,
//                     0.0015729432925581932, -0.0014994431985542178 ,  -0.24998871982097626),
//                     jvg: Matrix3::new( 0.0015103247715160251,    0.21515600383281708  , 0.019654156640172005,
//                     -0.21509608626365662 , 0.0018753550248220563  , -0.20900236070156097,
//                     -0.017805662006139755  ,  0.20903836190700531 ,0.00034716096706688404),
//                     jva: Matrix3::new(   -0.24997904896736145 ,  0.0026824669912457466,  0.00024126697098836303,
//                     -0.0026849289424717426  ,  -0.24997811019420624, -0.00076525117037817836,
//                     -0.00022890143736731261 , 0.00077179865911602974 ,   -0.24999688565731049),
//                     jpg: Matrix3::new(9.2228510766290128e-05 ,  0.017814084887504578,  0.0015634441515430808,
//                     -0.017801739275455475 ,0.00011349103442626074 ,  -0.01709291897714138,
//                     -0.0014526359736919403 ,  0.017086323350667953, 1.8641032511368394e-05),
//                     jpa: Matrix3::new(  -0.031248783692717552 , 0.00021657354955095798 ,-1.3367134670261294e-05,
//                     -0.00021661960636265576 ,  -0.031248742714524269, -5.1822382374666631e-05,
//                     1.3973844943393487e-05 , 5.1898874517064542e-05 ,  -0.031249864026904106),

//                 }),
//             },
//             KeyFrameDummy {
//                 id: 60,
//                 prev_kf_id: 59,
//                 imu_position: Vector3::new(-0.12308764457702637, 0.060252327471971512,-0.21039259433746338),
//                 velocity: Vector3::new(0.0072784423828125, -0.0059964209794998169,0.065968036651611328),
//                 imu_rotation: Matrix3::new(
//                 0.032686531543731689 ,  0.99891495704650879, -0.033174231648445129,
//                 -0.99818164110183716 , 0.030944645404815674, -0.051728200167417526,
//                 -0.050645507872104645 , 0.034804727882146835 ,  0.99811005592346191,
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(0.1889861673116684, -0.071503564715385437,0.20442658662796021),
//                     nalgebra::Matrix3::new(
//                         0.99981361627578735 , 0.017425952479243279, 0.0083107268437743187,
//                         -0.017856545746326447 ,  0.99833166599273682 , 0.054909493774175644,
//                         -0.007340011652559042, -0.055047657340764999 ,  0.99845677614212036
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249979332639214e-09,8.0775814707248657e-17,8.938045184149067e-17,-1.1011914297087699e-10,6.1848548504883638e-09,-1.2856567199737157e-10,-9.1146968445032783e-12,5.0739656920484322e-10,-1.5631244562608337e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,8.0125041940851138e-17,7.2249926041934032e-09,1.0665249257485522e-16,-6.2752323337633698e-09,4.359002308412796e-12,-5.7488924731785573e-09,-5.1471688022886042e-10,3.6338130855045891e-13,-4.7184434137648168e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,9.0986657920056338e-17,1.0451137857265356e-16,7.2249983773531312e-09,1.4869122599847628e-10,5.8512639178331938e-09,1.1002902755574695e-10,1.7276943764521491e-11,4.8033005350944791e-10,8.9500039324175162e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.1011910827640747e-10,-6.2752332219417895e-09,1.4869133702077875e-10,1.0073275689137517e-06,4.6334082404175803e-11,6.7135439429932831e-09,1.2567718954414886e-07,5.2545927678449011e-12,6.1966604070207154e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.1848552945775737e-09,4.3589953695188921e-12,5.8512634737439839e-09,4.6334026893024571e-11,1.0134789363291929e-06,-5.0750677965671898e-11,1.0275839207318782e-11,1.2624464318378159e-07,-1.1245926932745842e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.2856560260843253e-10,-5.7488924731785573e-09,1.1002907612800428e-10,6.7135448311717028e-09,-5.0750733476823129e-11,1.0061519333248725e-06,6.2011251689142455e-10,-5.7725148445986196e-12,1.2556758122173051e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -9.1146977118650163e-12,-5.1471693574001165e-10,1.7276950703415395e-11,1.2567721796585829e-07,1.0275841809403996e-11,6.2011229484681962e-10,2.0898145436376581e-08,1.1075538272967145e-12,6.113522188488929e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.0739668022714568e-10,3.633806038190468e-13,4.8032999799829668e-10,5.2545927678449011e-12,1.2624465739463631e-07,-5.7725235182159995e-12,1.1075545862382352e-12,2.0954018964403076e-08,-1.2153676502701938e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -1.5631241093161385e-11,-4.718445634210866e-10,8.9500074018644682e-12,6.19666151724374e-10,-1.12459191264902e-11,1.2556758122173051e-07,6.1135228823783194e-11,-1.2153658071265006e-12,2.0887156892968051e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6193963289260864, -0.023786017671227455, -1.7749457359313965),
//                     d_p: Vector3::new(0.20179295539855957, -0.0049147214740514755, -0.22207050025463104),
//                     avg_a: Vector3::new(6.4775853157043457, -0.095144070684909821, -7.0997829437255859),
//                     avg_w: Vector3::new(0.077269218862056732, 0.064228110015392303, 0.069387324154376984),
//                     d_r: Matrix3::new(  0.99972134828567505, -0.017159627750515938 , 0.016209181398153305,
//                     0.017469936981797218  , 0.99966281652450562 ,-0.019210478290915489,
//                     -0.015874072909355164 , 0.019488301128149033 ,  0.99968421459197998),
//                     jrg: Matrix3::new(  -0.24998526275157928, -0.0017558636609464884 , 0.0011185373878106475,
//                     0.001740884967148304 ,  -0.24998007714748383 ,-0.0017351005226373672,
//                     -0.0011382665252313018,  0.0017212467500939965 ,  -0.24998404085636139),
//                     jvg: Matrix3::new(   0.001629388309083879  ,   0.21720787882804871 , -0.0029074761550873518,
//                     -0.21544213593006134 ,-0.00018657678447198123  ,  -0.20093347132205963,
//                     0.0024646157398819923 ,    0.19898845255374908 , -0.0017722384072840214),
//                     jva: Matrix3::new(  -0.24996465444564819 , 0.0025190766900777817 ,-0.0028635300695896149,
//                     -0.0025613077450543642,   -0.24996039271354675 , 0.0030392438638955355,
//                     0.0028246273286640644, -0.0030743284150958061 ,  -0.24995741248130798),
//                     jpg: Matrix3::new( 0.00010474638838786632,    0.017819192260503769 ,-0.00037856897688470781,
//                     -0.017702225595712662  , -1.20296699606115e-05 ,  -0.016464702785015106,
//                     0.00035101332468912005 ,   0.016334854066371918 , -0.0001122136673075147),
//                     jpa: Matrix3::new(  -0.031247230246663094,  0.00022577264462597668 ,-0.00027414833311922848,
//                     -0.00022906315280124545   , -0.03124709241092205 , 0.00027224412770010531,
//                     0.00027129234513267875, -0.00027497674454934895  , -0.031246695667505264),
//                 }),
//             },
//             KeyFrameDummy {
//                 id: 63,
//                 prev_kf_id: 62,
//                 imu_position: Vector3::new(0.44713091850280762, -0.07178005576133728,-0.13675269484519958),
//                 velocity: Vector3::new(2.821101188659668, -0.51799303293228149,0.36035484075546265),
//                 imu_rotation: Matrix3::new(
//                 0.053350389003753662 ,  0.99845963716506958, -0.015234092250466347,
//                 -0.99755138158798218,   0.05259859561920166, -0.046094164252281189,
//                 -0.045221868902444839 , 0.017655933275818825 ,  0.99882090091705322
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(-0.37995612621307373, 0.074861586093902588,0.1202501654624939),
//                     nalgebra::Matrix3::new(
//                         0.99920332431793213  , 0.038934390991926193, -0.0087681738659739494,
//                         -0.038457300513982773 ,   0.99804669618606567 ,  0.049232501536607742,
//                         0.010667884722352028 , -0.048856079578399658 ,   0.99874883890151978
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249992655315509e-09,-2.1032291301467307e-16,-3.1678100491068853e-16,-2.686850186783829e-10,6.0775575683180705e-09,2.1345326547961285e-11,-2.2097169580237441e-11,5.0195919643059028e-10,5.1819074205206039e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.0988855716629903e-16,7.2249988214423411e-09,2.9249837025792065e-16,-6.2313443294215176e-09,-4.4203724014479917e-10,-5.8856817197749933e-09,-5.1475251838795089e-10,-3.6710440243226117e-11,-4.9332310458893858e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -3.1355140063170589e-16,2.9423910237386705e-16,7.2249983773531312e-09,-4.6016268573367825e-10,6.0406981639005153e-09,-1.6056121709961957e-10,-4.1744576545488243e-11,5.0596760114984818e-10,-1.3364375578417409e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.6868504643395852e-10,-6.2313429971538881e-09,-4.6016249144464894e-10,1.0072988061438082e-06,-3.2317565290540529e-10,6.8794965280005727e-09,1.2567863905132981e-07,-3.1131115046933999e-11,6.4847971437131946e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.0775540156043917e-09,-4.4203732341152602e-10,6.0406968316328857e-09,-3.231758471944346e-10,1.0137816843780456e-06,3.4180608343703511e-10,-3.439195803145445e-11,1.26290927937589e-07,3.629015837836036e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,2.1345321343790857e-11,-5.8856834961318327e-09,-1.6056125873298299e-10,6.8794960839113628e-09,3.4180597241473265e-10,1.0065158448924194e-06,6.4098554242164596e-10,3.2463597782195208e-11,1.256158128626339e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.2097174784407869e-11,-5.1475262941025335e-10,-4.1744559198253484e-11,1.2567858220791095e-07,-3.4391926806431883e-11,6.4098576446625088e-10,2.0898539787594927e-08,-3.5193250223775063e-12,6.4442687297550094e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.0195902989713659e-10,-3.6710447182120021e-11,5.0596776768330187e-10,-3.1131142802509615e-11,1.2629095635929843e-07,3.246360125164216e-11,-3.5193274076222858e-12,2.096022733155678e-08,3.6605579678550271e-12,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.1819069868397349e-12,-4.9332310458893858e-10,-1.3364375578417409e-11,6.4847971437131946e-10,3.6290154908913408e-11,1.2561582707348862e-07,6.444268035865619e-11,3.6605571004932891e-12,2.0893342167482842e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6868633031845093, 0.091458022594451904, -1.76534104347229),
//                     d_p: Vector3::new(0.21399837732315063, 0.012879962101578712, -0.22073750197887421),
//                     avg_a: Vector3::new(6.7474532127380371, 0.36583209037780762, -7.0613641738891602),
//                     avg_w: Vector3::new(-0.11153353750705719, 0.10754718631505966, 0.17881946265697479),
//                     d_r: Matrix3::new(  0.99864226579666138 ,-0.044997695833444595 , 0.026243748143315315,
//                     0.044246040284633636 ,  0.99861234426498413 , 0.028559595346450806,
//                     -0.027492452412843704, -0.027359642088413239 ,  0.99924767017364502),
//                     jrg: Matrix3::new(  -0.24986426532268524 , -0.005861983634531498,  0.0041347569786012173,
//                     0.0059417439624667168 ,  -0.24987208843231201 , 0.0036397078074514866,
//                     -0.0040194503962993622, -0.0037665704730898142 ,  -0.24991966784000397),
//                     jvg: Matrix3::new( 0.0028113482985645533 ,   0.21607036888599396   ,0.011531388387084007,
//                     -0.21508744359016418,  0.0045052142813801765  , -0.20458203554153442,
//                     -0.0070871356874704361 ,   0.20357908308506012 ,  0.001615918823517859),
//                     jva: Matrix3::new(   -0.2499011754989624 , 0.0051783248782157898, -0.0025279149413108826,
//                     -0.0051261419430375099 ,  -0.24989570677280426, -0.0032484435942023993,
//                     0.0026217370759695768 , 0.0031652546022087336 ,  -0.24994672834873199),
//                     jpg: Matrix3::new( 0.00016884699289221317   ,  0.01785493828356266  , 0.0010396598372608423,
//                     -0.017811005935072899,   0.0002695916045922786   ,  -0.0171015914529562,
//                     -0.00077334174420684576 ,   0.017058039084076881 , 9.6416042651981115e-05),
//                     jpa: Matrix3::new(  -0.031244566664099693 , 0.00040747309685684741 ,-0.00015605064982082695,
//                     -0.00040484842611476779  , -0.031243981793522835 ,-0.00025183605612255633,
//                     0.00016145186964422464,  0.00024765270063653588 ,   -0.03124721348285675),
//                 }),
//             },
//             KeyFrameDummy {
//                 id: 64,
//                 prev_kf_id: 63,
//                 imu_position: Vector3::new(1.1524062156677246, -0.20127831399440765,-0.046663984656333923),
//                 velocity: Vector3::new(2.821101188659668, -0.51799303293228149,0.36035484075546265),
//                 imu_rotation: Matrix3::new(
//                 0.055149495601654053 ,   0.99553132057189941 , -0.076655119657516479,
//                 -0.99843829870223999 ,  0.054298460483551025 , -0.013143752701580524,
//                 -0.0089227557182312012 ,  0.077260278165340424  ,   0.9969710111618042
//                 ), 
//                 pose: Pose::new(
//                     nalgebra::Vector3::new(-1.0743438005447388, 0.22774022817611694,0.093890011310577393),
//                     nalgebra::Matrix3::new(
//                         0.997886061668396 , 0.039771120995283127 , 0.051397062838077545,
//                         -0.040530771017074585 ,  0.99908268451690674 , 0.013822863809764385,
//                         -0.050800163298845291, -0.015876805409789085 ,  0.99858260154724121
//                     ),
//                 ),
//                 imu_preintegrated: Some(ImuPreIntegrated {
//                     b: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     bu: ImuBias {
//                         bax: 0.0,
//                         bay: 0.0,
//                         baz: 0.0,
//                         bwx: 0.0,
//                         bwy: 0.0,
//                         bwz: 0.0,
//                     },
//                     c: SMatrix::<f64, 15, 15>::from_row_slice(&[
//                         7.2249988214423411e-09,1.3868707349922095e-16,-3.2477567244378904e-16,-2.439433655077039e-10,6.3688108120629749e-09,-4.2310760450803286e-10,-2.0223728941504149e-11,5.256706736567196e-10,-2.6570797645453226e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,1.3738813523971668e-16,7.2250001537099706e-09,-6.8731277512533423e-17,-6.3083818169218375e-09,-4.5664810821577362e-10,-5.9631299897944245e-09,-5.203686925803197e-10,-3.7738985547708381e-11,-4.9387033351777632e-10,0.0,0.0,0.0,0.0,0.0,0.0,
// -3.2610861113519169e-16,-7.0032419381189535e-17,7.2249988214423411e-09,-3.2178659042925162e-11,5.8987170703517222e-09,-2.0829982183556695e-10,-1.1061374906307098e-11,4.8823034504152929e-10,-1.734176344192484e-11,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.439433655077039e-10,-6.3083822610110474e-09,-3.2178659042925162e-11,1.0074306828755653e-06,1.8367428411547593e-10,7.0399188700775994e-09,1.2568834506510029e-07,1.5457470373125837e-11,6.5474614618921123e-10,0.0,0.0,0.0,0.0,0.0,0.0
// ,6.3688143647766537e-09,-4.5664816372692485e-10,5.8987170703517222e-09,1.8367453391565647e-10,1.0141000075236661e-06,-1.9393628369890337e-10,6.8559819280111789e-12,1.2630933099444519e-07,-7.2437728558527592e-12,0.0,0.0,0.0,0.0,0.0,0.0,
// -4.2310752124130602e-10,-5.9631308779728442e-09,-2.0829984959114256e-10,7.0399197582560191e-09,-1.9393602002093502e-10,1.0066802360597649e-06,6.5293787043785301e-10,-1.6270327099499049e-11,1.2562139772853698e-07,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.0223728941504149e-11,-5.2036863706916847e-10,-1.1061381845201002e-11,1.2568835927595501e-07,6.8559611113294672e-12,6.5293781492670178e-10,2.0899189934198148e-08,5.4489458735026974e-13,6.4691932366578442e-11,0.0,0.0,0.0,0.0,0.0,0.0
// ,5.2567095121247576e-10,-3.7738985547708381e-11,4.8823051157498298e-10,1.5457487720360596e-11,1.2630934520529991e-07,-1.6270351385627713e-11,5.4489697259504921e-13,2.0960772673106476e-08,-5.7406081841251955e-13,0.0,0.0,0.0,0.0,0.0,0.0,
// -2.6570790706559322e-11,-4.9387038902892755e-10,-1.7341765176648316e-11,6.5474620170036246e-10,-7.2437520391710475e-12,1.2562139772853698e-07,6.4691932366578442e-11,-5.7405832474752283e-13,2.0892848340281489e-08,0.0,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,9.402204015351856e-11,0.0,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06,0.0
// ,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.2499993974633981e-06

// ]),
//                     info: SMatrix::<f64, 15, 15>::zeros(),
//                     nga_walk: calib.cov_walk,
//                     nga: calib.cov,
//                     d_b: SMatrix::<f64, 6, 1>::zeros(),
//                     measurements: vec![],
//                     d_t: 0.25,
//                     d_v: Vector3::new(1.6854925155639648, -0.028385663405060768, -1.7746956348419189),
//                     d_p: Vector3::new(0.21028308570384979, -0.00044347302173264325, -0.22088718414306641),
//                     avg_a: Vector3::new(6.7419700622558594, -0.11354264616966248, -7.0987825393676758),
//                     avg_w: Vector3::new(-0.14225828647613525, -0.044931761920452118, 0.15497127175331116),
//                     d_r: Matrix3::new(  0.99918335676193237 ,-0.038576405495405197 ,-0.012021909467875957,
//                     0.038978468626737595  , 0.99861901998519897 , 0.035222798585891724,
//                     0.010646537877619267,  -0.03566262498497963 ,  0.99930709600448608),
//                     jrg: Matrix3::new(  -0.24994310736656189 ,-0.0040677343495190144 ,-0.0016440156614407897,
//                     0.004024614579975605 ,  -0.24989940226078033 , 0.0043141790665686131,
//                     0.0017439412185922265, -0.0042737764306366444 ,  -0.24993833899497986),
//                     jvg: Matrix3::new(  0.003523651510477066  ,  0.21838642656803131, -0.0040277931839227676,
//                     -0.21860677003860474 , 0.0059581650421023369 ,  -0.20647343993186951,
//                     0.009931306354701519 ,   0.20668390393257141 , 0.0023938410449773073),
//                     jva: Matrix3::new(  -0.24991720914840698 , 0.0055308579467236996 , 0.0011656370479613543,
//                     -0.0055645778775215149  , -0.24986675381660461 ,-0.0044712903909385204,
//                     -0.0010352382669225335,  0.0045087565667927265 ,  -0.24993821978569031),
//                     jpg: Matrix3::new( 0.00022798196005169302 ,   0.018022384494543076 ,-9.8817698017228395e-05,
//                     -0.018023336306214333 , 0.00037372743827290833 ,  -0.017113681882619858,
//                     0.00046861678129062057 ,  0.017113840207457542, 0.00014418912178371102),
//                     jpa: Matrix3::new(  -0.031244112178683281 , 0.00049509922973811626,  5.3212486818665639e-05,
//                     -0.00049671047599986196 ,  -0.031240982934832573 ,-0.00035818811738863587,
//                     -4.4575957872439176e-05,  0.00036003586137667298 ,  -0.031246326863765717),
//                 },
//             )},

//         ];

//         // Set KeyFrame vertices
//         let mut inc_kf = &keyframes[0];
//         // let mut kf_vertex_fixed = HashMap::new();
    
//         for kf in &keyframes {
//             inc_kf = kf;

//             let imu_calib = ImuCalib::new();

//             let rot = kf.pose.get_quaternion();
//             let imu_rot = nalgebra::geometry::UnitQuaternion::from_rotation_matrix(
//                 & nalgebra::Rotation3::from_matrix(& kf.imu_rotation)
//             ); // lol whateverrr
//             let tcb_rot = imu_calib.tcb.get_quaternion();

//             optimizer.pin_mut().add_vertex_pose(
//                 kf.id,
//                 false,
//                 1, // TODO (Stereo... num cams shouldn't be 1)
//                 kf.imu_position.into(), // imu position
//                 [imu_rot.i, imu_rot.j, imu_rot.k, imu_rot.w], // imu rotation
//                 kf.pose.get_translation().into(), // translation
//                 [rot.i, rot.j, rot.k, rot.w], // rotation
//                 imu_calib.tcb.translation.into(), //tcb translation
//                 [tcb_rot.i, tcb_rot.j, tcb_rot.k, tcb_rot.w], // tcb rotation
//                 imu_calib.tbc.translation.into(), // tbc translation
//                 CAMERA_MODULE.stereo_baseline as f32
//             );

//             if kf.imu_preintegrated.is_some() {
//                 let imu_preintegrated = kf.imu_preintegrated.as_ref().unwrap();
//                 optimizer.pin_mut().add_vertex_velocity(
//                     max_kf_id + 3 * kf.id + 1,
//                     false,
//                     kf.velocity.into()
//                 );

//                 println!("add vertex velocity {}", max_kf_id + 3 * kf.id + 1);
//             }
//         }

//         // Biases
//         optimizer.pin_mut().add_vertex_gyrobias(
//             4 * max_kf_id + 2,
//             false,
//             inc_kf.imu_preintegrated.as_ref().unwrap().b.get_gyro_bias().into()
//         );
//         optimizer.pin_mut().add_vertex_accbias(
//             4 * max_kf_id + 3,
//             false,
//             inc_kf.imu_preintegrated.as_ref().unwrap().b.get_acc_bias().into()
//         );
//         println!("add vertex gyro and acc {} {}", 4 * max_kf_id + 2, 4 * max_kf_id + 3);

//         for kf in & keyframes {
//             if kf.prev_kf_id == -1 ||
//                 kf.imu_preintegrated.is_none()
//             {
//                 continue;
//             }

//             let mut imu_preintegrated = kf.imu_preintegrated.as_ref().unwrap().clone();
//             let prev_kf_id = kf.prev_kf_id;

//             for prev_kf in & keyframes {
//                 if prev_kf.id == prev_kf_id {
//                     imu_preintegrated.set_new_bias(prev_kf.imu_preintegrated.as_ref().unwrap().b);
//                 }
//             }

//             let vp1_id = prev_kf_id;
//             let vv1_id = max_kf_id + 3 * prev_kf_id + 1;

//             let (vg1_id, va1_id, vg2_id, va2_id) = {
//                 let vg1_id = 4 * max_kf_id + 2;
//                 let va1_id = 4 * max_kf_id + 3;
//                 (vg1_id, va1_id, -1, -1)
//             };

//             let vp2_id = kf.id;
//             let vv2_id = max_kf_id + 3 * kf.id + 1;

//             println!("(all of them) {} {} {} {} {} {} ", vp1_id, vv1_id, vg1_id, va1_id, vp2_id, vv2_id);
//             optimizer.pin_mut().add_edge_inertial(
//                 vp1_id,
//                 vv1_id,
//                 vg1_id,
//                 va1_id,
//                 vp2_id,
//                 vv2_id,
//                 (& imu_preintegrated).into(),
//                 true,
//                 16.92
//             );

//             // new_imu_preintegrated_for_kfs.insert(*kf_id, imu_preintegrated);

//         }
//         // for (id, preintegrated) in new_imu_preintegrated_for_kfs {
//         //     debug!("SET KF {} IMU PREINTEGRATED", id);
//         //     map.write().keyframes.get_mut(&id).unwrap().imu_data.imu_preintegrated = Some(preintegrated);
//         // }

//         let vertex_gyro_bias_id = 4 * max_kf_id + 2; // VG
//         let vertex_acc_bias_id = 4 * max_kf_id + 3; // VA

//         // Add prior to comon biases
//         optimizer.pin_mut().add_edge_prior_for_imu(
//             vertex_acc_bias_id,
//             vertex_gyro_bias_id,
//             [0.0, 0.0, 0.0],
//             prior_a,
//             prior_g
//         );


//         let ini_mp_id = max_kf_id * 5;
//         let mps_not_included: HashSet<Id> = HashSet::new(); // vbNotIncludedMP

//         // let mut _edges = Vec::new();
//         // for (mp_id, mp) in & map.read()?.mappoints {
//         //     let id = mp_id + ini_mp_id + 1;
//         //     optimizer.pin_mut().add_vertex_sbapointxyz(
//         //         id,
//         //         Pose::new(* mp.position, Matrix3::identity()).into(),
//         //         false, // todo should this be false? not specified 
//         //         true
//         //     );

//         //     let mut all_fixed = true;

//         //     //Set edges
//         //     for (kf_id, (left_index, right_index)) in mp.get_observations() {
//         //         if *kf_id > max_kf_id {
//         //             continue;
//         //         }

//         //         if *left_index != -1 && *right_index == -1 {
//         //             let (keypoint, _) = map.read()?.keyframes.get(kf_id).unwrap().features.get_keypoint(*left_index as usize);
//         //             _edges.push(
//         //                 optimizer.pin_mut().add_edge_mono_binary(
//         //                     true, id, * kf_id,
//         //                     *mp_id,
//         //                     keypoint.pt().x, keypoint.pt().y,
//         //                     INV_LEVEL_SIGMA2[keypoint.octave() as usize],
//         //                     * TH_HUBER_MONO
//         //                 )
//         //             );

//         //             if all_fixed && ! kf_vertex_fixed.get(kf_id).unwrap() {
//         //                 all_fixed = false;
//         //             }
//         //         }

//         //         if *right_index != -1 {
//         //             todo!("Stereo");
//         //             // kpUn = pKFi->mvKeysUn[leftIndex];
//         //             // const float kp_ur = pKFi->mvuRight[leftIndex];
//         //             // Eigen::Matrix<double,3,1> obs;
//         //             // obs << kpUn.pt.x, kpUn.pt.y, kp_ur;

//         //             // EdgeStereo* e = new EdgeStereo(0);

//         //             // g2o::OptimizableGraph::Vertex* VP = dynamic_cast<g2o::OptimizableGraph::Vertex*>(optimizer.vertex(pKFi->mnId));
//         //             // if(bAllFixed)
//         //             //     if(!VP->fixed())
//         //             //         bAllFixed=false;

//         //             // e->setVertex(0, dynamic_cast<g2o::OptimizableGraph::Vertex*>(optimizer.vertex(id)));
//         //             // e->setVertex(1, VP);
//         //             // e->setMeasurement(obs);
//         //             // const float invSigma2 = pKFi->mvInvLevelSigma2[kpUn.octave];

//         //             // e->setInformation(Eigen::Matrix3d::Identity()*invSigma2);

//         //             // g2o::RobustKernelHuber* rk = new g2o::RobustKernelHuber;
//         //             // e->setRobustKernel(rk);
//         //             // rk->setDelta(thHuberStereo);

//         //             // optimizer.addEdge(e);
//         //         }
//         //         {
//         //             // TODO multiple cameras
//         //             // if(pKFi->mpCamera2){ // Monocular right observation
//         //             //     int rightIndex = get<1>(mit->second);

//         //             //     if(rightIndex != -1 && rightIndex < pKFi->mvKeysRight.size()){
//         //             //         rightIndex -= pKFi->NLeft;

//         //             //         Eigen::Matrix<double,2,1> obs;
//         //             //         kpUn = pKFi->mvKeysRight[rightIndex];
//         //             //         obs << kpUn.pt.x, kpUn.pt.y;

//         //             //         EdgeMono *e = new EdgeMono(1);

//         //             //         g2o::OptimizableGraph::Vertex* VP = dynamic_cast<g2o::OptimizableGraph::Vertex*>(optimizer.vertex(pKFi->mnId));
//         //             //         if(bAllFixed)
//         //             //             if(!VP->fixed())
//         //             //                 bAllFixed=false;

//         //             //         e->setVertex(0, dynamic_cast<g2o::OptimizableGraph::Vertex*>(optimizer.vertex(id)));
//         //             //         e->setVertex(1, VP);
//         //             //         e->setMeasurement(obs);
//         //             //         const float invSigma2 = pKFi->mvInvLevelSigma2[kpUn.octave];
//         //             //         e->setInformation(Eigen::Matrix2d::Identity()*invSigma2);

//         //             //         g2o::RobustKernelHuber* rk = new g2o::RobustKernelHuber;
//         //             //         e->setRobustKernel(rk);
//         //             //         rk->setDelta(thHuberMono);

//         //             //         optimizer.addEdge(e);
//         //             //     }
//         //         }
//         //     }

//         //     if all_fixed {
//         //         optimizer.pin_mut().remove_vertex(id);
//         //         mps_not_included.insert(* mp_id);
//         //     }
//         // }


//         // println!("OPTIMIZE!");
//         // Compute error for different scales
//         optimizer.pin_mut().optimize(its, false, false);
//         println!("OPTIMIZATION DONE!");
    }

    // #[test]
    fn test_inertial_optimization_initialization() {
        let mut system_config = env::current_dir().unwrap();
        system_config.push("orbslam_config.yaml");
        let mut dataset_config = env::current_dir().unwrap();
        dataset_config.push("config_datasets/EUROC.yaml");
        let _ = load_config(
            &system_config.into_os_string().into_string().unwrap(),
            &dataset_config.into_os_string().into_string().unwrap()
        ).expect("Could not load config");

        let camera_param = [458.654, 457.296, 367.215, 248.375];
        let fixed_velocity = false;
        let is_mono = true;
        let its = 200;

        let prior_g = 100;
        let mut rwg = DVMatrix3::new(nalgebra::Matrix3::new(
        1.0, -0.00016157647769432515 ,9.8132491984870285e-05  , 
        -0.00016157647769432515 ,-0.46106278896331787  ,0.8873676061630249  ,
        -9.8132491984870285e-05,-0.8873676061630249,-0.46106278896331787,
        ));

        let max_kf_id = 69;

        let mut optimizer = g2o::ffi::new_sparse_optimizer(5, camera_param, 1e3);

        struct KeyFrameDummy {
            id: Id,
            pose: Pose,
            imu_rotation: nalgebra::Matrix3<f64>,
            imu_position: nalgebra::Vector3<f64>,
            velocity: nalgebra::Vector3<f64>,
            prev_kf_id: Id,
            imu_preintegrated: Option<ImuPreIntegrated>,
        }
        let calib = ImuCalib::new();
        let mut keyframes = vec![
            KeyFrameDummy {
                id: 68,
                prev_kf_id: 67,
                imu_position: Vector3::new(0.052563358098268509, -0.013941730372607708,-0.033148720860481262),
                velocity: Vector3::new(-0.0056146830320358276, 0.0041640214622020721,0.0051008909940719604),
                imu_rotation: Matrix3::new(
                    0.021454691886901855,   0.99951684474945068, -0.022494221106171608,
                    -0.94412875175476074,  0.027656733989715576,   0.32841458916664124,
                    0.3288780152797699,  0.014191381633281708,   0.94426578283309937,
                ),
                pose: Pose::new(
                    nalgebra::Vector3::new(0.012558214366436005, -0.017952475696802139,0.027652006596326828),
                    nalgebra::Matrix3::new(
                        0.99997293949127197 , 0.0051449206657707691, -0.0052638892084360123,
                        -0.0065767262130975723 ,   0.94566380977630615,   -0.32507959008216858,
                        0.0033053609076887369 ,   0.32510539889335632,    0.94567203521728516),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    d_t: 0.25,
                    d_v: Vector3::new(1.6429973840713501, -0.067040152847766876, -1.7987534999847412),
                    d_p: Vector3::new(0.20898465812206268, -0.010243882425129414, -0.22423473000526428),
                    avg_a: Vector3::new(6.5719900131225586, -0.26816067099571228, -7.1950139999389648),
                    avg_w: Vector3::new(0.053421001881361008, 0.11258066445589066, 0.052722882479429245),
                    d_r: Matrix3::new(  0.99951821565628052, -0.012850119732320309 , 0.028258049860596657,
                    0.0132281593978405 ,   0.9998248815536499, -0.013237475417554379,
                    -0.028082994744181633 , 0.013604897074401379 ,  0.99951308965682983),
                    jrg: Matrix3::new(  -0.24994572997093201, -0.0023396611213684082,  0.0038452290464192629,
                    0.0022838604636490345,   -0.24996654689311981, -0.0029007107950747013,
                    -0.0038778628222644329 , 0.0028544871602207422 ,     -0.24993896484375),
                    jvg: Matrix3::new(0.00032438893686048687  ,  0.22095794975757599, -0.0061512556858360767,
                    -0.21954268217086792, 0.00045660970499739051 ,   -0.1992410272359848,
                    0.0065900329500436783 ,   0.19764706492424011, 0.00022740301210433245),
                    jva: Matrix3::new(    -0.2499653697013855,  0.00092204747488722205,  -0.0031115268357098103,
                    -0.000938445795327425  ,  -0.24999192357063293  ,0.00042617274448275566,
                    0.0031041447073221207, -0.00044800818432122469 ,   -0.24996590614318848),
                    jpg: Matrix3::new( 7.2877637649071403e-06  ,  0.018152430653572083, -0.00054425763664767146,
                    -0.018075786530971527,  3.3148731745313853e-05,   -0.016706325113773346,
                    0.0005788921844214201 ,   0.016622750088572502,  2.9583998184534721e-05),
                    jpa: Matrix3::new(  -0.031248195096850395 , 3.8365404179785401e-05, -0.00022042570344638079,
                    -3.8733913243049756e-05 ,  -0.031249659135937691, -2.7432235583546571e-05,
                    0.00022018638264853507,  2.6502557375351898e-05 ,  -0.031248185783624649),

                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },

                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2250001537099706e-09, 1.0082096851802988e-16, 6.7021177549031095e-17, -8.9622871624062128e-11, 6.2221605645618183e-09, -2.5894800192993728e-10, -7.4053870674495315e-12, 5.1083975938226445e-10, -2.2945437216925768e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        1.0059963483844539e-16, 7.2249983773531312e-09, 1.5142335206171222e-16, -6.3820384532675689e-09, -4.3388387500897796e-12, -5.7089368787899275e-09, -5.2426585295251016e-10, -2.0493014837169587e-13, -4.8010229125594606e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.8425042014876492e-17, 1.5228463898528204e-16, 7.2250032623344396e-09, 2.6791507901080536e-10, 5.889965404293207e-09, 7.0432763787930952e-11, 2.3534858090146216e-11, 4.9498971588235463e-10, 5.8903407325339163e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -8.962285774627432e-11, -6.3820380091783591e-09, 2.6791519003310782e-10, 1.0075930276798317e-06, 2.0130631883663597e-10, 6.825782605801578e-09, 1.2570120588861755e-07, 1.9661295161399472e-11, 6.439622168841197e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.2221583441157691e-09, -4.3388378827280416e-12, 5.8899636279363676e-09, 2.0130623556990912e-10, 1.0137289336853428e-06, -2.2335473748302803e-10, 2.1568587194042976e-11, 1.262818614122807e-07, -2.3821965233761233e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.5894789090763481e-10, -5.7089373228791374e-09, 7.0432763787930952e-11, 6.8257839380692076e-09, -2.2335475136081584e-10, 1.0061500006486312e-06, 6.3228455804420491e-10, -2.1346492282137142e-11, 1.2558227524550603e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -7.4053888021730074e-12, -5.2426585295251016e-10, 2.3534866763763596e-11, 1.2570119167776284e-07, 2.1568592398213404e-11, 6.3228450253305368e-10, 2.0900333908002722e-08, 2.2948008510798035e-12, 6.3581181986016588e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.1083981489341568e-10, -2.0492919969479495e-13, 4.9498988241580832e-10, 1.9661288222505569e-11, 1.2628184720142599e-07, -2.134649748630757e-11, 2.2948002005585e-12, 2.0958855984076763e-08, -2.4832714010103452e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.2945437216925768e-11, -4.8010229125594606e-10, 5.8903411662147853e-12, 6.4396232790642216e-10, -2.3821961764314281e-11, 1.2558228945636074e-07, 6.3581181986016588e-11, -2.4832720515316486e-12, 2.0889984853056376e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                }),
            },
            KeyFrameDummy {
                id: 64,
                prev_kf_id: 63,
                imu_position: Vector3::new(0.065153799951076508, -0.016293080523610115,-0.017578557133674622),
                velocity: Vector3::new(-0.0066125094890594482, 0.0043714866042137146,-0.014322683215141296),
                imu_rotation: Matrix3::new(
                    0.017522633075714111  , 0.99956923723220825, -0.023545842617750168,
                    -0.92469871044158936,  0.025158286094665527 ,   0.3798677921295166,
                    0.3802964985370636,  0.015116488561034203 ,  0.92474108934402466,
                ), 
                pose: Pose::new(
                nalgebra::Vector3::new(4.174098648945801e-05, -0.012059287168085575,0.014219397678971291),
                nalgebra::Matrix3::new(
                    0.99999397993087769,  0.0016103017842397094 ,-0.0030716161709278822,
                    -0.0026484080590307713 ,   0.92639189958572388  , -0.37655144929885864,
                    0.0022391590755432844 ,   0.37655732035636902 ,   0.92639058828353882),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2250014859776002e-09, 1.3596882565747369e-16, -3.4398113867115544e-17, -2.3145352301412458e-10, 6.6276690802169469e-09, -4.1616543544620299e-10, -1.9244784585370489e-11, 5.4923071646229005e-10, -4.2104320030489362e-11,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        1.3705271019260397e-16, 7.2249992655315509e-09, -1.1881407913496916e-16, -6.6764913597694431e-09, -2.696910750277226e-10, -5.5709707957873889e-09, -5.5344390181844005e-10, -2.2450985515121147e-11, -4.7516279799708627e-10,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        -4.0391437760478705e-17, -1.1870564568283081e-16, 7.2249992655315509e-09, 1.7498444360164456e-10, 5.6365796474722174e-09, -4.3169884333948971e-11, 2.1648304676658015e-11, 4.8085441184397837e-10, -3.7378789299880033e-12,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        -2.3145349525854897e-10, -6.6764904715910234e-09, 1.7498440196828113e-10, 1.0083475672217901e-06, 2.5972224371173525e-10, 7.0187820000455758e-09, 1.2577845609484939e-07, 2.6254621740551265e-11, 6.7393107761049009e-10,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        6.6276708565737863e-09, -2.6969115829444945e-10, 5.6365783152045879e-09, 2.5972218820058401e-10, 1.0142481414732174e-06, -3.0723820709788185e-10, 3.2387585668924856e-11, 1.2634765766961209e-07, -3.8146940467553847e-11,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        -4.1616532442390053e-10, -5.5709712398765987e-09, -4.3169891272842875e-11, 7.0187828882239955e-09, -3.0723801280885255e-10, 1.0059244459625916e-06, 6.5754540701234987e-10, -3.0132184941633611e-11, 1.2557227080378652e-07,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        -1.9244777646476585e-11, -5.5344373528498636e-10, 2.1648296003040635e-11, 1.2577848451655882e-07, 3.2387582199477905e-11, 6.5754524047889618e-10, 2.0908622389015363e-08, 3.4356070505864311e-12, 6.7306514528464589e-11,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        5.4923060543998758e-10, -2.2450990719291575e-11, 4.8085430082167591e-10, 2.6254606128039981e-11, 1.2634765766961209e-07, -3.0132191880527515e-11, 3.4356077011077346e-12, 2.0967176439512514e-08, -3.9244913742353393e-12,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        -4.210429921380765e-11, -4.7516274248593504e-10, -3.7378784963071343e-12, 6.7393118863279255e-10, -3.8146933528659943e-11, 1.2557228501464124e-07, 6.7306528406252397e-11, -3.9244918079162083e-12, 2.0890219332159177e-08,0.0, 0.0,0.0, 0.0,0.0, 0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0, 9.402204015351856e-11,0.0, 0.0,0.0, 0.0,0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 9.402204015351856e-11,0.0, 0.0,0.0, 0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0, 9.402204015351856e-11,0.0, 0.0,0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 2.2499993974633981e-06,0.0, 0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0, 2.2499993974633981e-06,0.0, 
                        0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 0.0,0.0, 2.2499993974633981e-06, 
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],

                    d_t: 0.25,
                    d_v: Vector3::new(1.6419531106948853, -0.087301231920719147, -1.8895825147628784),
                    d_p: Vector3::new(0.21322952210903168, -0.013840669766068459, -0.23656366765499115),
                    avg_a: Vector3::new(6.567812442779541, -0.3492048978805542, -7.5583300590515137),
                    avg_w: Vector3::new(-0.025488810613751411, 0.033105131238698959, 0.1383558064699173),
                    d_r: Matrix3::new(   0.99937331676483154 , -0.034430492669343948 , 0.0082003436982631683,
                    0.034369952976703644  ,   0.9993816614151001 , 0.0074039222672581673,
                    -0.0084500368684530258 , -0.007117297500371933 ,   0.99993878602981567),
                    jrg: Matrix3::new(   -0.24985414743423462  ,-0.0034763282164931297 ,  0.0067102992907166481,
                    0.0034860249143093824  ,  -0.24996092915534973 , 0.00030672946013510227,
                    -0.006699955090880394, -0.00041044500540010631,    -0.24989157915115356),
                    jvg: Matrix3::new( 0.0031738136895000935 ,   0.23110058903694153 ,-0.0068172644823789597,
                    -0.23519101738929749 ,  0.004162592813372612  , -0.18804806470870972,
                    0.010513150133192539,    0.19303227961063385, 0.00061804498545825481),
                    jva: Matrix3::new(  -0.24987401068210602 , 0.0050426111556589603 , 0.0046668448485434055,
                    -0.005067234393209219  , -0.24993045628070831, -0.0012944695772603154,
                    -0.0046341712586581707 , 0.0013802256435155869 ,  -0.24993523955345154),
                    jpg: Matrix3::new( 0.00019500848429743201  ,  0.019156645983457565, -0.00082564353942871094,
                    -0.019491299986839294  ,0.00027035709354095161 ,  -0.016074687242507935,
                    0.0010691339848563075 ,   0.016472630202770233,  3.7503567000385374e-05),
                    jpa: Matrix3::new(  -0.031236687675118446 , 0.00044004622031934559 , 0.00066876161145046353,
                    -0.00044324048212729394 ,  -0.031245039775967598, -0.00012564445205498487,
                    -0.0006662395317107439 , 0.00013625934661831707 ,  -0.031240936368703842),
                }),

            },

            KeyFrameDummy {
                id: 65,
                prev_kf_id: 64,
                imu_position: Vector3::new(0.063500672578811646, -0.015200208872556686,-0.021159227937459946),
                velocity: Vector3::new(-0.018723160028457642, 0.0044164732098579407,-0.026826575398445129),
                imu_rotation: Matrix3::new(
                    0.026538729667663574   , 0.9991946816444397 ,-0.030099082738161087,
                    -0.93110984563827515,  0.035664916038513184 ,  0.36299145221710205,
                    0.36377257108688354 , 0.018392154946923256  , 0.93130624294281006,
                ), 
                pose: Pose::new(
                    Vector3::new(0.0019119349308311939, -0.01340000331401825,0.017429372295737267),
                    Matrix3::new(
                    0.99992245435714722  , 0.012451961636543274 ,-0.0002122418227372691,
                    -0.011693690903484821 ,   0.93289607763290405 ,  -0.35995578765869141,
                    -0.0042841555550694466 ,    0.3599303662776947 ,   0.93296933174133301),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2249974891747115e-09, 8.5059644133317878e-17, 4.9567980952794981e-17, -1.9323265210147156e-10, 6.5186678277484589e-09, -5.6113363955390128e-10, -1.5854699497719338e-11, 5.3541576727766937e-10, -4.5362172351737229e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        8.5054092097046422e-17, 7.2250010418883903e-09, 8.5329159429222356e-17, -6.6390675179661685e-09, -1.4317082241976919e-10, -5.3189088689009623e-09, -5.4513521474675031e-10, -1.1810889072316755e-11, -4.2930015098363583e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        4.9926391694769307e-17, 8.4678849883967867e-17, 7.2249988214423411e-09, 4.5884124277861815e-10, 5.4840878505046931e-09, 2.6600017327682579e-11, 3.7168882555116411e-11, 4.4284820255313662e-10, 2.1453336069426898e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.9323265210147156e-10, -6.6390666297877488e-09, 4.5884129828976938e-10, 1.0082437711389503e-06, 4.0729325467836475e-10, 6.5623488865185209e-09, 1.2576076358072896e-07, 3.6731593461292178e-11, 5.972326522218907e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.5186656073024096e-09, -1.43170836297557e-10, 5.4840887386831128e-09, 4.0729325467836475e-10, 1.0134561989616486e-06, -5.09714104257597e-10, 3.6230653893687403e-11, 1.2623439715753193e-07, -4.5412142796186217e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -5.6113358404275004e-10, -5.318909757079382e-09, 2.6600024266576483e-11, 6.5623502187861504e-09, -5.0971393772414331e-10, 1.0052762036139029e-06, 6.0459559581005351e-10, -4.6621442817418313e-11, 1.2547928918138496e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.5854699497719338e-11, -5.4513499270214538e-10, 3.7168889494010315e-11, 1.2576076358072896e-07, 3.6230657363134355e-11, 6.0459554029890228e-10, 2.0906128384012845e-08, 3.4590180112564761e-12, 5.8754383303050162e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.3541543421076199e-10, -1.1810887337593279e-11, 4.4284831357543908e-10, 3.673159693073913e-11, 1.262343687358225e-07, -4.6621435878524409e-11, 3.4590184449373451e-12, 2.0952144907937509e-08, -4.3930987320139891e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -4.5362161943396373e-11, -4.2930026200593829e-10, 2.1453344743044278e-12, 5.9723276324419317e-10, -4.5412149735080121e-11, 1.2547931760309439e-07, 5.8754376364156258e-11, -4.3930995993757271e-12, 2.0877806150565448e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],

                    d_t: 0.25,
                    d_v: Vector3::new(1.4808341264724731, -0.11205725371837616, -1.8657259941101074),
                    d_p: Vector3::new(0.18199270963668823, -0.013411546126008034, -0.23184247314929962),
                    avg_a: Vector3::new(5.9233365058898926, -0.44822901487350464, -7.4629039764404297),
                    avg_w: Vector3::new(0.02710844948887825, 0.09195806086063385, 0.11060495674610138),
                    d_r: Matrix3::new(   0.99935609102249146,  -0.027493512257933617 ,   0.02305203303694725,
                    0.027656316757202148   , 0.99959439039230347 ,-0.0067775910720229149,
                    -0.022856350988149643 ,  0.007410719059407711  ,  0.99971127510070801),
                    jrg: Matrix3::new(   -0.24995166063308716,  -0.0040483647026121616 , 0.00040941667975857854,
                    0.0040432210080325603   , -0.24995721876621246, -0.00076707237167283893,
                    -0.00042611887329258025 , 0.00074987602420151234  ,  -0.24999085068702698),
                    jvg: Matrix3::new(  0.0018189355032518506  ,   0.22987619042396545  , -0.014887768775224686,
                    -0.22657132148742676 ,   0.001055364846251905 ,   -0.18857833743095398,
                    0.015584514476358891 ,    0.18440923094749451, -0.00020024206605739892),
                    jva: Matrix3::new(  -0.24991331994533539,  0.0027749941218644381, -0.0052749426104128361,
                    -0.002799157053232193  ,  -0.2499738484621048 ,0.00092200521612539887,
                    0.0052598277106881142, -0.0009917145362123847 ,  -0.24993434548377991),
                    jpg: Matrix3::new( 0.00010889454279094934 ,    0.01887618750333786 ,  -0.001191579969599843,
                    -0.018650669604539871 , 6.1827282479498535e-05 ,  -0.015175336040556431,
                    0.001230010180734098 ,   0.014886263757944107, -7.9605088103562593e-06),
                    jpa: Matrix3::new(   -0.03124280646443367 , 0.00020525595755316317 , -0.0005455060163512826,
                    -0.00020715997379738837 ,  -0.031248642131686211 , 7.5453943281900138e-05,
                    0.00054462754633277655, -8.0382160376757383e-05,   -0.031243832781910896),
                }),

            },

            KeyFrameDummy {
                id: 61,
                prev_kf_id: 60,
                imu_position: Vector3::new(0.064934507012367249, -0.019465934485197067,-0.010194282978773117),
                velocity: Vector3::new(-0.0010384023189544678, -0.0044052079319953918,-0.020647265017032623),
                imu_rotation: Matrix3::new(
                    0.012374401092529297 ,  0.99853307008743286 ,-0.052712421864271164,
                    -0.99968439340591431,  0.013506889343261719,  0.021181788295507431,
                    0.0218626968562603,  0.052433673292398453  , 0.99838507175445557,
                ), 
                pose: Pose::new(
                nalgebra::Vector3::new(0.0005503623397089541, -0.0015742180403321981,0.0042237979359924793),
                nalgebra::Matrix3::new(
                    0.9996335506439209, -0.0019058283651247621 ,  0.027002641931176186,
                    0.002374232979491353 ,   0.99984711408615112,  -0.017325188964605331,
                    -0.026965493336319923 ,  0.017382951453328133 ,   0.99948519468307495),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        4.3349932532521507e-09, -1.3794795784340276e-16, 9.6516062529952809e-17, -1.4090595010229912e-11, 1.4528869218821683e-09, -5.1405862205866626e-11, -6.953002084676696e-13, 7.2168097886571303e-11, -2.883886272148084e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.3843639145150308e-16, 4.3349914768953113e-09, -6.0446137235528792e-17, -1.4117093050103335e-09, 5.7898293798208655e-11, -2.8886346647993832e-09, -7.0115371841872332e-11, 2.8741405956600463e-12, -1.4341038079290769e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        9.6296892754850759e-17, -6.0717439241556384e-17, 4.3349919209845211e-09, 5.7736405933983548e-11, 2.869410264949579e-09, 7.3503057806956207e-11, 3.1990033452083955e-12, 1.4245890578301612e-10, 3.6537964494265385e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.4090596744953388e-11, -1.4117091939880311e-09, 5.77364094034305e-11, 6.0062671991545358e-07, 2.1459750643160191e-11, 1.2838807794679497e-09, 4.5034916240638267e-08, 1.1863321739899457e-12, 7.1788873456934965e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        1.4528865888152609e-09, 5.7898293798208655e-11, 2.8694093767711593e-09, 2.1459698601455912e-11, 6.0325271533656633e-07, -1.0521290436105168e-11, 1.325322338853463e-12, 4.5181849372966099e-08, -6.5002793729271313e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -5.140585179752577e-11, -2.8886339986655685e-09, 7.3503050868062303e-11, 1.2838802243564373e-09, -1.0521280895126051e-11, 6.02625163992343e-07, 7.1696759640360597e-11, -5.8079295496213379e-13, 4.5146844485088877e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -6.9530026267777822e-13, -7.0115364902978428e-11, 3.199003128367961e-12, 4.5034916240638267e-08, 1.3253252661993287e-12, 7.1696780457042308e-11, 4.5008130555856951e-09, 7.2685333771770055e-14, 4.2719001079605246e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        7.2168111764359111e-11, 2.8741405956600463e-12, 1.4245889190522831e-10, 1.18632924664408e-12, 4.5181856478393456e-08, -5.8079197918017855e-13, 7.2685123707599136e-14, 4.5095815970341846e-09, -3.5632409430821563e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.8838851879459115e-12, -1.4341035303733207e-10, 3.6537955820648005e-12, 7.1788852640253253e-11, -6.5002902149488562e-13, 4.5146844485088877e-08, 4.2719001079605246e-12, -3.5632612718728904e-14, 4.5075023713536666e-09, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.6413235194341382e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.6413235194341382e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.6413235194341382e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3499997066901415e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3499997066901415e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.3499997066901415e-06,
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                    d_t: 0.14999985694885254,
                    d_v: Vector3::new(1.3873128890991211, -0.013748855330049992, -0.68327921628952026),
                    d_p: Vector3::new(0.10463036596775055, -0.0012681121006608009, -0.051898114383220673),
                    avg_a: Vector3::new(9.2487621307373047, -0.091659113764762878, -4.5551986694335938),
                    avg_w: Vector3::new(0.16837774217128754, -0.091909013688564301, 0.069475725293159485),
                    d_r: Matrix3::new(   0.9998508095741272 , -0.01053972914814949 ,-0.013685550540685654,
                    0.010190709494054317 ,  0.99962717294692993 ,-0.025329751893877983,
                    0.013947419822216034 , 0.025186512619256973 ,  0.99958544969558716),
                    jrg: Matrix3::new(  -0.14999215304851532 ,-0.0007614466012455523 ,-0.0011042744154110551,
                    0.00077580829383805394 ,  -0.14998647570610046, -0.0013885356020182371,
                    0.0010938690975308418 , 0.0013958389172330499 ,  -0.14998398721218109),
                    jvg: Matrix3::new(0.00016614087508060038 ,  0.048872664570808411 , -0.001321782823652029,
                    -0.04930848628282547 ,-0.0009747506701387465,  -0.099783279001712799,
                    0.0011054986389353871 ,  0.099985994398593903 ,-0.0011517694219946861),
                    jva: Matrix3::new(   -0.14999328553676605 , 0.00077400804730132222 , 0.00092895393026992679,
                    -0.00075520062819123268  ,  -0.14997455477714539 ,  0.0023365109227597713,
                    -0.00094421522226184607 , -0.0023300747852772474  ,  -0.14997319877147675),
                    jpg: Matrix3::new( 6.2933777371654287e-06  , 0.0024275716859847307, -7.1240865509025753e-05,
                    -0.0024441683199256659 ,-3.8114569179015234e-05  ,-0.0049565881490707397,
                    6.2396778957918286e-05,   0.0049641914665699005 ,-4.4967961002839729e-05),
                    jpa: Matrix3::new(  -0.011249741539359093 , 3.8502697861986235e-05 , 4.5719956688117236e-05,
                    -3.7752968637505546e-05 ,  -0.011248891241848469 , 0.00012551977124530822,
                    -4.6332588681252673e-05, -0.00012528603838291019 ,  -0.011248843744397163),
                }),
            },
            KeyFrameDummy {
                id: 63,
                prev_kf_id: 62,
                imu_position: Vector3::new(0.065321557223796844, -0.014800267294049263,-0.015544840134680271),
                velocity: Vector3::new(-0.00067102909088134766, -0.0059712529182434082,-0.0081348679959774017),
                imu_rotation: Matrix3::new(
                    0.0027487277984619141  , 0.99959427118301392 , -0.02835303358733654,
                    -0.92415308952331543 , 0.013370513916015625 ,  0.38178843259811401,
                    0.38201260566711426 , 0.025153091177344322  , 0.92381477355957031,
                ), 
                pose: Pose::new(
                    nalgebra::Vector3::new(-0.00013583186955656856, -0.013674730435013771,0.012104427441954613),
                    nalgebra::Matrix3::new(
                    0.99992328882217407  ,-0.010213621892035007 , 0.0070099327713251114,
                    0.012106046080589294 ,  0.92567718029022217  , -0.37812060117721558,
                    -0.0026269541122019291 ,   0.37817645072937012 ,   0.92572981119155884),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2249819460523668e-09, 8.3139354267443375e-16, -1.25338244532077e-16, -1.5811764397799521e-10, 6.5315943764687745e-09, -3.7774589012329329e-10, -1.3611185095685485e-11, 5.3451687520578162e-10, -2.8468364818290404e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        8.3269453234185715e-16, 7.2249983773531312e-09, -2.3456934230290175e-15, -4.7470338770949638e-09, -2.9523283817667334e-10, -7.3793144927947196e-09, -3.9259973050320696e-10, -2.4046212937500755e-11, -5.888265430797901e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.2092567933291493e-16, -2.3448264848075027e-15, 7.2249815019631569e-09, 5.7817153842343316e-11, 5.8645377443156121e-09, -2.8346497024656081e-11, 2.8404075966270703e-12, 4.6422385380218145e-10, -2.7213374782786293e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.581176162224196e-10, -4.7470316566489146e-09, 5.7817167720131124e-11, 1.0042114126918023e-06, 1.2261591741946631e-10, 6.4914504882551682e-09, 1.2539211979856191e-07, 1.0985435651422737e-11, 5.8364513222386449e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.5315939323795646e-09, -2.9523281042109772e-10, 5.8645377443156121e-09, 1.2261541781910523e-10, 1.014223812489945e-06, -7.9501599747899832e-11, 9.6837962995643956e-12, 1.2628736101305549e-07, -6.3572771179243315e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -3.7774583461214206e-10, -7.3793144927947196e-09, -2.8346502228826509e-11, 6.4914478237199091e-09, -7.950157893121812e-11, 1.0100156941916794e-06, 6.0104737853450274e-10, -7.3854923912652914e-12, 1.258955961702668e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.3611183360962009e-11, -3.9259953621417765e-10, 2.8404101987122843e-12, 1.2539210558770719e-07, 9.6838283919487012e-12, 6.0104771160141013e-10, 2.087018735608126e-08, 1.0053199592241491e-12, 5.7659873403670403e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.3451654213887423e-10, -2.4046212937500755e-11, 4.6422379829103022e-10, 1.0985395752782789e-11, 1.262873752239102e-07, -7.3854889218183395e-12, 1.0053171402985006e-12, 2.0955647883624806e-08, -6.8302920827947866e-13, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.8468359614119976e-11, -5.8882665410209256e-10, -2.7213374782786293e-12, 5.8364479915695711e-10, -6.3572736484773795e-12, 1.258955961702668e-07, 5.7659838709200883e-11, -6.8302909985926141e-13, 2.0916758103339816e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06,
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                    d_t: 0.25,
                    d_v: Vector3::new(2.0204722881317139, -0.031902521848678589, -1.3421415090560913),
                    d_p: Vector3::new(0.24441269040107727, -0.0045811561867594719, -0.16785305738449097),
                    avg_a: Vector3::new(8.0818881988525391, -0.12761008739471436, -5.3685660362243652),
                    avg_w: Vector3::new(-0.046348940581083298, -1.0723792314529419, 0.15366570651531219),
                    d_r: Matrix3::new(  0.96356040239334106, -0.035324349999427795  ,-0.26514852046966553,
                    0.038633696734905243   ,0.99922704696655273 ,  0.00727464584633708,
                    0.26468658447265625, -0.017253227531909943 ,  0.96418017148971558),
                    jrg: Matrix3::new(  -0.24691601097583771  , -0.00555811682716012 ,  -0.03277004137635231,
                    0.0051838443614542484 ,  -0.24991427361965179  ,0.0027889225166290998,
                    0.032829716801643372, -0.0018560719909146428  , -0.24697643518447876),
                    jvg: Matrix3::new(  0.0012895995751023293    , 0.16432088613510132  ,-0.0032768240198493004,
                    -0.18606241047382355  , 0.0019865033682435751   , -0.23971183598041534,
                    0.0058625494129955769   ,  0.25559434294700623, -0.00031180353835225105),
                    jva: Matrix3::new(   -0.24689684808254242 ,  0.0038762595504522324   , 0.033148035407066345,
                    -0.0040240464732050896   , -0.24995122849941254 ,-0.00025768263731151819,
                    -0.033129226416349411  , 0.0010080542415380478   ,-0.24694061279296875),
                    jpg: Matrix3::new( 8.3343424194026738e-05 ,   0.013591304421424866 ,-0.00020501766994129866,
                    -0.014879333786666393 , 0.00010784313781186938  , -0.019455114379525185,
                    0.00034802916343323886  ,  0.020395580679178238 , -1.173567034129519e-05),
                    jpa: Matrix3::new(  -0.031061571091413498 , 0.00029760182951577008 ,  0.0026778646279126406,
                    -0.00030240518390201032  , -0.031247382983565331, -2.0014349502162077e-06,
                    -0.0026772797573357821 , 4.5487053284887224e-05  , -0.031064065173268318),
                }),
            },
            KeyFrameDummy {
                id: 67,
                prev_kf_id: 66,
                imu_position: Vector3::new(0.055349759757518768, -0.013602577149868011,-0.032469864934682846),
                velocity: Vector3::new(-0.011145606637001038, -0.001356612890958786,-0.0027154237031936646),
                imu_rotation: Matrix3::new(
                    0.027684986591339111   , 0.99958515167236328 ,-0.0079379212111234665,
                    -0.93630492687225342 ,  0.028711855411529541 ,   0.35001230239868164,
                    0.35009503364562988, -0.0022577759809792042  ,  0.93671143054962158,
                ), 
                pose: Pose::new(
                nalgebra::Vector3::new(0.0092766145244240761, -0.018495311960577965,0.02612202987074852),
                nalgebra::Matrix3::new(
                    0.99975878000259399 ,0.0057592187076807022  , -0.0211956687271595,
                    -0.012750620953738689  , 0.93793791532516479 , -0.34656870365142822,
                    0.017884258180856705 ,  0.34675535559654236  , 0.93778508901596069),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2249988214423411e-09, -1.9760962676448832e-17, -2.5496826604154863e-17, -4.5963368527912607e-11, 6.2078422402578326e-09, -2.8427230014393956e-10, -3.7553588710936836e-12, 5.1404464018744989e-10, -2.6602744312986815e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.9868875004801275e-17, 7.2249966009962918e-09, 4.6438240534804644e-17, -6.1122475969455081e-09, -7.3048428417266109e-11, -5.8848987904980277e-09, -5.0643911286840648e-10, -5.9791238800344093e-12, -4.6928322339212514e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.6258823730077487e-17, 4.6220394248682679e-17, 7.2250010418883903e-09, 2.1258614313346413e-10, 5.7849658396946779e-09, -1.8871411378018621e-11, 2.0812532253167149e-11, 4.610308523833595e-10, -1.4397954399905655e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -4.5963382405700415e-11, -6.1122453764994589e-09, 2.125862680335544e-10, 1.0069900326925563e-06, 2.6754537474360518e-10, 6.6584564528682222e-09, 1.2565193685531995e-07, 2.4592907571507894e-11, 5.9981070110737278e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.207844016614672e-09, -7.3048421478372205e-11, 5.7849636192486287e-09, 2.6754520821015149e-10, 1.0133331898032338e-06, -2.8086089010059823e-10, 2.8248696784527461e-11, 1.2622020051367144e-07, -2.9765002962367504e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.8427224463278833e-10, -5.8849005668548671e-09, -1.8871411378018621e-11, 6.6584564528682222e-09, -2.8086077907829576e-10, 1.0063677109428681e-06, 6.1771543435895637e-10, -2.6697439398093437e-11, 1.2557093498344329e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -3.7553601721362906e-12, -5.0643905735725525e-10, 2.0812537457337577e-11, 1.2565190843361052e-07, 2.8248715866485696e-11, 6.1771543435895637e-10, 2.0896120389579664e-08, 2.7266817276272448e-12, 5.9466549739983776e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.1404469569860112e-10, -5.9791238800344093e-12, 4.610308523833595e-10, 2.459289195899661e-11, 1.2622022893538087e-07, -2.6697435928646485e-11, 2.7266786918611619e-12, 2.09506296755535e-08, -2.9666555670382344e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.6602746047710291e-11, -4.692833344144276e-10, -1.4397953315703482e-12, 5.9981064559622155e-10, -2.9764999492920552e-11, 1.2557092077258858e-07, 5.9466535862195968e-11, -2.9666551333573654e-12, 2.088606265715498e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06,
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                    d_t: 0.25,
                    d_v: Vector3::new(1.6290926933288574, -0.06676047295331955, -1.7371900081634521),
                    d_p: Vector3::new(0.19949626922607422, -0.0083476314321160316, -0.21848225593566895),
                    avg_a: Vector3::new(6.5163712501525879, -0.26704195141792297, -6.9487600326538086),
                    avg_w: Vector3::new(-0.016315337270498276, -0.066210761666297913, 0.032358463853597641),
                    d_r: Matrix3::new(   0.99982988834381104 ,-0.0080947689712047577 , -0.016565036028623581,
                    0.0081600174307823181  ,  0.99995899200439453,  0.0038704476319253445,
                    0.016533054411411285, -0.0040048104710876942  ,  0.99985522031784058),
                    jrg: Matrix3::new(   -0.24997143447399139 , 0.00018198178440798074 , -0.0032505509443581104,
                    -0.00018394961080048233,    -0.24999840557575226 , 0.00017155359091702849,
                    0.0032512219622731209, -0.00017240735178347677  ,   -0.2499723881483078),
                    jvg: Matrix3::new( 0.0016400746535509825   , 0.21148858964443207 ,-0.0075124846771359444,
                    -0.2114170640707016 , 0.0022752117365598679,   -0.20376567542552948,
                    0.0097618270665407181  ,  0.20363414287567139, 0.00064915668917819858),
                    jva: Matrix3::new(   -0.24998173117637634  , 0.0021882457658648491 , 0.00084800273180007935,
                    -0.0021907049231231213  ,  -0.24998755753040314, -0.00081278209108859301,
                    -0.00083996192552149296 , 0.00082182057667523623  ,   -0.2499910295009613),
                    jpg: Matrix3::new(  0.0001179326354758814  ,  0.017523059621453285 ,-0.00073833123315125704,
                    -0.017494777217507362 , 0.00016268038598354906  , -0.016273627057671547,
                    0.00089691829634830356  ,  0.016239386051893234 , 4.8110778152476996e-05),
                    jpa: Matrix3::new(  -0.031248535960912704 , 0.00023674908152315766 ,-9.1095325842616148e-06,
                    -0.00023671332746744156  , -0.031248677521944046 , -9.611697169020772e-05,
                    1.0017049135058187e-05 , 9.6216564998030663e-05 ,  -0.031249487772583961),
                }),
            },
            KeyFrameDummy {
                id: 60,
                prev_kf_id: -1,
                imu_position: Vector3::new(0.065222904086112976, -0.020706389099359512,-0.0080546028912067413),
                velocity: Vector3::new(-0.0019226489821448922, 0.0082697048783302307,-0.014264547266066074),
                imu_rotation: Matrix3::new(
                    0.014865398406982422  ,  0.9995572566986084 ,-0.025774437934160233,
                    -0.99988096952438354 , 0.014967083930969238, 0.0037561894860118628,
                    0.0041402950882911682,  0.025715531781315804,   0.99966073036193848,
                ), 
                pose: Pose::new(
                    nalgebra::Vector3::new(0.0, 0.0,0.0),
                    nalgebra::Matrix3::new(
                    1.0, 0.0, 0.0,
                    0.0, 1.0, 0.0,
                    0.0, 0.0, 1.0),
                ),
                imu_preintegrated: None

            },
            KeyFrameDummy {
                id: 62,
                prev_kf_id: 61,
                imu_position: Vector3::new(0.064674906432628632, -0.020567236468195915,-0.015356099233031273),
                velocity: Vector3::new(0.0025866031646728516, 0.023067876696586609,-0.00075496360659599304),
                imu_rotation: Matrix3::new(
                    -0.0075674057006835938   , 0.99911296367645264 ,   -0.0414271280169487,
                    -0.99308192729949951 ,-0.0026541948318481445  ,  0.11739389598369598,
                    0.11717980355024338 ,  0.042028889060020447 ,   0.99222099781036377,
                ), 
                pose: Pose::new(
                nalgebra::Vector3::new(0.00043093276326544583, -0.0034543732181191444,0.01054733619093895),
                nalgebra::Matrix3::new(
                    0.9996258020401001 ,-0.020441252738237381 , 0.018178274855017662,
                    0.022364677861332893  , 0.99336487054824829,  -0.11280982196331024,
                    -0.015751684084534645 ,  0.11317415535449982 ,  0.99345028400421143),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2249979332639214e-09, 3.3650048778814028e-16, -7.4452277004631877e-17, 1.3826282783610533e-13, 4.7203378983340372e-09, -2.8258564932492902e-10, 3.0848790861202902e-13, 3.957540128940451e-10, -2.6890170645721412e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.3563471423692798e-16, 7.2249974891747115e-09, -7.1146525787180057e-17, -4.0836005688049681e-09, -1.22304930072481e-10, -7.1091426079306075e-09, -3.4195238307610509e-10, -1.0326399457749602e-11, -6.0102145482687774e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -7.0895572424221269e-17, -7.1363485335685365e-17, 7.2249966009962918e-09, 1.8478195362714445e-10, 6.7022347671752414e-09, -7.9556423948634603e-11, 1.8668993434500791e-11, 5.6694099415111054e-10, -6.4473873288839467e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        1.3826136416317247e-13, -4.0835996806265484e-09, 1.847818703604176e-10, 1.0031401416199515e-06, 3.4116240388293306e-10, 5.4639097690767358e-09, 1.252967649634229e-07, 3.3700649909595981e-11, 5.2072507417122438e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        4.720338342423247e-09, -1.2230491619469319e-10, 6.7022352112644512e-09, 3.4116240388293306e-10, 1.0126738061444485e-06, -1.9507849502442554e-10, 3.8137153157702386e-11, 1.2620650124972599e-07, -2.1766139238210691e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.8258562156935341e-10, -7.1091434961090272e-09, -7.9556444765316314e-11, 5.4639088808983161e-09, -1.9507828685760842e-10, 1.0095590141645516e-06, 5.1657639277280509e-10, -1.9079482785344659e-11, 1.2591284814789105e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.0848766466654021e-13, -3.4195243858725632e-10, 1.8668991699777315e-11, 1.2529673654171347e-07, 3.8137146218808482e-11, 5.1657650379510756e-10, 2.0861165239693946e-08, 4.0555102678863086e-12, 5.2509541853540398e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        3.9575412391634757e-10, -1.0326401192473078e-11, 5.6694082761765685e-10, 3.3700653379042933e-11, 1.2620648703887127e-07, -1.9079494928408991e-11, 4.0555107015671776e-12, 2.0953779156229757e-08, -2.2914664957185416e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.6890163706827508e-11, -6.0102162136033144e-10, -6.4473886299265537e-12, 5.2072507417122438e-10, -2.1766125360422883e-11, 1.2591281972618162e-07, 5.2509534914646494e-11, -2.2914651946759346e-12, 2.0924261434629443e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06,
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                d_t: 0.25,
                d_v: Vector3::new(2.0701899528503418, -0.087386690080165863, -1.1656434535980225),
                d_p: Vector3::new(0.26631668210029602, -0.013168445788323879, -0.14730443060398102),
                avg_a: Vector3::new(8.2807598114013672, -0.34954679012298584, -4.6625733375549316),
                avg_w: Vector3::new(-0.058985147625207901, -0.37040755152702332, 0.018500486388802528),
                d_r: Matrix3::new(   0.99570202827453613 ,-0.0041527422145009041 ,  -0.09252079576253891,
                0.0055053196847438812  ,   0.9998815655708313  , 0.014368643052875996,
                0.092450179159641266,  -0.014816244132816792 ,   0.99560701847076416),
                jrg: Matrix3::new(   -0.24943727254867554 ,-0.00047216907842084765 ,  -0.015443017706274986,
                0.0003178454062435776   , -0.24998827278614044   , 0.002007240429520607,
                0.015447699464857578 , -0.0019761091098189354 ,   -0.24942690134048462),
                jvg: Matrix3::new(0.00022254568466451019  ,  0.14121919870376587, -0.0079255066812038422,
                -0.14504142105579376 , 0.0012657083570957184  , -0.24374228715896606,
                0.0090592429041862488   , 0.24603316187858582 ,0.00079666281817480922),
                jva: Matrix3::new(   -0.24980638921260834 , 0.00074047816451638937  , 0.0074609182775020599,
                -0.00081975344801321626   , -0.24999004602432251 , -0.0016260837437584996,
                -0.0074542821384966373  , 0.0016558346105739474  ,  -0.24979956448078156),
                jpg: Matrix3::new( 1.5371855624835007e-05  ,  0.011822964996099472, -0.00079008808825165033,
                -0.012034637853503227 , 7.3119335866067559e-05 ,  -0.020676871761679649,
                0.00085786194540560246 ,   0.020801085978746414 , 4.4323242036625743e-05),
                jpa: Matrix3::new(  -0.031241860240697861 ,  7.209089380921796e-05 , 0.00049208651762455702,
                -7.5827039836440235e-05 ,  -0.031249430030584335, -0.00011655988782877102,
                -0.00049163145013153553  , 0.0001184172579087317 ,  -0.031241549178957939),
                }),
            },
            KeyFrameDummy {
                id: 66,
                prev_kf_id: 65,
                imu_position: Vector3::new(0.058819882571697235, -0.014096090570092201,-0.027865871787071228),
                velocity: Vector3::new(-0.013880491256713867, 0.001974053680896759,-0.018415972590446472),
                imu_rotation: Matrix3::new(
                    0.039319455623626709 ,  0.99915838241577148 , -0.01168707013130188,
                    -0.94294613599777222  ,0.040972232818603516 ,  0.33041486144065857,
                    0.33061560988426208 ,-0.001971489517018199 ,  0.94376343488693237,
                ), 
                pose: Pose::new(
                nalgebra::Vector3::new(0.0060903108678758144, -0.015068355947732925,0.022054105997085571),
                nalgebra::Matrix3::new(
                    0.99960166215896606 , 0.018420631065964699 , -0.02138085663318634,
                    -0.024404313415288925 ,  0.94468814134597778 , -0.32706084847450256,
                    0.014173573814332485 ,  0.32745236158370972 ,  0.94476139545440674),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2250010418883903e-09, -2.5782227076542809e-16, -5.3099036316771545e-17, -2.1867094246452723e-10, 6.3935048366658975e-09, -4.5296849604525846e-10, -1.8351091479740234e-11, 5.2912302317409399e-10, -4.3862965343199889e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -2.5956046178253272e-16, 7.2249988214423411e-09, 2.7668651506394901e-16, -6.6325602787742355e-09, -3.0896366021160304e-10, -5.7751123883065247e-09, -5.4915461067395199e-10, -2.5633981048933663e-11, -4.8132714480786376e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -4.700723491712272e-17, 2.7820662156691526e-16, 7.2249974891747115e-09, 1.527089010799898e-10, 6.0425131565011725e-09, -1.1449919484762816e-10, 1.8901026577200497e-11, 5.036625005949702e-10, -9.7863210590798388e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -2.1867090083116381e-10, -6.6325593905958158e-09, 1.5270894271335322e-10, 1.0082311518999632e-06, 3.1506247610835203e-10, 7.1813857083213861e-09, 1.2576633423577732e-07, 3.0675031958971033e-11, 6.7162836403511506e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        6.393503504398268e-09, -3.0896363245602743e-10, 6.042514488768802e-09, 3.1506233733047395e-10, 1.0144925681743189e-06, -3.6031769234945443e-10, 3.6841679013077666e-11, 1.2635175039577007e-07, -4.2121757470869881e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -4.5296849604525846e-10, -5.775114608752574e-09, -1.1449918790873426e-10, 7.1813839319645467e-09, -3.6031785888290813e-10, 1.0062948376798886e-06, 6.6850236457582923e-10, -3.492545835870331e-11, 1.2558956541397492e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -1.835109321446371e-11, -5.4915461067395199e-10, 1.8901028311923973e-11, 1.2576632002492261e-07, 3.6841706768653282e-11, 6.685024755981317e-10, 2.0907263476033222e-08, 3.8052260994958509e-12, 6.6527804098992505e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        5.2912307868524522e-10, -2.5633981048933663e-11, 5.036625005949702e-10, 3.0675018081183225e-11, 1.2635175039577007e-07, -3.492545835870331e-11, 3.8052243647723749e-12, 2.0965437386166741e-08, -4.3356112970627247e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        -4.3862944526518177e-11, -4.8132720031901499e-10, -9.7863210590798388e-12, 6.716280864793589e-10, -4.2121771348657688e-11, 1.2558955120312021e-07, 6.6527783282310793e-11, -4.3356125981053317e-12, 2.0889961760417464e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                    d_t: 0.25,
                    d_v: Vector3::new(1.6297838687896729, -0.10458016395568848, -1.8688383102416992),
                    d_p: Vector3::new(0.2031087726354599, -0.016473818570375443, -0.23304469883441925),
                    avg_a: Vector3::new(6.5191354751586914, -0.41832068562507629, -7.4753532409667969),
                    avg_w: Vector3::new(-0.06852857768535614, 0.15851771831512451, 0.12670391798019409),
                    d_r: Matrix3::new(  0.99871641397476196 , -0.03202350065112114 , 0.039248280227184296,
                    0.031338948756456375 ,  0.99934792518615723, 0.017939526587724686,
                    -0.039797175675630569 , -0.01668650284409523  , 0.99906861782073975),
                    jrg: Matrix3::new(  -0.24985694885253906 ,-0.0037914351560175419 , 0.0064239618368446827,
                    0.0038841613568365574 ,  -0.24994130432605743 , 0.0027910768985748291,
                    -0.0063688964582979679, -0.0029159607365727425 ,  -0.24987460672855377),
                    jvg: Matrix3::new( 0.0026650598738342524 ,   0.22948653995990753 ,-0.0088258879259228706,
                    -0.22822278738021851 , 0.0031116721220314503 ,  -0.20166566967964172,
                    0.011690075509250164  ,  0.20014858245849609 ,0.00054728472605347633),
                    jva: Matrix3::new(  -0.24991364777088165  ,0.0040228697471320629 ,-0.0033827335573732853,
                    -0.0039844163693487644  , -0.24995101988315582, -0.0014471665490418673,
                    0.0034163796808570623 , 0.0013665136648342013 ,  -0.24994628131389618),
                    jpg: Matrix3::new( 0.00017287656373810023 ,   0.018997322767972946 ,-0.00097129319328814745,
                    -0.018943734467029572,  0.00019142495875712484,  -0.016756439581513405,
                    0.0011458524968475103 ,   0.016689013689756393,  2.3608617993886583e-05),
                    jpa: Matrix3::new(  -0.031245291233062744 , 0.00035179534461349249 ,-0.00019002894987352192,
                    -0.00035024480894207954,   -0.031246889382600784, -7.8246783232316375e-05,
                    0.00019160599913448095 , 7.4280731496401131e-05 ,  -0.031247766688466072),
                }),
            },
            KeyFrameDummy {
                id: 69,
                prev_kf_id: 68,
                imu_position: Vector3::new(0.051159687340259552, -0.01290072500705719,-0.031873498111963272),
                velocity: Vector3::new(-0.0056146830320358276, 0.0041640214622020721,0.0051008909940719604),
                imu_rotation: Matrix3::new(
                    0.016541123390197754  , 0.99933761358261108, -0.032417282462120056,
                    -0.94559770822525024 , 0.026170969009399414 ,  0.32428404688835144,
                    0.32491761445999146 , 0.025289693847298622 ,  0.94540417194366455
                ), 
                pose: Pose::new(
                    nalgebra::Vector3::new(0.014295722357928753, -0.018630791455507278,0.026612034067511559),
                    nalgebra::Matrix3::new(
                        0.9999765157699585,  0.0037444573827087879 , 0.0057412763126194477,
                        -0.0017037380021065474  ,  0.94709485769271851  ,  -0.3209492564201355,
                        -0.0066393138840794563 ,   0.32093194127082825 ,   0.94707900285720825),
                ),
                imu_preintegrated: Some(ImuPreIntegrated {
                    b: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    bu: ImuBias {
                        bax: 0.0,
                        bay: 0.0,
                        baz: 0.0,
                        bwx: 0.0,
                        bwy: 0.0,
                        bwz: 0.0,
                    },
                    c: SMatrix::<f64, 15, 15>::from_row_slice(&[
                        7.2249943805502426e-09, -1.7319495257926105e-18, 3.9093966092200491e-18, -9.0876819958118915e-11, 6.2554899038502754e-09, -2.4581933710798864e-10, -7.4194305213493017e-12, 5.1116499921732839e-10, -1.9057233222041781e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.0816553867770302e-18, 7.2249943805502426e-09, 1.5302902543596341e-17, -6.2906853059985224e-09, -2.8364128754065909e-11, -5.887708542928749e-09, -5.1408827195231765e-10, -2.2592531144505212e-12, -4.8681136899375588e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        4.3183729020397421e-18, 1.4652495391029571e-17, 7.2249992655315509e-09, 2.2639691510395465e-10, 5.9310285571712029e-09, 5.9504713656455266e-11, 1.7389338233253504e-11, 4.9033627158578952e-10, 4.9279985474270926e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -9.0876854652588435e-11, -6.2906853059985224e-09, 2.2639692898174246e-10, 1.0073541716337786e-06, 1.7361925785941423e-10, 6.8989312040912409e-09, 1.2567544160901889e-07, 1.575416012922215e-11, 6.4029054280823061e-10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        6.2554890156718557e-09, -2.8364127019342433e-11, 5.9310303335280423e-09, 1.7361916071489958e-10, 1.0138256811842439e-06, -1.84988580009815e-10, 1.4200246881146406e-11, 1.2627705814338697e-07, -1.5112385301496722e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -2.4581930935241303e-10, -5.8877072106611195e-09, 5.950472059534917e-11, 6.8989303159128212e-09, -1.8498864939875403e-10, 1.0064815114674275e-06, 6.3458838184260458e-10, -1.6611429246027321e-11, 1.2560246887005633e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -7.4194305213493017e-12, -5.1408827195231765e-10, 1.7389346906870884e-11, 1.2567539897645474e-07, 1.4200259024210737e-11, 6.345886038872095e-10, 2.0897424235499784e-08, 1.3626919688133898e-12, 6.2800001310314713e-11, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        5.1116488819502592e-10, -2.2592528976100867e-12, 4.9033616056348706e-10, 1.575415145560477e-11, 1.2627705814338697e-07, -1.6611410164069085e-11, 1.3626905593505656e-12, 2.0957044100100575e-08, -1.4356007702054363e-12, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        -1.9057228017871353e-11, -4.8681142450490711e-10, 4.9279985474270926e-12, 6.4029043178592815e-10, -1.5112397444561054e-11, 1.2560248308091104e-07, 6.2799987432526905e-11, -1.4356031554502158e-12, 2.0890945862106491e-08, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.402204015351856e-11, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06, 0.0,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2499993974633981e-06,
                    ]),
                    info: SMatrix::<f64, 15, 15>::zeros(),
                    nga_walk: calib.cov_walk,
                    nga: calib.cov,
                    d_b: SMatrix::<f64, 6, 1>::zeros(),
                    measurements: vec![],
                    d_t: 0.25,
                    d_v: Vector3::new(1.6525261402130127, -0.043950427323579788, -1.7596907615661621),
                    d_p: Vector3::new(0.20516224205493927, -0.0052816732786595821, -0.21776092052459717),
                    avg_a: Vector3::new(6.6101045608520508, -0.17580167949199677, -7.0387630462646484),
                    avg_w: Vector3::new(0.041259612888097763, 0.025544656440615654, 0.056988492608070374),
                    d_r: Matrix3::new(    0.9998781681060791 , -0.014213079586625099 , 0.0064421319402754307,
                    0.01427875179797411  ,  0.99984520673751831 , -0.010278140194714069,
                    -0.0062950532883405685 ,  0.010368882678449154  ,  0.99992650747299194),
                    jrg: Matrix3::new(   -0.24999132752418518,  -0.0017796918982639909 , 0.00059901876375079155,
                    0.0017766868695616722 ,   -0.24998970329761505, -0.00091356993652880192,
                    -0.0006075175479054451 , 0.00090818374883383512  ,  -0.24999669194221497),
                    jvg: Matrix3::new( 0.0011452732142060995 ,   0.21772448718547821 ,-0.0067476998083293438,
                    -0.21710048615932465 , 4.397138036438264e-05  ,  -0.2045445442199707,
                    0.0066465861164033413 ,   0.20380145311355591 ,-0.0010557437781244516),
                    jva: Matrix3::new(   -0.24999029934406281 ,   0.001743171364068985, -0.00098224740941077471,
                    -0.0017504391726106405  ,  -0.24998617172241211  , 0.0016386364586651325,
                    0.00096869486151263118 , -0.0016465747030451894 ,   -0.24999165534973145),
                    jpg: Matrix3::new( 7.6899748819414526e-05  ,  0.017793143168091774 ,-0.00049818673869594932,
                    -0.017747515812516212 , 1.9841311882373702e-07 ,  -0.016903966665267944,
                    0.0004902564687654376,    0.016850877553224564, -7.3626360972411931e-05),
                    jpa: Matrix3::new(  -0.031249305233359337  ,0.00015725164848845452, -9.9748831416945904e-05,
                    -0.00015787160373292863 , -0.031248956918716431 , 0.00016147294081747532,
                    9.8718010121956468e-05, -0.00016208238957915455  , -0.031249290332198143),
                }),
            },
        ];

        // Set KeyFrame vertices (fixed poses and optimizable velocities)
        for kf in &keyframes {
            let imu_calib = ImuCalib::new();

            let rot = kf.pose.get_quaternion();
            let imu_rot = nalgebra::geometry::UnitQuaternion::from_rotation_matrix(
                & nalgebra::Rotation3::from_matrix(& kf.imu_rotation)
            ); // lol whateverrr
            let tcb_rot = imu_calib.tcb.get_quaternion();

            optimizer.pin_mut().add_vertex_pose(
                kf.id,
                true,
                1, // TODO (Stereo... num cams shouldn't be 1)
                kf.imu_position.into(), // imu position
                [imu_rot.i, imu_rot.j, imu_rot.k, imu_rot.w], // imu rotation
                kf.pose.get_translation().into(), // translation
                [rot.i, rot.j, rot.k, rot.w], // rotation
                imu_calib.tcb.translation.into(), //tcb translation
                [tcb_rot.i, tcb_rot.j, tcb_rot.k, tcb_rot.w], // tcb rotation
                imu_calib.tbc.translation.into(), // tbc translation
                CAMERA_MODULE.stereo_baseline as f32
            );

            optimizer.pin_mut().add_vertex_velocity(
                max_kf_id + kf.id + 1,
                fixed_velocity,
                kf.velocity.into()
            );
        }

        // Biases
        optimizer.pin_mut().add_vertex_gyrobias(
            140,
            false,
            [0.0,0.0,0.0]
        );

        optimizer.pin_mut().add_vertex_accbias(
            141,
            false,
            [0.0,0.0,0.0]
        );

        // prior acc bias
        optimizer.pin_mut().add_edge_prior_for_imu(
            141,
            140,
            [0.0, 0.0, 0.0],
            10000000000.0,
            100.0
        );
    
        optimizer.pin_mut().add_vertex_gdir(
            max_kf_id * 2 + 4,
            false,
            (&mut rwg).into(),
        );
        optimizer.pin_mut().add_vertex_scale(
            max_kf_id * 2 + 5,
            false,  // Fixed for stereo case
            1.0,
        );

        {

            // Graph edges
            // IMU links with gravity and scale
            let new_imu_preintegrated_for_kfs: HashMap<Id, ImuPreIntegrated> = HashMap::new();
            for kf in & keyframes {
                if kf.imu_preintegrated.is_none() {
                    continue;
                }

                optimizer.pin_mut().add_edge_inertial_gs(
                    kf.prev_kf_id,
                    max_kf_id + kf.prev_kf_id + 1,
                    max_kf_id * 2 + 2,
                    max_kf_id * 2 + 3,
                    kf.id,
                    max_kf_id + kf.id + 1,
                    max_kf_id * 2 + 4,
                    max_kf_id * 2 + 5,
                    (kf.imu_preintegrated.as_ref().unwrap()).into(),
                    false,
                    1.0,
                    false,
                    0.0
                );
            }
        }

        println!("OPTIMIZE!");
        // Compute error for different scales
        optimizer.pin_mut().optimize(its, false, false);
        println!("OPTIMIZATION DONE!");

        let estimate = optimizer.recover_optimized_inertial(
            max_kf_id * 2 + 2,
            max_kf_id * 2 + 3,
            max_kf_id * 2 + 5,
            max_kf_id * 2 + 4,
        );

        let vb = estimate.vb;
        let res_bg: DVVector3<f64> = estimate.bg.into();
        let res_ba: DVVector3<f64> = estimate.ba.into();
        let res_scale = estimate.scale;
        let res_rwg: DVMatrix3<f64> = estimate.rwg.into();

        let res_b = ImuBias {
            bax: vb[0],
            bay: vb[1],
            baz: vb[2],
            bwx: vb[3],
            bwy: vb[4],
            bwz: vb[5],
        };

        println!("INERTIAL OPTIMIZATION RESULTS! bg: {:?}", res_bg);
        println!("INERTIAL OPTIMIZATION RESULTS! ba: {:?}", res_ba);
        println!("INERTIAL OPTIMIZATION RESULTS! scale: {:?}", res_scale);
        println!("INERTIAL OPTIMIZATION RESULTS! bias: {:?}", res_b);
        println!("INERTIAL OPTIMIZATION RESULTS! rwg: {:?}", res_rwg);

        println!("Keyframes: {:?}", keyframes.iter().map(|kf| kf.id).collect::<Vec<_>>());

        //Keyframes velocities and biases
        for kf in &mut keyframes {
            let velocity = optimizer.recover_optimized_vertex_velocity(max_kf_id + kf.id + 1);
            println!("INERTIAL OPTIMIZATION! Set KF velocity {} {:?}", kf.id, velocity);

            if kf.imu_preintegrated.is_none() {
                continue;
            }
            if (* kf.imu_preintegrated.as_ref().unwrap().b.get_gyro_bias() - *res_bg).norm() > 0.01 {
                kf.imu_preintegrated.as_mut().unwrap().set_new_bias(res_b);
                println!("INERTIAL OPTIMIZATION RESULTS! SET KF bias {} {:?} AND REINTEGRATE", kf.id, res_b);
                // if let Some(imu_preintegrated) = kf.imu_data.imu_preintegrated.as_mut() {
                //     imu_preintegrated.reintegrate();
                // }
            } else {
                kf.imu_preintegrated.as_mut().unwrap().set_new_bias(res_b);
                println!("INERTIAL OPTIMIZATION RESULTS! SET KF bias {} {:?}", kf.id, res_b);
            }
        }

        assert_eq!(1, -1); // just to get output from above, the actual assert doesn't matter

    }

    // #[test]
    fn test_imu_preintegrated() {
        let mut system_config = env::current_dir().unwrap();
        system_config.push("orbslam_config.yaml");
        let mut dataset_config = env::current_dir().unwrap();
        dataset_config.push("config_datasets/EUROC.yaml");
        let _ = load_config(
            &system_config.into_os_string().into_string().unwrap(),
            &dataset_config.into_os_string().into_string().unwrap()
        ).expect("Could not load config");

        let bias = ImuBias::new(); // init with all 0s
        let mut preintegrated = ImuPreIntegrated::new(bias);

        // Nga and NgaWalk taken from dataset configuration. For euroc, should be:
        // Nga = {5.78000027e-06, 5.78000027e-06, 5.78000027e-06, 0.000800000038, 0.000800000038, 0.000800000038}
        // Ngawalk = {1.88044198e-12, 1.88044198e-12, 1.88044198e-12, 4.50000037e-08,  4.50000037e-08, 4.50000037e-08}

        // Start off with:
        // everyhting 0s except nga, ngawalk
        // dR = 1, 0, 0, 0, 1, 0, 0, 0, 1

        let acc = Vector3::new(7.95973063, -0.416782618, -2.41897345);
        let ang_vel = Vector3::new(-0.0987856388, 0.13404128, 0.0335103199);
        let dt = 0.00499987602;
        preintegrated.integrate_new_measurement(acc, ang_vel, dt);

        println!("preintegrated: {:?}", preintegrated);

        // dR
        // assert_eq!(preintegrated.get_original_delta_rotation(), nalgebra::Matrix3::new(0.999999762, 0.000167460079, -0.000670200272, -0.000167651044, 0.999999821, -0.000493822154, 0.000670123554, 0.000493980129, 0.999999702));
    
        // dV
        assert!(preintegrated.get_original_delta_velocity() - nalgebra::Vector3::new(0.0397976674, -0.0020838615, -0.0120945675) < nalgebra::Vector3::new(1e-6, 1e-6, 1e-6));

        // dP
        assert!(preintegrated.get_original_delta_position() - nalgebra::Vector3::new(9.94916991e-05, -5.20952472e-06, -3.02356693e-05) < nalgebra::Vector3::new(1e-6, 1e-6, 1e-6));

        // Other values that I'm not testing for...

        // C = {1.4449282e-10, -3.98521764e-18, 
        //   -9.93819352e-19, 0 <repeats 12 times>, -3.98475194e-18, 1.4449282e-10, 1.35275897e-18, 0 <repeats 12 times>, 
        //   -9.96584617e-19, 1.35143404e-18, 1.44492834e-10, 0 <repeats 15 times>, 1.99990087e-08, 0, 0, 4.99962814e-11, 
        //   0 <repeats 12 times>, 1.99990087e-08, 0, 0, 4.99962814e-11, 0 <repeats 12 times>, 1.99990087e-08, 0, 0, 4.99962814e-11, 0, 
        //   0, 0, 0, 0, 0, 0, 0, 0, 4.99962814e-11, 0, 0, 1.24987612e-13, 0 <repeats 12 times>, 4.99962814e-11, 0, 0, 1.24987612e-13, 
        //   0 <repeats 12 times>, 4.99962814e-11, 0, 0, 1.24987612e-13, 0 <repeats 15 times>, 1.88044198e-12, 0 <repeats 15 times>, 
        //   1.88044198e-12, 0 <repeats 15 times>, 1.88044198e-12, 0 <repeats 15 times>, 4.50000037e-08, 0 <repeats 15 times>, 
        //   4.50000037e-08, 0 <repeats 15 times>, 4.50000037e-08}}}},

        // info = all 0s
        // b = all 0s
        // JRg = -0.00499987556, 4.19134011e-07, -1.67536382e-06, -4.18582374e-07, 
        //   -0.00499987556, -1.23485268e-06, 1.67550172e-06, 1.23466543e-06, -0.00499987556
        // JVg = all 0s
        // JVa = -0.00499987602, 0, 0, 0, -0.00499987602, 0, 0, 0, -0.00499987602
        // JPg = all 0s
        // JPa = -1.24993803e-05, 0, 0, 0, -1.24993803e-05, 0, 0, 0, -1.24993803e-05
        // avgA = {7.95973063, -0.416782647, -2.41897345}
        // avgW = -0.0987856314, 0.13404128, 0.0335103199

    }

    // #[test]
    fn test_integrated_rotation() {
        let ir = IntegratedRotation::new(
            Vector3::new(-0.0987856388, 0.13404128, 0.0335103199),
            ImuBias::new(),
            0.00499987602
        );

        assert!(
            ir.delta_r - nalgebra::Matrix3::new(
                0.999999762, 0.000167381921, -0.000670231122,
                -0.000167712948, 0.999999881, -0.000493859698,
                0.000670148351, 0.000493972038, 0.999999642
            ) < nalgebra::Matrix3::new(
                1e-6, 1e-6, 1e-6,
                1e-6, 1e-6, 1e-6,
                1e-6, 1e-6, 1e-6
            )
        );
        assert_eq!(ir.right_j, nalgebra::Matrix3::new(0.99999994, -8.38288834e-05, 0.000335081073, 8.37185507e-05, 
            0.99999994, 0.000246976648, -0.000335108663, -0.00024693922, 0.999999881));
    }

    // #[test]
    fn test_imu_utils() {
        // input = 0.999999762;, 0.000167381921, 
        //   -0.000670231122, -0.000167712948, 0.999999881, -0.000493859698, 0.000670148351, 0.000493972038, 
        //   0.999999642


        // matrix u = 0.818077385, 0.575106502, -0.00139272108, -0.407460123, 
        //     0.577891409, -0.707119346, -0.40586406, 0.579045773, 0.707092881

        // matrix v = 0.818174362, 0.574969888, -0.000560401008, -0.406889349, 
        //     0.578308821, -0.707106709, -0.40624091, 0.578764558, 0.707106709


        // let r = nalgebra::Matrix3::new(
        // 0.999999762, 0.000167381921, -0.000670231122,
        // -0.000167712948, 0.999999881, -0.000493859698,
        // 0.000670148351, 0.000493972038, 0.999999642
        // );
        // let res = crate::modules::imu::normalize_rotation(r).unwrap();
        // assert_eq!(res, nalgebra::Matrix3::new(
        //     0.999999762, 0.000167460079, -0.000670200272,
        //     -0.000167651044, 0.999999821, -0.000493822154,
        //     0.000670123554, 0.000493980129, 0.999999702
        // ));

        // let v = nalgebra::Vector3::new(0.0397976674, -0.0020838615, -0.0120945675);
        // let res = crate::modules::imu::hat(& v);
        // assert_eq!(res, nalgebra::Matrix3::new(
        //     0.0, -0.0120945675, 0.0020838615,
        //     0.0120945675, 0.0, -0.0397976674,
        //     -0.0020838615, 0.0397976674, 0.0
        // ));

    }
}