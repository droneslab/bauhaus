warning: `default_features` is deprecated in favor of `default-features` and will not work in the 2024 edition
(in the `cv-convert` dependency)
warning: unused manifest key: env
warning: unused manifest key: rust
warning: unused import: `opencv::core::MatTraitConst`
  --> src/core/config.rs:16:5
   |
16 | use opencv::core::MatTraitConst;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `darvis` (lib) generated 1 warning (run `cargo fix --lib -p darvis` to apply 1 suggestion)
   Compiling darvis v0.1.0 (/home/nitin/Downloads/Darvis_New/darvis/darvis)
error[E0603]: module `protobuf` is private
   --> src/actors/visualizer.rs:128:42
    |
128 |             timestamp: Some(prost_types::protobuf::Timestamp { seconds: 0,  nanos: 0 }),
    |                                          ^^^^^^^^ private module
    |
note: the module `protobuf` is defined here
   --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/lib.rs:47:1
    |
47  | mod protobuf;
    | ^^^^^^^^^^^^
help: consider importing this struct instead
    |
128 |             timestamp: Some(prost_types::Timestamp { seconds: 0,  nanos: 0 }),
    |                             ~~~~~~~~~~~~~~~~~~~~~~

error[E0603]: module `protobuf` is private
   --> src/actors/visualizer.rs:673:42
    |
673 |             timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
    |                                          ^^^^^^^^ private module
    |
note: the module `protobuf` is defined here
   --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/lib.rs:47:1
    |
47  | mod protobuf;
    | ^^^^^^^^^^^^
help: consider importing this struct instead
    |
673 |             timestamp: Some(prost_types::Timestamp { seconds, nanos }),
    |                             ~~~~~~~~~~~~~~~~~~~~~~

error[E0603]: module `protobuf` is private
   --> src/actors/visualizer.rs:685:50
    |
685 |                     timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
    |                                                  ^^^^^^^^ private module
    |
note: the module `protobuf` is defined here
   --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/lib.rs:47:1
    |
47  | mod protobuf;
    | ^^^^^^^^^^^^
help: consider importing this struct instead
    |
685 |                     timestamp: Some(prost_types::Timestamp { seconds, nanos }),
    |                                     ~~~~~~~~~~~~~~~~~~~~~~

warning: unused imports: `SystemTime` and `self`
 --> src/main.rs:1:153
  |
1 | ...nc::atomic::AtomicBool, thread::{self, sleep}, time::{self, Duration, SystemTime}};
  |                                                          ^^^^            ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `sensor::Sensor`
 --> src/main.rs:7:5
  |
7 | use sensor::Sensor;
  |     ^^^^^^^^^^^^^^

warning: unused import: `optimizer`
  --> src/main.rs:13:73
   |
13 | use crate::{actors::messages::{ImageMsg, ShutdownMsg}, modules::{image, optimizer}};
   |                                                                         ^^^^^^^^^

warning: unused import: `types::VectorOfKeyPoint`
 --> src/actors/tracking_frontend.rs:3:26
  |
3 | use opencv::{prelude::*, types::VectorOfKeyPoint,};
  |                          ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `ImuSensor`
 --> src/actors/tracking_frontend.rs:6:49
  |
6 |     config::*, matrix::*, sensor::{FrameSensor, ImuSensor, Sensor}, system::{Actor, Timestamp}
  |                                                 ^^^^^^^^^

warning: unused imports: `FEATURE_DETECTION` and `orbslam_extractor::ORBExtractor`
  --> src/actors/tracking_frontend.rs:12:106
   |
12 | ...tractionModule, orbslam_extractor::ORBExtractor}, registered_actors::{new_feature_extraction_module, FEATURE_DETECTION, VISUALIZER}, S...
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                                      ^^^^^^^^^^^^^^^^^

warning: unused import: `error`
 --> src/actors/tracking_backend.rs:2:30
  |
2 | use log::{warn, info, debug, error};
  |                              ^^^^^

warning: unused import: `matrix::DVMatrix`
 --> src/actors/tracking_backend.rs:3:23
  |
3 | use core::{config::*, matrix::DVMatrix, sensor::{FrameSensor, ImuSensor, Sensor}, system::{Actor, Timestamp}};
  |                       ^^^^^^^^^^^^^^^^

warning: unused imports: `loop_closing::KeyFrameAndPose`, `orbslam_matcher`, and `self`
 --> src/actors/tracking_backend.rs:5:49
  |
5 | ...E, loop_closing::KeyFrameAndPose, messages::{FeatureMsg, InitKeyFrameMsg, LastKeyFrameUpdatedMsg, ShutdownMsg, TrackingStateMsg, TrajectoryMsg, UpdateFrameIMUMsg, VisTrajectoryMsg}}, map::{
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 | ...
7 | ...uBias, ImuMeasurements, ImuPreIntegrated, GRAVITY_VALUE, IMU}, map_initialization::MapInitialization, module_definitions::FeatureMatchingModule, optimizer, orbslam_matcher, relocalization::Relocalization}, registered_actors::{self, F...
  |                                                                                                                                                                ^^^^^^^^^^^^^^^                                                       ^^^^

warning: unused import: `DVTranslation`
  --> src/actors/local_mapping.rs:15:24
   |
15 | use crate::map::pose::{DVTranslation, Pose};
   |                        ^^^^^^^^^^^^^

warning: unused import: `crate::modules::orbslam_matcher::ORBMatcherTrait`
  --> src/actors/local_mapping.rs:17:5
   |
17 | use crate::modules::orbslam_matcher::ORBMatcherTrait;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
  --> src/actors/local_mapping.rs:18:32
   |
18 | use crate::registered_actors::{self, CAMERA_MODULE, FEATURE_MATCHER, FEATURE_MATCHING_MODULE, LOCAL_MAP_OPTIMIZATION_MODULE, TRACKING_BAC...
   |                                ^^^^

warning: unused import: `FeatureMatchingModule`
  --> src/actors/local_mapping.rs:27:56
   |
27 | use crate::modules::module_definitions::{CameraModule, FeatureMatchingModule, LocalMapOptimizationModule};
   |                                                        ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `FrameSensor`
 --> src/actors/loop_closing.rs:3:20
  |
3 | use core::sensor::{FrameSensor, ImuSensor, Sensor};
  |                    ^^^^^^^^^^^

warning: unused import: `trace`
 --> src/actors/loop_closing.rs:8:31
  |
8 | use log::{debug, error, info, trace, warn};
  |                               ^^^^^

warning: unused import: `opencv::core::KeyPointTraitConst`
 --> src/actors/loop_closing.rs:9:5
  |
9 | use opencv::core::KeyPointTraitConst;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `LoopClosureGBAMsg`
  --> src/actors/loop_closing.rs:11:46
   |
11 | use crate::actors::messages::{KeyFrameIdMsg, LoopClosureGBAMsg, UpdateFrameIMUMsg};
   |                                              ^^^^^^^^^^^^^^^^^

warning: unused imports: `FeatureMatchingModule` and `ImuModule`
  --> src/actors/loop_closing.rs:13:42
   |
13 | use crate::modules::module_definitions::{FeatureMatchingModule, ImuModule, LoopDetectionModule};
   |                                          ^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `crate::modules::orbslam_matcher::ORBMatcherTrait`
  --> src/actors/loop_closing.rs:14:5
   |
14 | use crate::modules::orbslam_matcher::ORBMatcherTrait;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::modules::sim3solver::Sim3Solver`
  --> src/actors/loop_closing.rs:15:5
   |
15 | use crate::modules::sim3solver::Sim3Solver;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `VISUALIZER`
  --> src/actors/loop_closing.rs:17:93
   |
17 | use crate::registered_actors::{self, FEATURE_MATCHING_MODULE, FULL_MAP_OPTIMIZATION_MODULE, VISUALIZER};
   |                                                                                             ^^^^^^^^^^

warning: unused imports: `KeyFrame`, `orbslam_matcher`, and `self`
  --> src/actors/tracking_optical_flow.rs:13:59
   |
13 | ...::{KeyFrame, MapPointMatches}, map::Id, pose::Pose}, modules::{image, imu::{ImuBias, ImuMeasurements, ImuPreIntegrated, IMU}, map_initialization::MapInitialization, module_definitions::{FeatureExtractionModule, FeatureMatchingModule, ImuModule}, optimizer, orbslam_extractor::ORBExtractor, orbslam_matcher, relocalization::Relocalization}, registered_actors::{self, C...
   |       ^^^^^^^^                                                                                                                                                                                                                                                                                       ^^^^^^^^^^^^^^^                                                       ^^^^

warning: unused import: `time::Duration`
 --> src/actors/visualizer.rs:1:121
  |
1 | use std::{borrow::Cow, collections::{BTreeMap, BTreeSet, HashMap, HashSet}, fs::{self, File}, io::BufWriter, sync::Arc, time::Duration};
  |                                                                                                                         ^^^^^^^^^^^^^^

warning: unused import: `Module`
 --> src/registered_actors.rs:1:56
  |
1 | use core::{config::{SETTINGS, SYSTEM}, system::{Actor, Module, System}};
  |                                                        ^^^^^^

warning: unused import: `Mutex`
 --> src/registered_actors.rs:2:22
  |
2 | use std::sync::{Arc, Mutex};
  |                      ^^^^^

warning: unused imports: `FeatureMatchingModule` and `ImuModule`
 --> src/registered_actors.rs:6:126
  |
6 | ...finitions::{FeatureExtractionModule, FeatureMatchingModule, FullMapOptimizationModule, ImuModule, LocalMapOptimizationModule, LoopDete...
  |                                         ^^^^^^^^^^^^^^^^^^^^^                             ^^^^^^^^^

warning: unused import: `Module`
 --> src/spawn.rs:5:77
  |
5 |     config::{ActorConf, ModuleConf}, read_only_lock::ReadWriteMap, system::{Module, Receiver, Sender, System} 
  |                                                                             ^^^^^^

warning: unused import: `warn`
 --> src/map/map.rs:2:17
  |
2 | use log::{info, warn, error, debug};
  |                 ^^^^

warning: unused import: `rustc_hash::FxHashMap`
 --> src/map/map.rs:3:5
  |
3 | use rustc_hash::FxHashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ops::MulAssign`
 --> src/map/map.rs:6:5
  |
6 | use std::ops::MulAssign;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `DVTranslation`
 --> src/map/map.rs:8:71
  |
8 | use super::{frame::Frame, keyframe_database::KeyFrameDatabase, pose::{DVTranslation, Pose}};
  |                                                                       ^^^^^^^^^^^^^

warning: unused imports: `KeyPoint` and `Mat`
 --> src/map/frame.rs:3:20
  |
3 | use opencv::core::{KeyPoint, Mat};
  |                    ^^^^^^^^  ^^^

warning: unused import: `ImuPreIntegrated`
 --> src/map/frame.rs:7:97
  |
7 | use crate::{actors::tracking_backend::TrackedMapPointData, modules::{bow::DVBoW, imu::{ImuBias, ImuPreIntegrated}}, registered_actors::{C...
  |                                                                                                 ^^^^^^^^^^^^^^^^

warning: unused import: `DVMatrix`
 --> src/map/keyframe.rs:2:50
  |
2 | use core::{config::{ SETTINGS, SYSTEM}, matrix::{DVMatrix, DVMatrix3, DVVector3}, sensor::Sensor, system::Timestamp};
  |                                                  ^^^^^^^^

warning: unused imports: `KeyPoint` and `Mat`
 --> src/map/keyframe.rs:4:20
  |
4 | use opencv::core::{KeyPoint, Mat};
  |                    ^^^^^^^^  ^^^

warning: unused import: `MapLock`
 --> src/map/keyframe.rs:5:109
  |
5 | use crate::{map::{map::Id, pose::Pose},modules::{bow::DVBoW, imu::*}, registered_actors::VOCABULARY_MODULE, MapLock};
  |                                                                                                             ^^^^^^^

warning: unused import: `backtrace::Backtrace`
 --> src/map/mappoint.rs:1:11
  |
1 | use std::{backtrace::Backtrace, collections::BTreeMap, fmt::Debug, sync::atomic::{AtomicI32, Ordering}};
  |           ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `ORBMatcherTrait`, `module_definitions::FeatureMatchingModule`, and `self`
 --> src/map/mappoint.rs:5:42
  |
5 | ...ules::{module_definitions::FeatureMatchingModule, orbslam_matcher::{ORBMatcherTrait, SCALE_FACTORS}}, registered_actors::{self, FEATUR...
  |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                    ^^^^^^^^^^^^^^^                                       ^^^^

warning: unused doc comment
  --> src/map/pose.rs:78:13
   |
78 | /             /// Returns group inverse.
79 | |             ///
   | |_______________^
...
84 |           let invr = self.0.rotation.inverse();
   |           ------------------------------------- rustdoc does not generate documentation for statements
   |
   = help: use `//` for a plain comment
   = note: `#[warn(unused_doc_comments)]` on by default

warning: unused import: `super::keyframe::MapPointMatches`
  --> src/map/features.rs:22:5
   |
22 | use super::keyframe::MapPointMatches;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `log::debug`
 --> src/map/keyframe_database.rs:5:5
  |
5 | use log::debug;
  |     ^^^^^^^^^^

warning: unused import: `core::system::Module`
 --> src/modules/orbslam_matcher.rs:1:5
  |
1 | use core::system::Module;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DVMatrix`
 --> src/modules/orbslam_matcher.rs:6:20
  |
6 | use core::matrix::{DVMatrix, DVVector3, DVVectorOfPoint2f};
  |                    ^^^^^^^^

warning: unused imports: `BufRead`, `fs::File`, `path::Path`, and `self`
 --> src/modules/optimizer.rs:3:71
  |
3 | use std::{cmp::{max, min}, collections::{BTreeMap, HashMap, HashSet}, fs::File, io::{self, BufRead}, path::Path};
  |                                                                       ^^^^^^^^       ^^^^  ^^^^^^^   ^^^^^^^^^^

warning: unused imports: `info` and `warn`
 --> src/modules/optimizer.rs:9:25
  |
9 | use log::{debug, error, info, warn};
  |                         ^^^^  ^^^^

warning: unused imports: `Rotation3`, `UnitQuaternion`, and `Vector3`
  --> src/modules/optimizer.rs:10:25
   |
10 | use nalgebra::{Matrix3, Rotation3, UnitQuaternion, Vector3};
   |                         ^^^^^^^^^  ^^^^^^^^^^^^^^  ^^^^^^^

warning: unused import: `GBA_KILL_SWITCH`
  --> src/modules/optimizer.rs:13:46
   |
13 |     actors::{loop_closing::{KeyFrameAndPose, GBA_KILL_SWITCH}, tracking_backend::TrackedMapPointData}, map::{frame::Frame, keyframe::KeyF...
   |                                              ^^^^^^^^^^^^^^^

warning: unused imports: `DVMatrix` and `ImuSensor`
 --> src/modules/imu.rs:1:49
  |
1 | use core::{config::{SETTINGS, SYSTEM}, matrix::{DVMatrix, DVMatrix3, DVMatrix4, DVVector3}, sensor::{FrameSensor, ImuSensor, Sensor}, sys...
  |                                                 ^^^^^^^^                                                          ^^^^^^^^^

warning: unused imports: `thread` and `time::Duration`
 --> src/modules/imu.rs:2:59
  |
2 | use std::{collections::{HashMap, VecDeque}, fmt::Display, thread, time::Duration};
  |                                                           ^^^^^^  ^^^^^^^^^^^^^^

warning: unused imports: `Matrix` and `SVD`
 --> src/modules/imu.rs:4:16
  |
4 | use nalgebra::{Matrix, Matrix3, SMatrix, Vector3, SVD};
  |                ^^^^^^                             ^^^

warning: unused imports: `DVTranslation` and `Map`
 --> src/modules/imu.rs:7:66
  |
7 | use crate::{actors::messages::UpdateFrameIMUMsg, map::{map::{Id, Map}, pose::{group_exp, DVTranslation}}, registered_actors::IMU, MapLock};
  |                                                                  ^^^                     ^^^^^^^^^^^^^

warning: unused import: `crate::modules::optimizer`
  --> src/modules/map_initialization.rs:11:5
   |
11 | use crate::modules::optimizer;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `self`
  --> src/modules/map_initialization.rs:12:32
   |
12 | use crate::registered_actors::{self, CAMERA_MODULE, FEATURE_MATCHING_MODULE, FULL_MAP_OPTIMIZATION_MODULE};
   |                                ^^^^

warning: unused import: `FeatureMatchingModule`
  --> src/modules/map_initialization.rs:16:33
   |
16 | use super::module_definitions::{FeatureMatchingModule, MapInitializationModule};
   |                                 ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `modules::orbslam_matcher`
 --> src/modules/relocalization.rs:3:50
  |
3 | use crate::{map::{frame::Frame, map::{Id, Map}}, modules::orbslam_matcher};
  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DVRotation`
  --> src/modules/sim3solver.rs:11:35
   |
11 | use crate::{map::{map::Id, pose::{DVRotation, Sim3}}, modules::optimizer::LEVEL_SIGMA2, registered_actors::CAMERA_MODULE, MapLock};
   |                                   ^^^^^^^^^^

warning: unused import: `crate::map::keyframe::KeyFrame`
 --> src/modules/bow.rs:7:5
  |
7 | use crate::map::keyframe::KeyFrame;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `cxx::UniquePtr`
 --> src/modules/opencv_extractor.rs:4:5
  |
4 | use cxx::UniquePtr;
  |     ^^^^^^^^^^^^^^

warning: unused import: `CAMERA`
 --> src/modules/opencv_extractor.rs:7:32
  |
7 | use crate::registered_actors::{CAMERA, FEATURE_DETECTION};
  |                                ^^^^^^

warning: unused import: `self`
 --> src/modules/orbslam3_loop_detection.rs:7:61
  |
7 | use crate::{map::{map::Id, pose::Sim3}, registered_actors::{self, FEATURE_MATCHING_MODULE}, MapLock};
  |                                                             ^^^^

warning: unused import: `orbslam_matcher::ORBMatcherTrait`
 --> src/modules/orbslam3_loop_detection.rs:9:65
  |
9 | use super::{module_definitions::LoopDetectionModule, optimizer, orbslam_matcher::ORBMatcherTrait, sim3solver::Sim3Solver};
  |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Downcast` and `impl_downcast`
 --> src/modules/module_definitions.rs:4:19
  |
4 | use downcast_rs::{impl_downcast, Downcast};
  |                   ^^^^^^^^^^^^^  ^^^^^^^^

warning: unused import: `Map`
 --> src/modules/module_definitions.rs:6:110
  |
6 | use crate::{actors::tracking_backend::TrackedMapPointData, map::{frame::Frame, keyframe::KeyFrame, map::{Id, Map}, pose::Sim3}, MapLock};
  |                                                                                                              ^^^

warning: unused imports: `DVMatrix`, `DVVectorOfKeyPoint`, and `SETTINGS`
 --> src/tests/imu_tests.rs:3:38
  |
3 |     use core::{config::{load_config, SETTINGS}, matrix::{DVMatrix, DVMatrix3, DVVector3, DVVectorOfKeyPoint}};
  |                                      ^^^^^^^^            ^^^^^^^^                        ^^^^^^^^^^^^^^^^^^
  |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
 --> src/tests/imu_tests.rs:2:1
  |
2 | mod sim3solver_tests {
  | ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DMatrix` and `Quaternion`
 --> src/tests/imu_tests.rs:6:20
  |
6 |     use nalgebra::{DMatrix, Matrix3, Quaternion, SMatrix, Vector3};
  |                    ^^^^^^^           ^^^^^^^^^^
  |
help: if this is a test module, consider adding a `#[cfg(test)]` to the containing module
 --> src/tests/imu_tests.rs:2:1
  |
2 | mod sim3solver_tests {
  | ^^^^^^^^^^^^^^^^^^^^

warning: use of deprecated struct `spin_sleep::LoopHelper`: Use spin_sleep_util crate
 --> src/main.rs:9:17
  |
9 | use spin_sleep::LoopHelper;
  |                 ^^^^^^^^^^
  |
  = note: `#[warn(deprecated)]` on by default

warning: use of deprecated struct `spin_sleep::LoopHelper`: Use spin_sleep_util crate
   --> src/main.rs:129:18
    |
129 |     loop_helper: LoopHelper,
    |                  ^^^^^^^^^^

warning: use of deprecated struct `spin_sleep::LoopHelper`: Use spin_sleep_util crate
   --> src/main.rs:171:26
    |
171 |             loop_helper: LoopHelper::builder().build_with_target_rate(SETTINGS.get::<f64>(SYSTEM, "fps")),
    |                          ^^^^^^^^^^

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:198:44
    |
198 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 1).await?;
    |                -----                       ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:198:9
    |
198 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 1).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:198:75
    |
198 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 1).await?;
    |                                                                           ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:258:44
    |
258 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 0).await?;
    |                -----                       ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:258:9
    |
258 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:258:75
    |
258 |         writer.write(LOOP_CLOSURE_CHANNEL, sceneupdate, msg.timestamp, 0).await?;
    |                                                                           ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:311:37
    |
311 |         writer.write(DEBUG_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                -----                ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:311:9
    |
311 |         writer.write(DEBUG_CHANNEL, sceneupdate, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:311:64
    |
311 |         writer.write(DEBUG_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                                                                ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0308]: mismatched types
    --> src/actors/visualizer.rs:620:29
     |
620  |             timestamp: Some(prost_types::Timestamp { seconds, nanos }),
     |                        ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `prost_types::protobuf::Timestamp`, found `prost_types::Timestamp`
     |                        |
     |                        arguments to this enum variant are incorrect
     |
     = note: `prost_types::Timestamp` and `prost_types::protobuf::Timestamp` have similar names, but are actually distinct types
note: `prost_types::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/protobuf.rs:2253:1
     |
2253 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
note: `prost_types::protobuf::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.12.6/src/protobuf.rs:2297:1
     |
2297 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
     = note: perhaps two different versions of crate `prost_types` are being used?
help: the type constructed contains `prost_types::Timestamp` due to the type of the argument passed
    --> src/actors/visualizer.rs:620:24
     |
620  |             timestamp: Some(prost_types::Timestamp { seconds, nanos }),
     |                        ^^^^^-----------------------------------------^
     |                             |
     |                             this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/nitin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:579:5
     |
579  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^

error[E0277]: the trait bound `RawImage: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:633:37
    |
633 |         writer.write(IMAGE_CHANNEL, image_msg, timestamp, 0).await?;
    |                -----                ^^^^^^^^^ the trait `prost::Message` is not implemented for `RawImage`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `RawImage: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:633:9
    |
633 |         writer.write(IMAGE_CHANNEL, image_msg, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `RawImage`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `RawImage: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:633:62
    |
633 |         writer.write(IMAGE_CHANNEL, image_msg, timestamp, 0).await?;
    |                                                              ^^^^^ the trait `prost::Message` is not implemented for `RawImage`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0308]: mismatched types
    --> src/actors/visualizer.rs:398:29
     |
398  |             timestamp: Some(prost_types::Timestamp { seconds: 0,  nanos: 0 }),
     |                        ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `prost_types::protobuf::Timestamp`, found `prost_types::Timestamp`
     |                        |
     |                        arguments to this enum variant are incorrect
     |
     = note: `prost_types::Timestamp` and `prost_types::protobuf::Timestamp` have similar names, but are actually distinct types
note: `prost_types::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/protobuf.rs:2253:1
     |
2253 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
note: `prost_types::protobuf::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.12.6/src/protobuf.rs:2297:1
     |
2297 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
     = note: perhaps two different versions of crate `prost_types` are being used?
help: the type constructed contains `prost_types::Timestamp` due to the type of the argument passed
    --> src/actors/visualizer.rs:398:24
     |
398  |             timestamp: Some(prost_types::Timestamp { seconds: 0,  nanos: 0 }),
     |                        ^^^^^------------------------------------------------^
     |                             |
     |                             this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/nitin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:579:5
     |
579  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:405:41
    |
405 |         writer.write(TRANSFORM_CHANNEL, transform, timestamp, 0).await.expect("Could not write transform");
    |                -----                    ^^^^^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:405:9
    |
405 |         writer.write(TRANSFORM_CHANNEL, transform, timestamp, 0).await.expect("Could not write transform");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:405:66
    |
405 |         writer.write(TRANSFORM_CHANNEL, transform, timestamp, 0).await.expect("Could not write transform");
    |                                                                  ^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:478:42
    |
478 |         writer.write(TRAJECTORY_CHANNEL, sceneupdate, timestamp, 0).await.expect("Could not write trajectory to foxglove");
    |                -----                     ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:478:9
    |
478 |         writer.write(TRAJECTORY_CHANNEL, sceneupdate, timestamp, 0).await.expect("Could not write trajectory to foxglove");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:478:69
    |
478 |         writer.write(TRAJECTORY_CHANNEL, sceneupdate, timestamp, 0).await.expect("Could not write trajectory to foxglove");
    |                                                                     ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `MapInfo: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:492:40
    |
492 |         writer.write(MAP_INFO_CHANNEL, map_info, timestamp, 0).await?;
    |                -----                   ^^^^^^^^ the trait `prost::Message` is not implemented for `MapInfo`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `MapInfo: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:492:9
    |
492 |         writer.write(MAP_INFO_CHANNEL, map_info, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `MapInfo`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `MapInfo: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:492:64
    |
492 |         writer.write(MAP_INFO_CHANNEL, map_info, timestamp, 0).await?;
    |                                                                ^^^^^ the trait `prost::Message` is not implemented for `MapInfo`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:554:41
    |
554 |         writer.write(MAPPOINTS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                -----                    ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:554:9
    |
554 |         writer.write(MAPPOINTS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:554:68
    |
554 |         writer.write(MAPPOINTS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                                                                    ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:607:45
    |
607 |         writer.write(CONNECTED_KFS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                -----                        ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:607:9
    |
607 |         writer.write(CONNECTED_KFS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:607:72
    |
607 |         writer.write(CONNECTED_KFS_CHANNEL, sceneupdate, timestamp, 0).await?;
    |                                                                        ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0308]: mismatched types
    --> src/actors/visualizer.rs:685:37
     |
685  |                     timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
     |                                ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `prost_types::protobuf::Timestamp`, found `prost_types::Timestamp`
     |                                |
     |                                arguments to this enum variant are incorrect
     |
     = note: `prost_types::Timestamp` and `prost_types::protobuf::Timestamp` have similar names, but are actually distinct types
note: `prost_types::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/protobuf.rs:2253:1
     |
2253 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
note: `prost_types::protobuf::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.12.6/src/protobuf.rs:2297:1
     |
2297 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
     = note: perhaps two different versions of crate `prost_types` are being used?
help: the type constructed contains `prost_types::Timestamp` due to the type of the argument passed
    --> src/actors/visualizer.rs:685:32
     |
685  |                     timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
     |                                ^^^^^---------------------------------------------------^
     |                                     |
     |                                     this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/nitin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:579:5
     |
579  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:692:36
    |
692 |         writer.write(channel_name, sceneupdate, timestamp, 0).await?;
    |                -----               ^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:692:9
    |
692 |         writer.write(channel_name, sceneupdate, timestamp, 0).await?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `SceneUpdate: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:692:63
    |
692 |         writer.write(channel_name, sceneupdate, timestamp, 0).await?;
    |                                                               ^^^^^ the trait `prost::Message` is not implemented for `SceneUpdate`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

warning: unreachable statement
   --> src/actors/tracking_backend.rs:332:25
    |
331 |                         todo!("Relocalization! Shutting down for now.");
    |                         ----------------------------------------------- any code following this expression is unreachable
332 |                         self.system.send(SHUTDOWN_ACTOR, Box::new(ShutdownMsg{}));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unreachable expression
   --> src/actors/tracking_backend.rs:338:17
    |
322 |                   let relocalize_success = match self.imu.ready(&self.map) {
    |  __________________________________________-
323 | |                     true => {
324 | |                         todo!("Relocalization, shutting down for now.");
325 | |                         // let _ok = self.imu.predict_state(&mut self.map, & self.current_frame);
...   |
336 | |                     }
337 | |                 };
    | |_________________- any code following this `match` expression is unreachable, as all arms diverge
338 | /                 self.state = match relocalize_success {
339 | |                     true => {
340 | |                         warn!("Relocalization unsuccessful...");
341 | |                         TrackingState::Lost
...   |
346 | |                     }
347 | |                 }
    | |_________________^ unreachable expression

warning: unreachable statement
   --> src/actors/tracking_backend.rs:354:25
    |
353 |                         todo!("Multi-maps, Can use the reset_active_map_code but there is no multi-map reasoning.");
    |                         ------------------------------------------------------------------------------------------- any code following this expression is unreachable
354 |                         self.system.send(SHUTDOWN_ACTOR, Box::new(ShutdownMsg{}));
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement

warning: unreachable expression
   --> src/actors/tracking_optical_flow.rs:990:23
    |
990 |               Box::new( NewKeyFrameMsg{
    |  _______________________^
991 | |                 keyframe: current_frame.clone(),
992 | |                 tracking_state: self.state,
993 | |                 matches_in_tracking: self.matches_inliers,
994 | |                 tracked_mappoint_depths: todo!("Keep track of mappoint depths!")
    | |                                          --------------------------------------- any code following this expression is unreachable
995 | |             } )
    | |_____________^ unreachable expression

error[E0308]: mismatched types
    --> src/actors/visualizer.rs:128:29
     |
128  |             timestamp: Some(prost_types::protobuf::Timestamp { seconds: 0,  nanos: 0 }),
     |                        ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `prost_types::protobuf::Timestamp`, found `prost_types::Timestamp`
     |                        |
     |                        arguments to this enum variant are incorrect
     |
     = note: `prost_types::Timestamp` and `prost_types::protobuf::Timestamp` have similar names, but are actually distinct types
note: `prost_types::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/protobuf.rs:2253:1
     |
2253 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
note: `prost_types::protobuf::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.12.6/src/protobuf.rs:2297:1
     |
2297 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
     = note: perhaps two different versions of crate `prost_types` are being used?
help: the type constructed contains `prost_types::Timestamp` due to the type of the argument passed
    --> src/actors/visualizer.rs:128:24
     |
128  |             timestamp: Some(prost_types::protobuf::Timestamp { seconds: 0,  nanos: 0 }),
     |                        ^^^^^----------------------------------------------------------^
     |                             |
     |                             this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/nitin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:579:5
     |
579  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:134:41
    |
134 |         writer.write(TRANSFORM_CHANNEL, transform, 0.0, 0).await.expect("Could not write transform");
    |                -----                    ^^^^^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |                |
    |                required by a bound introduced by this call
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:134:9
    |
134 |         writer.write(TRANSFORM_CHANNEL, transform, 0.0, 0).await.expect("Could not write transform");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0277]: the trait bound `FrameTransform: prost::Message` is not satisfied
   --> src/actors/visualizer.rs:134:60
    |
134 |         writer.write(TRANSFORM_CHANNEL, transform, 0.0, 0).await.expect("Could not write transform");
    |                                                            ^^^^^ the trait `prost::Message` is not implemented for `FrameTransform`
    |
    = help: the following other types implement trait `prost::Message`:
              ()
              Annotation
              Api
              CodeGeneratorRequest
              CodeGeneratorResponse
              DescriptorProto
              EnumDescriptorProto
              EnumOptions
            and 51 others
note: required by a bound in `FoxGloveWriter::write`
   --> src/actors/visualizer.rs:780:27
    |
780 |     pub async fn write<T: prost::Message>(
    |                           ^^^^^^^^^^^^^^ required by this bound in `FoxGloveWriter::write`

error[E0308]: mismatched types
    --> src/actors/visualizer.rs:673:29
     |
673  |             timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
     |                        ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `prost_types::protobuf::Timestamp`, found `prost_types::Timestamp`
     |                        |
     |                        arguments to this enum variant are incorrect
     |
     = note: `prost_types::Timestamp` and `prost_types::protobuf::Timestamp` have similar names, but are actually distinct types
note: `prost_types::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.13.3/src/protobuf.rs:2253:1
     |
2253 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
note: `prost_types::protobuf::Timestamp` is defined in crate `prost_types`
    --> /home/nitin/.cargo/registry/src/index.crates.io-6f17d22bba15001f/prost-types-0.12.6/src/protobuf.rs:2297:1
     |
2297 | pub struct Timestamp {
     | ^^^^^^^^^^^^^^^^^^^^
     = note: perhaps two different versions of crate `prost_types` are being used?
help: the type constructed contains `prost_types::Timestamp` due to the type of the argument passed
    --> src/actors/visualizer.rs:673:24
     |
673  |             timestamp: Some(prost_types::protobuf::Timestamp { seconds, nanos }),
     |                        ^^^^^---------------------------------------------------^
     |                             |
     |                             this argument influences the type of `Some`
note: tuple variant defined here
    --> /home/nitin/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:579:5
     |
579  |     Some(#[stable(feature = "rust1", since = "1.0.0")] T),
     |     ^^^^

error[E0071]: expected struct, variant or union type, found `f64`
   --> src/actors/visualizer.rs:702:29
    |
702 |             timestamp: Some(Timestamp { seconds, nanos }),
    |                             ^^^^^^^^^ not a struct

warning: unreachable statement
   --> src/modules/imu.rs:402:25
    |
397 |                         todo!("SOFIYA need to set mVwbGBA");
    |                         ----------------------------------- any code following this expression is unreachable
...
402 |                         child.ba_global_for_kf = current_keyframe_id;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement

warning: unused import: `module_definitions::FeatureMatchingModule`
 --> src/actors/tracking_backend.rs:7:148
  |
7 | ... IMU}, map_initialization::MapInitialization, module_definitions::FeatureMatchingModule, optimizer, orbslam_matcher, relocalization::R...
  |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `LocalMapOptimizationModule`
  --> src/actors/local_mapping.rs:27:79
   |
27 | use crate::modules::module_definitions::{CameraModule, FeatureMatchingModule, LocalMapOptimizationModule};
   |                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `FeatureMatchingModule`
  --> src/actors/tracking_optical_flow.rs:13:267
   |
13 | ...lization, module_definitions::{FeatureExtractionModule, FeatureMatchingModule, ImuModule}, optimizer, orbslam_extractor::ORBExtractor,...
   |                                                            ^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `relocalize_success`
   --> src/actors/tracking_backend.rs:322:21
    |
322 |                 let relocalize_success = match self.imu.ready(&self.map) {
    |                     ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_relocalize_success`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `not_enough_frames_since_last_reloc`
    --> src/actors/tracking_backend.rs:1149:13
     |
1149 |         let not_enough_frames_since_last_reloc = (self.current_frame.frame_id < self.relocalization.last_reloc_frame_id + (self.max_frame...
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_not_enough_frames_since_last_reloc`

warning: unused variable: `imu_initialized`
    --> src/actors/tracking_backend.rs:1238:86
     |
1238 |     fn update_frame_imu(&mut self, scale: f64, imu_bias: ImuBias, current_kf_id: Id, imu_initialized: bool) {
     |                                                                                      ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_imu_initialized`

warning: variable `count` is assigned to, but never used
   --> src/actors/loop_closing.rs:226:25
    |
226 |                 let mut count = 0;
    |                         ^^^^^
    |
    = note: consider using `_count` instead

warning: value assigned to `i` is never read
   --> src/actors/loop_closing.rs:460:13
    |
460 |             i += 1;
    |             ^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `matches`
   --> src/actors/tracking_optical_flow.rs:379:21
    |
379 |                 let matches = self.track_reference_keyframe(&mut current_frame, &last_frame.pose.unwrap());
    |                     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_matches`

warning: unused variable: `track_success`
   --> src/actors/tracking_optical_flow.rs:391:26
    |
391 |                     let (track_success, matches) = self.track_local_map(&mut current_frame);
    |                          ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_track_success`

warning: unused variable: `matches`
   --> src/actors/tracking_optical_flow.rs:391:41
    |
391 |                     let (track_success, matches) = self.track_local_map(&mut current_frame);
    |                                         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_matches`

warning: variable does not need to be mutable
   --> src/actors/tracking_optical_flow.rs:282:17
    |
282 |             let mut last_frame = last_frame.as_mut().unwrap();
    |                 ----^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `imu_bias`
  --> src/map/frame.rs:71:13
   |
71 |         let imu_bias = match sensor.imu() {
   |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_imu_bias`

warning: unused variable: `is_outlier`
   --> src/map/frame.rs:227:33
    |
227 |             if let Some((mp_id, is_outlier)) = self.mappoint_matches.get(i as usize) {
    |                                 ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_outlier`

warning: value assigned to `theta` is never read
   --> src/map/pose.rs:416:9
    |
416 |         theta = 0.0;
    |         ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable `max_word_kf_id` is assigned to, but never used
  --> src/map/keyframe_database.rs:83:17
   |
83 |         let mut max_word_kf_id = -1;
   |                 ^^^^^^^^^^^^^^
   |
   = note: consider using `_max_word_kf_id` instead

warning: value assigned to `max_word_kf_id` is never read
  --> src/map/keyframe_database.rs:89:25
   |
89 |                         max_word_kf_id = *kf_id;
   |                         ^^^^^^^^^^^^^^
   |
   = help: maybe it is overwritten before being read?

warning: variable `max_word_kf_id` is assigned to, but never used
   --> src/map/keyframe_database.rs:201:17
    |
201 |         let mut max_word_kf_id = -1;
    |                 ^^^^^^^^^^^^^^
    |
    = note: consider using `_max_word_kf_id` instead

warning: value assigned to `max_word_kf_id` is never read
   --> src/map/keyframe_database.rs:207:25
    |
207 |                         max_word_kf_id = *kf_id;
    |                         ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `i`
   --> src/modules/orbslam_matcher.rs:129:61
    |
129 |     fn lower_bound(&self, vec1: &Vec<u32>, vec2: &Vec<u32>, i: usize, j: usize) -> usize {
    |                                                             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `mp_id`
   --> src/modules/orbslam_matcher.rs:294:34
    |
294 |                     if let Some((mp_id, is_outlier)) = kf_1.get_mp_match(&real_idx_kf1) {
    |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_mp_id`

warning: unused variable: `is_outlier`
   --> src/modules/orbslam_matcher.rs:294:41
    |
294 |                     if let Some((mp_id, is_outlier)) = kf_1.get_mp_match(&real_idx_kf1) {
    |                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_outlier`

warning: variable `indices_empty` is assigned to, but never used
   --> src/modules/orbslam_matcher.rs:487:17
    |
487 |         let mut indices_empty = 0;
    |                 ^^^^^^^^^^^^^
    |
    = note: consider using `_indices_empty` instead

warning: variable `level` is assigned to, but never used
   --> src/modules/orbslam_matcher.rs:488:17
    |
488 |         let mut level = 0;
    |                 ^^^^^
    |
    = note: consider using `_level` instead

warning: variable `level2` is assigned to, but never used
   --> src/modules/orbslam_matcher.rs:489:17
    |
489 |         let mut level2 = 0;
    |                 ^^^^^^
    |
    = note: consider using `_level2` instead

warning: variable `track_in_view_c` is assigned to, but never used
   --> src/modules/orbslam_matcher.rs:490:17
    |
490 |         let mut track_in_view_c = 0;
    |                 ^^^^^^^^^^^^^^^
    |
    = note: consider using `_track_in_view_c` instead

warning: variable does not need to be mutable
   --> src/modules/orbslam_matcher.rs:482:13
    |
482 |         let mut non_tracked_points = HashMap::new();
    |             ----^^^^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `is_outlier`
   --> src/modules/orbslam_matcher.rs:708:37
    |
708 |                 if let Some((mp_id, is_outlier)) = last_frame.mappoint_matches.get(idx1 as usize) {
    |                                     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_outlier`

warning: unused variable: `is_outlier`
   --> src/modules/orbslam_matcher.rs:751:45
    |
751 |                         if let Some((mp_id, is_outlier)) = current_frame.mappoint_matches.get(idx2 as usize) {
    |                                             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_outlier`

warning: unused variable: `n_has_match`
   --> src/modules/orbslam_matcher.rs:858:17
    |
858 |         let mut n_has_match  = 0;
    |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_n_has_match`

warning: variable does not need to be mutable
   --> src/modules/orbslam_matcher.rs:858:13
    |
858 |         let mut n_has_match  = 0;
    |             ----^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable `total_visited` is assigned to, but never used
    --> src/modules/orbslam_matcher.rs:1150:17
     |
1150 |         let mut total_visited = 0;
     |                 ^^^^^^^^^^^^^
     |
     = note: consider using `_total_visited` instead

warning: variable `total_outer_loop` is assigned to, but never used
    --> src/modules/orbslam_matcher.rs:1151:17
     |
1151 |         let mut total_outer_loop = 0;
     |                 ^^^^^^^^^^^^^^^^
     |
     = note: consider using `_total_outer_loop` instead

warning: variable `total_inner_loop` is assigned to, but never used
    --> src/modules/orbslam_matcher.rs:1152:17
     |
1152 |         let mut total_inner_loop = 0;
     |                 ^^^^^^^^^^^^^^^^
     |
     = note: consider using `_total_inner_loop` instead

warning: value assigned to `num_bad_mono` is never read
   --> src/modules/optimizer.rs:235:13
    |
235 |     let mut num_bad_mono = 0;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_bad_stereo` is never read
   --> src/modules/optimizer.rs:236:13
    |
236 |     let mut num_bad_stereo = 0;
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_inliers` is never read
   --> src/modules/optimizer.rs:247:9
    |
247 |         num_inliers = 0;
    |         ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `chi2_stereo_out`
   --> src/modules/optimizer.rs:331:13
    |
331 |         let chi2_stereo_out = 24.0;
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chi2_stereo_out`

warning: value assigned to `num_inliers` is never read
   --> src/modules/optimizer.rs:363:5
    |
363 |     num_inliers = num_inliers_mono + num_inliers_stereo;
    |     ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: variable `tot_in` is assigned to, but never used
   --> src/modules/optimizer.rs:415:13
    |
415 |     let mut tot_in = 0;
    |             ^^^^^^
    |
    = note: consider using `_tot_in` instead

warning: variable `tot_out` is assigned to, but never used
   --> src/modules/optimizer.rs:416:13
    |
416 |     let mut tot_out = 0;
    |             ^^^^^^^
    |
    = note: consider using `_tot_out` instead

warning: variable does not need to be mutable
   --> src/modules/optimizer.rs:384:9
    |
384 |     let mut h_i: nalgebra::SMatrix::<f64, 24, 24> = optimizer.get_hessian_from_edge_inertial(0).into();
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: value assigned to `num_bad_mono` is never read
   --> src/modules/optimizer.rs:647:13
    |
647 |     let mut num_bad_mono = 0;
    |             ^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_bad_stereo` is never read
   --> src/modules/optimizer.rs:648:13
    |
648 |     let mut num_bad_stereo = 0;
    |             ^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_inliers_mono` is never read
   --> src/modules/optimizer.rs:650:13
    |
650 |     let mut num_inliers_mono = 0;
    |             ^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_inliers_stereo` is never read
   --> src/modules/optimizer.rs:651:13
    |
651 |     let mut num_inliers_stereo = 0;
    |             ^^^^^^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: value assigned to `num_inliers` is never read
   --> src/modules/optimizer.rs:659:9
    |
659 |         num_inliers = 0;
    |         ^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `chi2_stereo_out`
   --> src/modules/optimizer.rs:745:13
    |
745 |         let chi2_stereo_out = 24.0;
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chi2_stereo_out`

warning: variable `tot_in` is assigned to, but never used
   --> src/modules/optimizer.rs:800:13
    |
800 |     let mut tot_in = 0;
    |             ^^^^^^
    |
    = note: consider using `_tot_in` instead

warning: variable `tot_out` is assigned to, but never used
   --> src/modules/optimizer.rs:801:13
    |
801 |     let mut tot_out = 0;
    |             ^^^^^^^
    |
    = note: consider using `_tot_out` instead

warning: variable does not need to be mutable
   --> src/modules/optimizer.rs:489:9
    |
489 |     let mut initial_stereo_correspondences = 0; //nInitialStereoCorrespondences
    |         ----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `cov_inertial`
   --> src/modules/optimizer.rs:848:70
    |
848 |     bg: &mut DVVector3<f64>, ba: &mut DVVector3<f64>, is_mono: bool, cov_inertial: &nalgebra::SMatrix::<f64, 9, 9>,
    |                                                                      ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_cov_inertial`

warning: unused variable: `b_gauss`
   --> src/modules/optimizer.rs:849:27
    |
849 |     fixed_velocity: bool, b_gauss: bool, prior_g: f64, prior_a: f64,
    |                           ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_b_gauss`

warning: unused variable: `is_outlier`
    --> src/modules/optimizer.rs:1186:33
     |
1186 |             if let Some((mp_id, is_outlier)) = frame.mappoint_matches.get(i) {
     |                                 ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_outlier`

warning: unused variable: `bias`
   --> src/modules/imu.rs:220:13
    |
220 |         let bias = ImuBias::new();
    |             ^^^^ help: if this is intentional, prefix it with an underscore: `_bias`

warning: unused variable: `current_frame`
  --> src/modules/relocalization.rs:18:19
   |
18 |     fn run(&self, current_frame: &mut Frame, map: &Map) -> Result<bool, Box<dyn std::error::Error>> {
   |                   ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_frame`

warning: unused variable: `map`
  --> src/modules/relocalization.rs:18:46
   |
18 |     fn run(&self, current_frame: &mut Frame, map: &Map) -> Result<bool, Box<dyn std::error::Error>> {
   |                                              ^^^ help: if this is intentional, prefix it with an underscore: `_map`

warning: unused variable: `keyframe_matched_mp`
  --> src/modules/sim3solver.rs:42:13
   |
42 |         mut keyframe_matched_mp: HashMap<usize, Id>
   |             ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_keyframe_matched_mp`

warning: variable does not need to be mutable
  --> src/modules/sim3solver.rs:42:9
   |
42 |         mut keyframe_matched_mp: HashMap<usize, Id>
   |         ----^^^^^^^^^^^^^^^^^^^
   |         |
   |         help: remove this `mut`

warning: unused variable: `mp`
   --> src/modules/local_bundle_adjustment.rs:451:33
    |
451 |                     if let Some(mp) = lock.mappoints.get(&mp_id) {
    |                                 ^^ help: if this is intentional, prefix it with an underscore: `_mp`

warning: unused variable: `non_fixed`
   --> src/modules/local_bundle_adjustment.rs:534:9
    |
534 |     let non_fixed = fixed_keyframes.len() == 0;
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_non_fixed`

warning: unused variable: `th_huber_stereo`
   --> src/modules/local_bundle_adjustment.rs:688:9
    |
688 |     let th_huber_stereo: f32 = (7.815 as f32).sqrt();
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_th_huber_stereo`

warning: unused variable: `chi2_stereo2`
   --> src/modules/local_bundle_adjustment.rs:690:9
    |
690 |     let chi2_stereo2 = 7.815;
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_chi2_stereo2`

warning: variable `mps_to_optimize` is assigned to, but never used
   --> src/modules/local_bundle_adjustment.rs:711:17
    |
711 |         let mut mps_to_optimize = 0;
    |                 ^^^^^^^^^^^^^^^
    |
    = note: consider using `_mps_to_optimize` instead

warning: unused variable: `fixed_kfs`
   --> src/modules/local_bundle_adjustment.rs:712:17
    |
712 |         let mut fixed_kfs = 0;
    |                 ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fixed_kfs`

warning: unused variable: `kfs_to_optimize`
   --> src/modules/local_bundle_adjustment.rs:713:17
    |
713 |         let mut kfs_to_optimize = 0;
    |                 ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_kfs_to_optimize`

warning: variable `edges` is assigned to, but never used
   --> src/modules/local_bundle_adjustment.rs:714:17
    |
714 |         let mut edges = 0;
    |                 ^^^^^
    |
    = note: consider using `_edges` instead

warning: unused variable: `velocity`
   --> src/modules/local_bundle_adjustment.rs:927:17
    |
927 |             let velocity = optimizer.recover_optimized_vertex_velocity(max_kf_id + 3 * kf_id + 1);
    |                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_velocity`

warning: variable does not need to be mutable
   --> src/modules/local_bundle_adjustment.rs:712:13
    |
712 |         let mut fixed_kfs = 0;
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/modules/local_bundle_adjustment.rs:713:13
    |
713 |         let mut kfs_to_optimize = 0;
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: variable does not need to be mutable
   --> src/modules/global_bundle_adjustment.rs:188:9
    |
188 |     let mut non_fixed = 0;
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `f`
  --> src/modules/module_definitions.rs:80:19
   |
80 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> src/modules/module_definitions.rs:126:19
    |
126 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `imu_preintegrated`
    --> src/tests/imu_tests.rs:1144:21
     |
1144 |                 let imu_preintegrated = kf.imu_preintegrated.as_ref().unwrap();
     |                     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_imu_preintegrated`

warning: unused variable: `vg2_id`
    --> src/tests/imu_tests.rs:1187:34
     |
1187 |             let (vg1_id, va1_id, vg2_id, va2_id) = {
     |                                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_vg2_id`

warning: unused variable: `va2_id`
    --> src/tests/imu_tests.rs:1187:42
     |
1187 |             let (vg1_id, va1_id, vg2_id, va2_id) = {
     |                                          ^^^^^^ help: if this is intentional, prefix it with an underscore: `_va2_id`

warning: unused variable: `ini_mp_id`
    --> src/tests/imu_tests.rs:1230:13
     |
1230 |         let ini_mp_id = max_kf_id * 5;
     |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_ini_mp_id`

warning: unused variable: `mps_not_included`
    --> src/tests/imu_tests.rs:1231:17
     |
1231 |         let mut mps_not_included: HashSet<Id> = HashSet::new(); // vbNotIncludedMP
     |                 ^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mps_not_included`

warning: variable does not need to be mutable
    --> src/tests/imu_tests.rs:1231:13
     |
1231 |         let mut mps_not_included: HashSet<Id> = HashSet::new(); // vbNotIncludedMP
     |             ----^^^^^^^^^^^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `is_mono`
    --> src/tests/imu_tests.rs:1355:13
     |
1355 |         let is_mono = true;
     |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_is_mono`

warning: unused variable: `prior_g`
    --> src/tests/imu_tests.rs:1358:13
     |
1358 |         let prior_g = 100;
     |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_prior_g`

warning: unused variable: `scale`
    --> src/tests/imu_tests.rs:1359:13
     |
1359 |         let scale = 1.0;
     |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_scale`

warning: unused variable: `new_imu_preintegrated_for_kfs`
    --> src/tests/imu_tests.rs:2225:21
     |
2225 |             let mut new_imu_preintegrated_for_kfs: HashMap<Id, ImuPreIntegrated> = HashMap::new();
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_new_imu_preintegrated_for_kfs`

warning: variable does not need to be mutable
    --> src/tests/imu_tests.rs:2225:17
     |
2225 |             let mut new_imu_preintegrated_for_kfs: HashMap<Id, ImuPreIntegrated> = HashMap::new();
     |                 ----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |                 |
     |                 help: remove this `mut`

Some errors have detailed explanations: E0071, E0277, E0308, E0603.
For more information about an error, try `rustc --explain E0071`.
warning: `darvis` (bin "bindarvis") generated 157 warnings
error: could not compile `darvis` (bin "bindarvis") due to 42 previous errors; 157 warnings emitted
